{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyMut \ud83e\uddec","text":"<p>A Python library for gene mutation analysis and visualisation</p>"},{"location":"#comparison-with-other-tools","title":"\ud83c\udfaf Comparison with Other Tools","text":"FUNCTIONAL CRITERIA PYMUT (PROPOSAL) MUTSCAPE MAFTOOLS Input formats VCF &amp; MAF (native) MAF MAF VEP annotation \u2713 Genomic range filtering \u2713 \u2713 \u2713 PASS category variant filtering \u2713 \u2713 Sample filtering \u2713 \u2713 Tissue expression filtering \u2713 \u2713 File format transformation \u2713 \u2713 (VCF to MAF only) \u2713 (VCF to MAF only) File output \u2713 File combination \u2713 \u2713 Significantly mutated genes (SMG) detection \u2713 Cancer-related gene annotation \u2713 \u2713 Tumor mutational burden (TMB) calculation \u2713 \u2713 Mutational signature identification \u2713 Medical implications mutation annotation \u2713 \u2713 PFAM annotation support \u2713 \u2713"},{"location":"#requirements","title":"\ud83d\udccb Requirements","text":"Librer\u00eda Dependencias inmediatas duckdb 1.3.2 \u2013 Ninguna fastparquet 2024.11.0 \u2013 cramjam \u2265 2.3\u2013 fsspec\u2013 numpy\u2013 packaging\u2013 pandas \u2265 1.5.0 matplotlib 3.10.3 \u2013 contourpy \u2265 1.0.1\u2013 cycler \u2265 0.10\u2013 fonttools \u2265 4.22.0\u2013 kiwisolver \u2265 1.3.1\u2013 numpy \u2265 1.23\u2013 packaging \u2265 20.0\u2013 pillow \u2265 8\u2013 pyparsing \u2265 2.3.1\u2013 python-dateutil \u2265 2.7 mkdocs 1.6.1 \u2013 click \u2265 7.0\u2013 colorama \u2265 0.4\u2013 ghp-import \u2265 1.0\u2013 jinja2 \u2265 2.11.1\u2013 markdown \u2265 3.3.6\u2013 markupsafe \u2265 2.0.1\u2013 mergedeep \u2265 1.3.4\u2013 mkdocs-get-deps \u2265 0.2.0\u2013 packaging \u2265 20.5\u2013 pathspec \u2265 0.11.1\u2013 pyyaml \u2265 5.1\u2013 pyyaml-env-tag \u2265 0.1\u2013 watchdog \u2265 2.0 numpy 1.26.4 \u2013 Ninguna pandas 2.3.1 \u2013 numpy \u2265 1.22.4\u2013 python-dateutil \u2265 2.8.2\u2013 pytz \u2265 2020.1\u2013 tzdata \u2265 2022.7 pyarrow 14.0.2 \u2013 numpy \u2265 1.16.6 pyensembl 2.3.13 \u2013 datacache \u2265 1.4.0,&lt;2.0.0\u2013 gtfparse \u2265 2.5.0,&lt;3.0.0\u2013 memoized-property \u2265 1.0.2\u2013 pylint \u2265 2.17.2,&lt;3.0.0\u2013 serializable \u2265 0.2.1,&lt;1.0.0\u2013 tinytimer \u2265 0.0.0,&lt;1.0.0\u2013 typechecks \u2265 0.0.2,&lt;1.0.0 pyfaidx 0.8.1.4 \u2013 packaging requests 2.32.4 \u2013 certifi \u2265 2017.4.17\u2013 charset-normalizer \u2265 2,&lt;4\u2013 idna \u2265 2.5,&lt;4\u2013 urllib3 \u2265 1.21.1,&lt;3 scikit-learn 1.7.1 \u2013 joblib \u2265 1.2.0\u2013 numpy \u2265 1.22.0\u2013 scipy \u2265 1.8.0\u2013 threadpoolctl \u2265 3.1.0 scipy 1.11. 4 \u2013 numpy \u2265 1.21.6,&lt;1.28.0 seaborn 0.13.2 \u2013 matplotlib \u2265 3.4,&lt;3.6.1 or &gt;3.6.1\u2013 numpy \u2265 1.20,&lt;1.24.0 or &gt;1.24.0\u2013 pandas \u2265 1.2 urllib3 2.5.0 \u2013 Ninguna"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"installation/","title":"Installation Guide","text":""},{"location":"installation/#option-1-basic-installation-pip","title":"Option 1: Basic Installation (pip)","text":"<pre><code>pip install pymut-bio\n</code></pre> <p>Note: The pip installation provides core functionality for mutation data visualization, but some advanced features may be limited as certain bioinformatics tools are not available through PyPI.</p>"},{"location":"installation/#option-2-full-installation-recommended-conda","title":"Option 2: Full Installation (Recommended - Conda)","text":"<p>For complete functionality including all bioinformatics tools, use the conda environment:</p> <pre><code># 0) Descargar el environment.yml (elige curl o wget)\ncurl -fsSL https://raw.githubusercontent.com/Luisruimor/pyMut/main/environment.yml -o environment.yml\n# \u00f3:\n# wget -O environment.yml https://raw.githubusercontent.com/Luisruimor/pyMut/main/environment.yml\n\n# 1) crear el entorno (a\u00f1ade tus binarios al environment.yml)\nconda env create -f environment.yml\n\n# 2) activar el entorno\nconda activate NOMBRE-DEL-ENTORNO\n\n# 3) instalar tu librer\u00eda desde PyPI en ese entorno\npip install pymut-bio\n</code></pre> <p>The conda environment includes essential bioinformatics tools: - bcftools: VCF/BCF file manipulation - ensembl-vep: Variant Effect Predictor - htslib: High-throughput sequencing data processing - tabix: Generic indexer for TAB-delimited genome position files</p> <p>These tools enable advanced genomic data processing capabilities that are not available with pip-only installation.</p>"},{"location":"oncoplot/","title":"Gu\u00eda Completa del Oncoplot","text":"<p>El oncoplot (tambi\u00e9n conocido como waterfall plot en algunos contextos) es una visualizaci\u00f3n fundamental en gen\u00f3mica del c\u00e1ncer que muestra los patrones de mutaci\u00f3n a trav\u00e9s de muestras y genes en formato heatmap. Esta gu\u00eda cubre todo lo que necesitas saber para crear y personalizar oncoplots usando pyMut.</p>"},{"location":"oncoplot/#tabla-de-contenidos","title":"Tabla de Contenidos","text":"<ol> <li>Introducci\u00f3n</li> <li>Instalaci\u00f3n y Configuraci\u00f3n</li> <li>Uso B\u00e1sico</li> <li>Par\u00e1metros Detallados</li> <li>Formatos de Datos Soportados</li> <li>Ejemplos Avanzados</li> <li>Personalizaci\u00f3n Visual</li> <li>Interpretaci\u00f3n del Oncoplot</li> <li>Soluci\u00f3n de Problemas</li> <li>Optimizaci\u00f3n de Rendimiento</li> </ol>"},{"location":"oncoplot/#introduccion","title":"Introducci\u00f3n","text":"<p>El oncoplot es una herramienta esencial para visualizar paisajes mutacionales en datos gen\u00f3micos. Proporciona una vista panor\u00e1mica de:</p> <ul> <li>Genes m\u00e1s frecuentemente mutados</li> <li>Patrones de co-ocurrencia de mutaciones</li> <li>Carga mutacional por muestra</li> <li>Tipos de mutaciones por color</li> <li>Distribuci\u00f3n de mutaciones across samples</li> </ul>"},{"location":"oncoplot/#caracteristicas-principales","title":"Caracter\u00edsticas Principales","text":"<ul> <li>Detecci\u00f3n autom\u00e1tica de columnas de muestra (TCGA y formato .GT)</li> <li>Soporte multiformato para genotipos (A|G, A/G, etc.)</li> <li>Detecci\u00f3n de Multi_Hit para muestras con m\u00faltiples mutaciones</li> <li>Esquemas de colores est\u00e1ndar para tipos de mutaci\u00f3n</li> <li>Ordenamiento inteligente por frecuencia de mutaci\u00f3n</li> <li>Alta calidad de exportaci\u00f3n (PNG, PDF, SVG)</li> </ul>"},{"location":"oncoplot/#instalacion-y-configuracion","title":"Instalaci\u00f3n y Configuraci\u00f3n","text":""},{"location":"oncoplot/#requisitos-previos","title":"Requisitos Previos","text":"<pre><code>pip install pandas matplotlib seaborn numpy\n</code></pre>"},{"location":"oncoplot/#configuracion-de-alta-calidad","title":"Configuraci\u00f3n de Alta Calidad","text":"<pre><code>from pyMut import PyMutation\n\n# Configurar alta calidad autom\u00e1ticamente (recomendado)\nPyMutation.configure_high_quality_plots()\n</code></pre> <p>Esta configuraci\u00f3n aplica autom\u00e1ticamente: - DPI = 300 para im\u00e1genes n\u00edtidas - bbox_inches = 'tight' para layouts optimizados - Configuraciones de fuente mejoradas</p>"},{"location":"oncoplot/#uso-basico","title":"Uso B\u00e1sico","text":""},{"location":"oncoplot/#ejemplo-minimo","title":"Ejemplo M\u00ednimo","text":"<pre><code>import pandas as pd\nfrom pyMut import PyMutation\n\n# Cargar datos\ndata = pd.read_csv('mutations.tsv', sep='\\t')\n\n# Crear objeto PyMutation\npy_mut = PyMutation(data)\n\n# Generar oncoplot b\u00e1sico\nfig = py_mut.oncoplot()\n\n# Guardar\nfig.savefig('oncoplot.png')\n</code></pre>"},{"location":"oncoplot/#ejemplo-con-personalizacion","title":"Ejemplo con Personalizaci\u00f3n","text":"<pre><code># Oncoplot personalizado\nfig = py_mut.oncoplot(\n    title=\"Paisaje Mutacional - TCGA LAML\",\n    top_genes_count=20,\n    max_samples=100,\n    figsize=(16, 10)\n)\n</code></pre>"},{"location":"oncoplot/#parametros-detallados","title":"Par\u00e1metros Detallados","text":""},{"location":"oncoplot/#parametros-del-metodo-oncoplot","title":"Par\u00e1metros del M\u00e9todo <code>oncoplot()</code>","text":"Par\u00e1metro Tipo Valor por Defecto Descripci\u00f3n <code>figsize</code> <code>Tuple[int, int]</code> <code>(16, 10)</code> Tama\u00f1o de figura (ancho, alto) en pulgadas <code>title</code> <code>str</code> <code>\"Oncoplot\"</code> T\u00edtulo del gr\u00e1fico <code>gene_column</code> <code>str</code> <code>\"Hugo_Symbol\"</code> Columna con s\u00edmbolos de genes <code>variant_column</code> <code>str</code> <code>\"Variant_Classification\"</code> Columna con tipos de mutaci\u00f3n <code>ref_column</code> <code>str</code> <code>\"REF\"</code> Columna con alelos de referencia <code>alt_column</code> <code>str</code> <code>\"ALT\"</code> Columna con alelos alternativos <code>top_genes_count</code> <code>int</code> <code>10</code> N\u00famero de genes m\u00e1s mutados a mostrar <code>max_samples</code> <code>int</code> <code>180</code> N\u00famero m\u00e1ximo de muestras a mostrar"},{"location":"oncoplot/#validacion-de-parametros","title":"Validaci\u00f3n de Par\u00e1metros","text":"<p>El m\u00e9todo incluye validaci\u00f3n robusta:</p> <pre><code># \u2713 V\u00e1lido\npy_mut.oncoplot(top_genes_count=15, max_samples=50)\n\n# \u2717 Inv\u00e1lido - lanzar\u00e1 ValueError\npy_mut.oncoplot(top_genes_count=0)         # Debe ser &gt; 0\npy_mut.oncoplot(max_samples=-1)            # Debe ser &gt; 0\npy_mut.oncoplot(figsize=(0, 10))           # Dimensiones deben ser &gt; 0\n</code></pre>"},{"location":"oncoplot/#formatos-de-datos-soportados","title":"Formatos de Datos Soportados","text":""},{"location":"oncoplot/#estructura-de-datos-requerida","title":"Estructura de Datos Requerida","text":"<p>El DataFrame debe contener al menos estas columnas:</p>"},{"location":"oncoplot/#columnas-obligatorias","title":"Columnas Obligatorias","text":"<ul> <li><code>Hugo_Symbol</code>: S\u00edmbolos de genes (ej: \"TP53\", \"KRAS\")</li> <li><code>Variant_Classification</code>: Tipos de mutaci\u00f3n (ej: \"Missense_Mutation\")</li> <li><code>REF</code>: Alelos de referencia (ej: \"A\", \"T\")</li> <li><code>ALT</code>: Alelos alternativos (ej: \"G\", \"C\")</li> </ul>"},{"location":"oncoplot/#columnas-de-muestra","title":"Columnas de Muestra","text":"<p>Las columnas de muestra se detectan autom\u00e1ticamente usando patrones: - Formato TCGA: <code>TCGA-AB-1234</code>, <code>TCGA-CD-5678</code> - Formato GT: <code>sample1.GT</code>, <code>sample2.GT</code></p>"},{"location":"oncoplot/#formatos-de-genotipo-soportados","title":"Formatos de Genotipo Soportados","text":"<p>El oncoplot soporta m\u00faltiples formatos de genotipo:</p> <pre><code># Formatos v\u00e1lidos:\n\"A|G\"    # Formato est\u00e1ndar pipe-separated\n\"A/G\"    # Formato slash-separated\n\"A:G\"    # Colon-separated\n\"A;G\"    # Semicolon-separated\n\"A,G\"    # Comma-separated\n\n# Casos especiales:\n\"A|A\"    # Homocigoto referencia (no mutaci\u00f3n)\n\"G|G\"    # Homocigoto alternativo (mutaci\u00f3n)\n\".\"      # Datos faltantes\n\"\"       # Datos vac\u00edos\n</code></pre>"},{"location":"oncoplot/#estructura-de-ejemplo","title":"Estructura de Ejemplo","text":"<pre><code>import pandas as pd\n\ndata = pd.DataFrame({\n    'Hugo_Symbol': ['TP53', 'KRAS', 'PIK3CA'],\n    'Variant_Classification': ['Missense_Mutation', 'Nonsense_Mutation', 'In_Frame_Del'],\n    'REF': ['A', 'C', 'G'],\n    'ALT': ['G', 'T', 'A'],\n    'TCGA-AB-1234': ['A|G', 'C|C', 'G|A'],    # Mutado en TP53 y PIK3CA\n    'TCGA-CD-5678': ['A|A', 'C|T', 'G|G'],    # Mutado en KRAS y PIK3CA\n    'TCGA-EF-9012': ['A|G', 'C|T', 'G|G']     # Mutado en todos los genes\n})\n</code></pre>"},{"location":"oncoplot/#ejemplos-avanzados","title":"Ejemplos Avanzados","text":""},{"location":"oncoplot/#enfoque-en-genes-especificos","title":"Enfoque en Genes Espec\u00edficos","text":"<pre><code># Mostrar solo genes altamente mutados\nfig = py_mut.oncoplot(\n    title=\"Genes Driver Principales\",\n    top_genes_count=5,\n    max_samples=200,\n    figsize=(20, 6)\n)\n</code></pre>"},{"location":"oncoplot/#vista-panoramica","title":"Vista Panor\u00e1mica","text":"<pre><code># Vista amplia del paisaje mutacional\nfig = py_mut.oncoplot(\n    title=\"Paisaje Mutacional Completo\",\n    top_genes_count=30,\n    max_samples=50,\n    figsize=(18, 12)\n)\n</code></pre>"},{"location":"oncoplot/#exportacion-multi-formato","title":"Exportaci\u00f3n Multi-formato","text":"<pre><code>fig = py_mut.oncoplot(title=\"An\u00e1lisis Principal\")\n\n# Exportar en m\u00faltiples formatos\nfor fmt in ['png', 'pdf', 'svg']:\n    output_file = f'oncoplot.{fmt}'\n    if fmt == 'svg':\n        fig.savefig(output_file, format=fmt)\n    else:\n        fig.savefig(output_file, format=fmt, dpi=300)\n</code></pre>"},{"location":"oncoplot/#analisis-interactivo","title":"An\u00e1lisis Interactivo","text":"<pre><code># Para exploraci\u00f3n interactiva\nfig = py_mut.oncoplot(\n    title=\"Exploraci\u00f3n Interactiva\",\n    top_genes_count=25\n)\n</code></pre>"},{"location":"oncoplot/#personalizacion-visual","title":"Personalizaci\u00f3n Visual","text":""},{"location":"oncoplot/#esquema-de-colores","title":"Esquema de Colores","text":"<p>El oncoplot usa colores est\u00e1ndar para tipos de mutaci\u00f3n comunes:</p> Tipo de Mutaci\u00f3n Color Descripci\u00f3n Missense_Mutation Azul Mutaciones que cambian amino\u00e1cido Nonsense_Mutation Rojo Mutaciones que introducen stop codon Frame_Shift_Del Verde Deleciones que alteran marco de lectura Frame_Shift_Ins P\u00farpura Inserciones que alteran marco de lectura In_Frame_Del Cian claro Deleciones que mantienen marco In_Frame_Ins Naranja Inserciones que mantienen marco Splice_Site Rosa Mutaciones en sitios de splicing Multi_Hit Negro M\u00faltiples tipos en misma muestra/gen None Gris claro Sin mutaci\u00f3n detectada"},{"location":"oncoplot/#tamanos-de-figura-recomendados","title":"Tama\u00f1os de Figura Recomendados","text":"<pre><code># Para pocos genes, muchas muestras\nfigsize=(20, 6)   # Formato panor\u00e1mico\n\n# Para muchos genes, pocas muestras  \nfigsize=(12, 16)  # Formato vertical\n\n# Balanceado general\nfigsize=(16, 10)  # Formato est\u00e1ndar\n\n# Para presentaciones\nfigsize=(24, 12)  # Extra grande\n</code></pre>"},{"location":"oncoplot/#interpretacion-del-oncoplot","title":"Interpretaci\u00f3n del Oncoplot","text":""},{"location":"oncoplot/#lectura-del-grafico","title":"Lectura del Gr\u00e1fico","text":"<ol> <li>Eje Y (Genes): Ordenados por frecuencia de mutaci\u00f3n (m\u00e1s mutados arriba)</li> <li>Eje X (Muestras): Ordenadas por carga mutacional total</li> <li>Colores: Indican tipo de mutaci\u00f3n seg\u00fan leyenda</li> <li>Celdas grises: No hay mutaci\u00f3n detectada</li> <li>Celdas negras: M\u00faltiples tipos de mutaci\u00f3n (Multi_Hit)</li> </ol>"},{"location":"oncoplot/#patrones-importantes","title":"Patrones Importantes","text":"<ul> <li>Genes frecuentemente mutados: Aparecen en la parte superior</li> <li>Muestras con alta carga mutacional: Hacia la izquierda</li> <li>Co-ocurrencias: Genes mutados en las mismas muestras</li> <li>Exclusividad mutua: Genes que raramente se mutan juntos</li> </ul>"},{"location":"oncoplot/#analisis-de-multi_hit","title":"An\u00e1lisis de Multi_Hit","text":"<p>Cuando una muestra tiene m\u00faltiples tipos de mutaci\u00f3n en el mismo gen:</p> <pre><code># Ejemplo: TP53 con Missense y Nonsense en la misma muestra\n# Se mostrar\u00e1 como Multi_Hit (negro)\ndata_multihit = pd.DataFrame({\n    'Hugo_Symbol': ['TP53', 'TP53'],\n    'Variant_Classification': ['Missense_Mutation', 'Nonsense_Mutation'],\n    'REF': ['A', 'C'],\n    'ALT': ['G', 'T'],\n    'TCGA-AB-1234': ['A|G', 'C|T']  # Ambas mutaciones presentes\n})\n</code></pre>"},{"location":"oncoplot/#solucion-de-problemas","title":"Soluci\u00f3n de Problemas","text":""},{"location":"oncoplot/#errores-comunes","title":"Errores Comunes","text":""},{"location":"oncoplot/#1-columnas-faltantes","title":"1. Columnas Faltantes","text":"<pre><code># Error: ValueError: Faltan las siguientes columnas requeridas: ['REF']\n# Soluci\u00f3n: Verificar que todas las columnas requeridas est\u00e9n presentes\nrequired_columns = ['Hugo_Symbol', 'Variant_Classification', 'REF', 'ALT']\nmissing = [col for col in required_columns if col not in data.columns]\nprint(f\"Columnas faltantes: {missing}\")\n</code></pre>"},{"location":"oncoplot/#2-no-se-detectan-muestras","title":"2. No se Detectan Muestras","text":"<pre><code># Error: No se pudieron detectar columnas de muestra autom\u00e1ticamente\n# Soluci\u00f3n: Verificar formato de nombres de columnas\nsample_cols = [col for col in data.columns if col.startswith('TCGA-')]\nprint(f\"Columnas TCGA encontradas: {sample_cols}\")\n</code></pre>"},{"location":"oncoplot/#3-no-hay-datos-de-mutacion","title":"3. No Hay Datos de Mutaci\u00f3n","text":"<pre><code># Error: No hay datos de mutaci\u00f3n para visualizar\n# Soluci\u00f3n: Verificar que hay mutaciones detectables\nmutations_detected = 0\nfor col in sample_cols[:5]:  # Revisar primeras 5 muestras\n    mutations = data[col].apply(lambda x: '|' in str(x) and 'A|A' not in str(x)).sum()\n    mutations_detected += mutations\nprint(f\"Mutaciones detectadas en primeras 5 muestras: {mutations_detected}\")\n</code></pre>"},{"location":"oncoplot/#4-parametros-invalidos","title":"4. Par\u00e1metros Inv\u00e1lidos","text":"<pre><code># Error: ValueError: top_genes_count debe ser un entero positivo\n# Soluci\u00f3n: Usar valores v\u00e1lidos\nassert top_genes_count &gt; 0, \"top_genes_count debe ser &gt; 0\"\nassert max_samples &gt; 0, \"max_samples debe ser &gt; 0\"\nassert len(figsize) == 2 and all(x &gt; 0 for x in figsize), \"figsize debe ser (ancho, alto) con valores &gt; 0\"\n</code></pre>"},{"location":"oncoplot/#debugging-paso-a-paso","title":"Debugging Paso a Paso","text":"<pre><code># 1. Verificar estructura de datos\nprint(\"Columnas disponibles:\", data.columns.tolist())\nprint(\"Forma de datos:\", data.shape)\n\n# 2. Verificar detecci\u00f3n de muestras\nfrom pyMut.visualizations.oncoplot import detect_sample_columns\ntry:\n    samples = detect_sample_columns(data)\n    print(f\"Muestras detectadas: {len(samples)}\")\nexcept ValueError as e:\n    print(f\"Error en detecci\u00f3n: {e}\")\n\n# 3. Verificar datos de mutaci\u00f3n\nfrom pyMut.visualizations.oncoplot import process_mutation_matrix\ntry:\n    matrix, counts = process_mutation_matrix(data)\n    print(f\"Matriz generada: {matrix.shape}\")\n    print(f\"Genes con mutaciones: {len([g for g, c in counts.items() if c &gt; 0])}\")\nexcept Exception as e:\n    print(f\"Error en procesamiento: {e}\")\n\n# 4. Generar oncoplot\ntry:\n    py_mut = PyMutation(data)\n    fig = py_mut.oncoplot(top_genes_count=5)\n    print(\"\u2713 Oncoplot generado exitosamente\")\nexcept Exception as e:\n    print(f\"Error en oncoplot: {e}\")\n</code></pre>"},{"location":"oncoplot/#problemas-de-rendimiento","title":"Problemas de Rendimiento","text":""},{"location":"oncoplot/#datasets-grandes","title":"Datasets Grandes","text":"<pre><code># Para datasets con &gt;1000 genes o &gt;500 muestras\nfig = py_mut.oncoplot(\n    top_genes_count=20,     # Limitar genes\n    max_samples=100,        # Limitar muestras  \n    figsize=(16, 8)         # Tama\u00f1o moderado\n)\n</code></pre>"},{"location":"oncoplot/#memoria-insuficiente","title":"Memoria Insuficiente","text":"<pre><code># Procesar en chunks para datasets muy grandes\nchunk_size = 50\nfor i in range(0, len(data), chunk_size):\n    chunk = data.iloc[i:i+chunk_size]\n    py_mut_chunk = PyMutation(chunk)\n    fig = py_mut_chunk.oncoplot(\n        title=f\"Chunk {i//chunk_size + 1}\",\n        max_samples=chunk_size\n    )\n    fig.savefig(f'oncoplot_chunk_{i//chunk_size + 1}.png')\n</code></pre>"},{"location":"oncoplot/#optimizacion-de-rendimiento","title":"Optimizaci\u00f3n de Rendimiento","text":""},{"location":"oncoplot/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":"<ol> <li>Filtrar datos antes: Remover genes/muestras irrelevantes</li> <li>Usar par\u00e1metros apropiados: Limitar <code>top_genes_count</code> y <code>max_samples</code></li> <li>Configurar calidad una vez: Llamar <code>configure_high_quality_plots()</code> al inicio</li> <li>Cerrar figuras: Usar <code>plt.close(fig)</code> para liberar memoria</li> </ol>"},{"location":"oncoplot/#parametros-de-rendimiento","title":"Par\u00e1metros de Rendimiento","text":"<pre><code># Para an\u00e1lisis exploratorio r\u00e1pido\nfig = py_mut.oncoplot(\n    top_genes_count=10,\n    max_samples=50,\n    figsize=(12, 6)\n)\n\n# Para an\u00e1lisis final de alta calidad\nfig = py_mut.oncoplot(\n    top_genes_count=30,\n    max_samples=200,\n    figsize=(20, 12)\n)\n</code></pre>"},{"location":"oncoplot/#monitoreo-de-recursos","title":"Monitoreo de Recursos","text":"<pre><code>import time\nimport psutil\n\n# Monitorear tiempo y memoria\nstart_time = time.time()\nmemory_before = psutil.Process().memory_info().rss / 1024 / 1024  # MB\n\nfig = py_mut.oncoplot()\n\nend_time = time.time()\nmemory_after = psutil.Process().memory_info().rss / 1024 / 1024  # MB\n\nprint(f\"Tiempo: {end_time - start_time:.2f} segundos\")\nprint(f\"Memoria usada: {memory_after - memory_before:.1f} MB\")\n</code></pre>"},{"location":"oncoplot/#mas-recursos","title":"M\u00e1s Recursos","text":"<ul> <li>Gu\u00eda de Instalaci\u00f3n: docs/index.md</li> <li>C\u00f3digo Fuente: src/pyMut/visualizations/oncoplot.py</li> <li>Ejemplos Completos: examples/example_oncoplot.py</li> <li>Tests: tests/test_oncoplot.py</li> </ul> <p>Para preguntas espec\u00edficas o reportar problemas, consulta la documentaci\u00f3n del proyecto o contacta al equipo de desarrollo. </p>"},{"location":"summary-plot-guia-completa/","title":"Summary Plot - Gu\u00eda Completa y T\u00e9cnica","text":"<p>Esta gu\u00eda cubre en detalle todos los aspectos del Summary Plot de pyMut, desde la implementaci\u00f3n t\u00e9cnica hasta casos de uso avanzados.</p>"},{"location":"summary-plot-guia-completa/#arquitectura-del-summary-plot","title":"Arquitectura del Summary Plot","text":""},{"location":"summary-plot-guia-completa/#estructura-interna","title":"Estructura Interna","text":"<p>El Summary Plot de pyMut est\u00e1 construido como una composici\u00f3n de 6 visualizaciones independientes organizadas en una grilla 2x3:</p> <pre><code># Estructura de la grilla (2 filas x 3 columnas)\n[Variant Classification] [Variant Type]       [SNV Class]\n[Variants per Sample]    [Classification Box] [Top Genes]\n</code></pre>"},{"location":"summary-plot-guia-completa/#implementacion-tecnica","title":"Implementaci\u00f3n T\u00e9cnica","text":""},{"location":"summary-plot-guia-completa/#clase-principal-pymutationsummary_plot","title":"Clase Principal: PyMutation.summary_plot()","text":"<pre><code>def summary_plot(self, \n               figsize: Tuple[int, int] = (16, 12),\n               title: str = \"Mutation Summary\",\n               max_samples: Optional[int] = 200,\n               top_genes_count: int = 10\n               ) -&gt; plt.Figure\n</code></pre> <p>Par\u00e1metros detallados:</p> <ul> <li><code>figsize</code>: Control preciso del tama\u00f1o de figura</li> <li>Default: (16, 12) - Balanceado para pantalla y papel</li> <li>Recomendado para publicaciones: (20, 16) o (18, 14)</li> <li> <p>M\u00ednimo recomendado: (12, 8)</p> </li> <li> <p><code>title</code>: T\u00edtulo principal de la figura completa</p> </li> <li>Se aplica como <code>fig.suptitle()</code> con fontsize=16</li> <li> <p>Posicionamiento autom\u00e1tico en la parte superior</p> </li> <li> <p><code>max_samples</code>: Control de rendimiento para TMB plot</p> </li> <li>None: Muestra todas las muestras (puede ser lento)</li> <li>Valor recomendado: 100-200 para datasets grandes</li> <li> <p>Toma las primeras N muestras seg\u00fan orden original</p> </li> <li> <p><code>top_genes_count</code>: N\u00famero de genes en el plot inferior derecho</p> </li> <li>Default: 10 genes</li> <li>Rango recomendado: 5-25 genes</li> <li>Si hay menos genes que el especificado, muestra todos</li> </ul>"},{"location":"summary-plot-guia-completa/#subvisualizaciones-detalladas","title":"Subvisualizaciones Detalladas","text":""},{"location":"summary-plot-guia-completa/#1-variant-classification-plot-superior-izquierda","title":"1. Variant Classification Plot (Superior Izquierda)","text":"<p>Funci\u00f3n: <code>create_variant_classification_plot()</code></p> <p>Prop\u00f3sito: Muestra la distribuci\u00f3n de tipos de mutaciones en el dataset completo.</p> <p>Implementaci\u00f3n: - Gr\u00e1fico de barras horizontales - Ordenamiento por frecuencia (m\u00e1s frecuente arriba) - Colores consistentes con el resto del summary plot</p> <p>Interpretaci\u00f3n biol\u00f3gica: - <code>Missense_Mutation</code>: Mutaciones que cambian amino\u00e1cidos (m\u00e1s comunes) - <code>Silent</code>: Mutaciones sin\u00f3nimas (no cambian prote\u00edna) - <code>Nonsense_Mutation</code>: Mutaciones que crean codones stop prematuros - <code>Frame_Shift_Del/Ins</code>: Mutaciones que alteran el marco de lectura</p>"},{"location":"summary-plot-guia-completa/#2-variant-type-plot-superior-centro","title":"2. Variant Type Plot (Superior Centro)","text":"<p>Funci\u00f3n: <code>create_variant_type_plot()</code></p> <p>Prop\u00f3sito: Clasifica las mutaciones por mecanismo molecular.</p> <p>Categor\u00edas t\u00edpicas: - <code>SNP</code>: Single Nucleotide Polymorphisms (m\u00e1s comunes) - <code>DEL</code>: Deleciones (p\u00e9rdida de nucle\u00f3tidos) - <code>INS</code>: Inserciones (ganancia de nucle\u00f3tidos) - <code>DNP</code>: Dinucleotide Polymorphisms - <code>TNP</code>: Trinucleotide Polymorphisms</p>"},{"location":"summary-plot-guia-completa/#3-snv-class-plot-superior-derecha","title":"3. SNV Class Plot (Superior Derecha)","text":"<p>Funci\u00f3n: <code>create_snv_class_plot()</code></p> <p>Prop\u00f3sito: Analiza los patrones de cambios nucleot\u00eddicos espec\u00edficos.</p> <p>Par\u00e1metros t\u00e9cnicos: <pre><code>ref_column=\"REF\"    # Columna con alelo de referencia\nalt_column=\"ALT\"    # Columna con alelo alternativo\n</code></pre></p> <p>Categor\u00edas generadas: - Transiciones: A&gt;G, G&gt;A, C&gt;T, T&gt;C (m\u00e1s comunes, ~66%) - Transversiones: A&gt;C, A&gt;T, G&gt;C, G&gt;T, C&gt;A, C&gt;G, T&gt;A, T&gt;G</p> <p>An\u00e1lisis de signatures mutacionales: Patrones pueden indicar: - C&gt;T: Deaminaci\u00f3n espont\u00e1nea de citosina - G&gt;A: Replicaci\u00f3n err\u00f3nea - A&gt;T: Da\u00f1o oxidativo</p>"},{"location":"summary-plot-guia-completa/#4-variants-per-sample-plot-tmb-inferior-izquierda","title":"4. Variants per Sample Plot / TMB (Inferior Izquierda)","text":"<p>Funci\u00f3n: <code>create_variants_per_sample_plot()</code></p> <p>Prop\u00f3sito: Tumor Mutation Burden - distribuci\u00f3n de carga mutacional por muestra.</p> <p>Caracter\u00edsticas t\u00e9cnicas: - Barras apiladas mostrando composici\u00f3n de mutaciones - L\u00ednea roja horizontal: mediana del TMB - Ordenamiento por TMB total (mayor a menor) - Limitaci\u00f3n configurable con <code>max_samples</code></p> <p>Interpretaci\u00f3n cl\u00ednica: - TMB alto: Posible beneficio de inmunoterapia - TMB bajo: Tumor con pocas mutaciones - Patrones de TMB: Identificaci\u00f3n de subgrupos moleculares</p>"},{"location":"summary-plot-guia-completa/#5-variant-classification-summary-boxplot-inferior-centro","title":"5. Variant Classification Summary / Boxplot (Inferior Centro)","text":"<p>Funci\u00f3n: <code>create_variant_classification_summary_plot()</code></p> <p>Prop\u00f3sito: Distribuci\u00f3n estad\u00edstica de cada tipo de mutaci\u00f3n entre muestras.</p> <p>Elementos del boxplot: - Caja: Rango intercuart\u00edlico (IQR) - L\u00ednea central: Mediana - Whiskers: 1.5 \u00d7 IQR desde Q1 y Q3 - Puntos: Outliers (muestras at\u00edpicas)</p> <p>Aplicaciones: - Identificar tipos de mutaci\u00f3n con alta variabilidad - Detectar muestras con patrones mutacionales at\u00edpicos - Comparar consistencia entre tipos de mutaci\u00f3n</p>"},{"location":"summary-plot-guia-completa/#6-top-mutated-genes-plot-inferior-derecha","title":"6. Top Mutated Genes Plot (Inferior Derecha)","text":"<p>Funci\u00f3n: <code>create_top_mutated_genes_plot()</code></p> <p>Prop\u00f3sito: Identificar genes m\u00e1s frecuentemente alterados.</p> <p>Modos de conteo: <pre><code>mode=\"variants\"  # Cuenta total de mutaciones por gen\nmode=\"samples\"   # Cuenta muestras afectadas por gen (prevalencia)\n</code></pre></p> <p>En Summary Plot: Siempre usa <code>mode=\"variants\"</code></p> <p>Interpretaci\u00f3n: - Genes con muchas mutaciones: Posibles hotspots - Genes driver: Frecuentemente mutados en c\u00e1ncer - Genes passenger: Mutaciones no funcionales</p>"},{"location":"summary-plot-guia-completa/#sistema-de-colores-y-leyenda","title":"Sistema de Colores y Leyenda","text":""},{"location":"summary-plot-guia-completa/#mapeo-de-colores-consistente","title":"Mapeo de Colores Consistente","text":"<p>El Summary Plot genera un mapa de colores \u00fanico que se aplica a todas las subvisualizaciones:</p> <pre><code># Generaci\u00f3n autom\u00e1tica de colores\nunique_variants = data['Variant_Classification'].unique()\ncmap = plt.colormaps['tab20']\nvariant_color_map = {variant: cmap(i % 20) for i, variant in enumerate(unique_variants)}\n</code></pre>"},{"location":"summary-plot-guia-completa/#leyenda-unificada","title":"Leyenda Unificada","text":"<ul> <li>Posici\u00f3n: Parte inferior de la figura</li> <li>Ordenamiento: Por frecuencia de mutaciones (descendente)</li> <li>Elementos: Solo variantes presentes en los datos</li> <li>Formato: M\u00e1ximo 5 columnas para legibilidad</li> </ul>"},{"location":"summary-plot-guia-completa/#manejo-de-datos-y-preprocesamiento","title":"Manejo de Datos y Preprocesamiento","text":""},{"location":"summary-plot-guia-completa/#deteccion-automatica-de-formato","title":"Detecci\u00f3n Autom\u00e1tica de Formato","text":"<p>pyMut detecta autom\u00e1ticamente el formato de los datos:</p> <p>Formato Largo (Long Format): <pre><code>Hugo_Symbol | Variant_Classification | Tumor_Sample_Barcode | REF | ALT\nGENE1      | Missense_Mutation      | SAMPLE_001          | A   | G\n</code></pre></p> <p>Formato Ancho (Wide Format - TCGA): <pre><code>Hugo_Symbol | Variant_Classification | TCGA-AB-2001 | TCGA-AB-2002\nGENE1      | Missense_Mutation      | A|G          | C|T\n</code></pre></p>"},{"location":"summary-plot-guia-completa/#procesamiento-de-datos","title":"Procesamiento de Datos","text":""},{"location":"summary-plot-guia-completa/#1-extraccion-de-variant-classification","title":"1. Extracci\u00f3n de Variant Classification","text":"<pre><code># Si no existe la columna, extrae de FUNCOTATION\nprocessed_data = extract_variant_classifications(\n    self.data, \n    variant_column=\"Variant_Classification\",\n    funcotation_column=\"FUNCOTATION\"\n)\n</code></pre>"},{"location":"summary-plot-guia-completa/#2-extraccion-de-variant-types","title":"2. Extracci\u00f3n de Variant Types","text":"<pre><code>processed_data = extract_variant_types(\n    processed_data,\n    variant_column=\"Variant_Type\",\n    funcotation_column=\"FUNCOTATION\"\n)\n</code></pre>"},{"location":"summary-plot-guia-completa/#3-normalizacion-de-columnas","title":"3. Normalizaci\u00f3n de Columnas","text":"<ul> <li>B\u00fasqueda case-insensitive de nombres de columna</li> <li>Mapeo autom\u00e1tico de variantes de nombres comunes</li> <li>Validaci\u00f3n de existencia de datos requeridos</li> </ul>"},{"location":"summary-plot-guia-completa/#optimizacion-de-rendimiento","title":"Optimizaci\u00f3n de Rendimiento","text":""},{"location":"summary-plot-guia-completa/#estrategias-para-datasets-grandes","title":"Estrategias para Datasets Grandes","text":""},{"location":"summary-plot-guia-completa/#1-limitacion-de-muestras","title":"1. Limitaci\u00f3n de Muestras","text":"<pre><code># Limita el TMB plot para mejorar rendimiento\nfig = py_mut.summary_plot(max_samples=100)\n</code></pre>"},{"location":"summary-plot-guia-completa/#2-filtrado-previo-de-datos","title":"2. Filtrado Previo de Datos","text":"<pre><code># Filtrar antes de crear el objeto PyMutation\nrelevant_variants = ['Missense_Mutation', 'Nonsense_Mutation', 'Frame_Shift_Del']\nfiltered_data = data[data['Variant_Classification'].isin(relevant_variants)]\npy_mut = PyMutation(filtered_data)\n</code></pre>"},{"location":"summary-plot-guia-completa/#3-reduccion-de-genes-mostrados","title":"3. Reducci\u00f3n de Genes Mostrados","text":"<pre><code># Menos genes = procesamiento m\u00e1s r\u00e1pido\nfig = py_mut.summary_plot(top_genes_count=10)\n</code></pre>"},{"location":"summary-plot-guia-completa/#benchmarks-de-rendimiento","title":"Benchmarks de Rendimiento","text":"Tama\u00f1o Dataset Muestras Tiempo (seg) Memoria (MB) Peque\u00f1o &lt; 100 &lt; 5 &lt; 100 Mediano 100-500 5-15 100-300 Grande 500+ 15-60 300-800"},{"location":"summary-plot-guia-completa/#gestion-de-calidad-de-imagen","title":"Gesti\u00f3n de Calidad de Imagen","text":""},{"location":"summary-plot-guia-completa/#configuracion-automatica-de-alta-calidad","title":"Configuraci\u00f3n Autom\u00e1tica de Alta Calidad","text":"<pre><code># Configurar una vez al inicio del script\nPyMutation.configure_high_quality_plots()\n\n# Configura autom\u00e1ticamente:\n# - DPI = 300\n# - bbox_inches = 'tight'\n# - facecolor = 'white'\n# - edgecolor = 'none'\n</code></pre>"},{"location":"summary-plot-guia-completa/#metodos-de-guardado","title":"M\u00e9todos de Guardado","text":""},{"location":"summary-plot-guia-completa/#1-automatico-recomendado","title":"1. Autom\u00e1tico (Recomendado)","text":"<pre><code>PyMutation.configure_high_quality_plots()\nfig = py_mut.summary_plot()\nfig.savefig(\"summary.png\")  # Autom\u00e1ticamente alta calidad\n</code></pre>"},{"location":"summary-plot-guia-completa/#2-manual","title":"2. Manual","text":"<pre><code>fig.savefig(\"summary.png\", dpi=300, bbox_inches='tight')\n</code></pre>"},{"location":"summary-plot-guia-completa/#3-metodo-centralizado-de-pymut","title":"3. M\u00e9todo Centralizado de pyMut","text":"<pre><code>py_mut.save_figure(fig, \"summary.png\", dpi=600)  # Ultra alta calidad\n</code></pre>"},{"location":"summary-plot-guia-completa/#formatos-recomendados-por-uso","title":"Formatos Recomendados por Uso","text":"Formato Uso Principal DPI Tama\u00f1o PNG Presentaciones, web 300 Medio PDF Publicaciones cient\u00edficas 300 Grande SVG Edici\u00f3n, vectorial N/A Peque\u00f1o TIFF Impresi\u00f3n profesional 600 Muy grande"},{"location":"summary-plot-guia-completa/#casos-de-uso-avanzados","title":"Casos de Uso Avanzados","text":""},{"location":"summary-plot-guia-completa/#1-analisis-comparativo-de-cohorts","title":"1. An\u00e1lisis Comparativo de Cohorts","text":"<pre><code># Generar summary plots para m\u00faltiples cohorts\ncohorts = ['TCGA-LAML', 'TCGA-GBM', 'TCGA-BRCA']\n\nfor cohort in cohorts:\n    data = load_cohort_data(cohort)\n    py_mut = PyMutation(data)\n\n    fig = py_mut.summary_plot(\n        title=f\"{cohort} Mutation Landscape\",\n        figsize=(18, 14),\n        max_samples=200,\n        top_genes_count=20\n    )\n\n    fig.savefig(f\"{cohort}_summary.png\")\n</code></pre>"},{"location":"summary-plot-guia-completa/#2-analisis-de-subgrupos-moleculares","title":"2. An\u00e1lisis de Subgrupos Moleculares","text":"<pre><code># Analizar subgrupos espec\u00edficos\nsubgroups = data.groupby('Molecular_Subtype')\n\nfor subtype, subtype_data in subgroups:\n    py_mut = PyMutation(subtype_data)\n\n    fig = py_mut.summary_plot(\n        title=f\"Mutations in {subtype} Subtype\",\n        top_genes_count=15\n    )\n\n    fig.savefig(f\"subtype_{subtype}_summary.png\")\n</code></pre>"},{"location":"summary-plot-guia-completa/#3-analisis-temporal-o-longitudinal","title":"3. An\u00e1lisis Temporal o Longitudinal","text":"<pre><code># Comparar timepoints o tratamientos\ntimepoints = ['Baseline', 'Post_Treatment']\n\nfor tp in timepoints:\n    tp_data = data[data['Timepoint'] == tp]\n    py_mut = PyMutation(tp_data)\n\n    fig = py_mut.summary_plot(\n        title=f\"Mutations at {tp}\",\n        figsize=(16, 12)\n    )\n\n    fig.savefig(f\"mutations_{tp.lower()}.png\")\n</code></pre>"},{"location":"summary-plot-guia-completa/#solucion-de-problemas-tecnicos","title":"Soluci\u00f3n de Problemas T\u00e9cnicos","text":""},{"location":"summary-plot-guia-completa/#problemas-de-memoria","title":"Problemas de Memoria","text":"<p>S\u00edntoma: Error de memoria con datasets grandes Soluci\u00f3n: <pre><code># Reducir tama\u00f1o de datos procesados\nfig = py_mut.summary_plot(\n    max_samples=50,      # Limitar muestras\n    top_genes_count=10   # Limitar genes\n)\n\n# O filtrar datos previamente\nfiltered_data = data.sample(n=1000)  # Muestra aleatoria\n</code></pre></p>"},{"location":"summary-plot-guia-completa/#problemas-de-visualizacion","title":"Problemas de Visualizaci\u00f3n","text":"<p>S\u00edntoma: Plots vac\u00edos o errores de columnas Diagn\u00f3stico: <pre><code>print(f\"Columnas disponibles: {data.columns.tolist()}\")\nprint(f\"Clasificaciones: {data['Variant_Classification'].value_counts()}\")\nprint(f\"Tipos de variante: {data.get('Variant_Type', 'No disponible')}\")\n</code></pre></p>"},{"location":"summary-plot-guia-completa/#problemas-de-rendimiento","title":"Problemas de Rendimiento","text":"<p>S\u00edntoma: Generaci\u00f3n muy lenta Optimizaciones: <pre><code># 1. Reducir complejidad visual\nfig = py_mut.summary_plot(figsize=(12, 8))  # Figura m\u00e1s peque\u00f1a\n\n# 2. Procesar menos datos\ndata_subset = data.head(5000)  # Primeras 5000 mutaciones\n\n# 3. Usar formato m\u00e1s eficiente\ndata = data.astype({'Hugo_Symbol': 'category'})  # Categor\u00edas para strings\n</code></pre></p>"},{"location":"summary-plot-guia-completa/#integracion-con-pipelines-de-analisis","title":"Integraci\u00f3n con Pipelines de An\u00e1lisis","text":""},{"location":"summary-plot-guia-completa/#script-de-analisis-completo","title":"Script de An\u00e1lisis Completo","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nPipeline completo de an\u00e1lisis mutacional con pyMut\n\"\"\"\nimport pandas as pd\nfrom pyMut import PyMutation\nimport os\n\ndef analyze_mutations(input_file, output_dir):\n    \"\"\"An\u00e1lisis completo de mutaciones\"\"\"\n\n    # Configurar calidad\n    PyMutation.configure_high_quality_plots()\n\n    # Cargar y validar datos\n    print(f\"Cargando datos de {input_file}...\")\n    data = pd.read_csv(input_file, sep='\\t')\n\n    print(f\"Dataset: {data.shape[0]} mutaciones, {data.shape[1]} columnas\")\n    print(f\"Muestras \u00fanicas: {data['Tumor_Sample_Barcode'].nunique()}\")\n    print(f\"Genes \u00fanicos: {data['Hugo_Symbol'].nunique()}\")\n\n    # Crear an\u00e1lisis\n    py_mut = PyMutation(data)\n\n    # Generar summary plot principal\n    summary_fig = py_mut.summary_plot(\n        title=\"Comprehensive Mutation Analysis\",\n        figsize=(20, 16),\n        max_samples=200,\n        top_genes_count=25\n    )\n\n    # Guardar en m\u00faltiples formatos\n    os.makedirs(output_dir, exist_ok=True)\n\n    summary_fig.savefig(f\"{output_dir}/mutation_summary.png\")\n    summary_fig.savefig(f\"{output_dir}/mutation_summary.pdf\")\n    summary_fig.savefig(f\"{output_dir}/mutation_summary.svg\")\n\n    # Generar plots individuales para an\u00e1lisis detallado\n    individual_plots = [\n        ('variant_classification', py_mut.variant_classification_plot),\n        ('tmb', py_mut.variants_per_sample_plot),\n        ('top_genes_variants', lambda: py_mut.top_mutated_genes_plot(mode='variants')),\n        ('top_genes_samples', lambda: py_mut.top_mutated_genes_plot(mode='samples'))\n    ]\n\n    for name, plot_func in individual_plots:\n        fig = plot_func()\n        fig.savefig(f\"{output_dir}/{name}.png\")\n\n    print(f\"\u2705 An\u00e1lisis completado. Resultados en {output_dir}/\")\n\nif __name__ == \"__main__\":\n    analyze_mutations(\"mutations.tsv\", \"analysis_results\")\n</code></pre>"},{"location":"summary-plot-guia-completa/#integracion-con-jupyter-notebooks","title":"Integraci\u00f3n con Jupyter Notebooks","text":"<pre><code># Configuraci\u00f3n para notebooks\n%matplotlib inline\nfrom pyMut import PyMutation\n\n# Configurar una vez por sesi\u00f3n\nPyMutation.configure_high_quality_plots()\n\n# An\u00e1lisis interactivo\npy_mut = PyMutation(data)\n\n# Guardar para reporte\nfig.savefig(\"notebook_summary.png\")\n</code></pre>"},{"location":"summary-plot-guia-completa/#extensiones-y-personalizacion","title":"Extensiones y Personalizaci\u00f3n","text":""},{"location":"summary-plot-guia-completa/#modificacion-de-colores","title":"Modificaci\u00f3n de Colores","text":"<pre><code># Personalizar mapa de colores\ncustom_colors = {\n    'Missense_Mutation': '#FF6B6B',\n    'Silent': '#4ECDC4', \n    'Nonsense_Mutation': '#45B7D1',\n    'Frame_Shift_Del': '#96CEB4'\n}\n\n# Aplicar en plots individuales\nfig, ax = plt.subplots()\ncreate_variant_classification_plot(data, ax=ax, color_map=custom_colors)\n</code></pre>"},{"location":"summary-plot-guia-completa/#metricas-personalizadas","title":"M\u00e9tricas Personalizadas","text":"<pre><code># Calcular m\u00e9tricas adicionales\ndef calculate_mutation_metrics(data):\n    \"\"\"Calcula m\u00e9tricas personalizadas\"\"\"\n    metrics = {\n        'total_mutations': len(data),\n        'unique_genes': data['Hugo_Symbol'].nunique(),\n        'unique_samples': data['Tumor_Sample_Barcode'].nunique(),\n        'avg_mutations_per_sample': len(data) / data['Tumor_Sample_Barcode'].nunique(),\n        'most_mutated_gene': data['Hugo_Symbol'].value_counts().index[0]\n    }\n    return metrics\n\n# Usar con summary plot\nmetrics = calculate_mutation_metrics(data)\nfig = py_mut.summary_plot(\n    title=f\"Mutations Analysis - {metrics['total_mutations']} total mutations\"\n)\n</code></pre> <p>Esta gu\u00eda completa cubre todos los aspectos t\u00e9cnicos y pr\u00e1cticos del Summary Plot, proporcionando una referencia exhaustiva para usuarios desde b\u00e1sicos hasta avanzados. </p>"},{"location":"api/Analysis%20Methods/actionable_mutation_annotation/","title":"Actionable Mutation Annotation","text":""},{"location":"api/Analysis%20Methods/actionable_mutation_annotation/#actionable_mutations_oncokb","title":"actionable_mutations_oncokb","text":""},{"location":"api/Analysis%20Methods/actionable_mutation_annotation/#short-description","title":"Short description","text":"<p>Annotates mutation data using the OncoKB API to add actionable mutation information and therapeutic implications.</p>"},{"location":"api/Analysis%20Methods/actionable_mutation_annotation/#signature","title":"Signature","text":"<pre><code>def actionable_mutations_oncokb(self, token: str, batch_size: int = 5000, timeout: int = 30, max_retries: int = 3, retry_backoff: float = 1.0) -&gt; pd.DataFrame:\n</code></pre>"},{"location":"api/Analysis%20Methods/actionable_mutation_annotation/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>token</code> <code>str</code> Yes OncoKB API authentication token required for accessing the OncoKB service. <code>batch_size</code> <code>int</code> No Maximum number of variants to send in a single API request (default: 5000). <code>timeout</code> <code>int</code> No Timeout for API requests in seconds (default: 30). <code>max_retries</code> <code>int</code> No Maximum number of retries for failed API requests (default: 3). <code>retry_backoff</code> <code>float</code> No Backoff factor for retries, controls delay between retry attempts (default: 1.0)."},{"location":"api/Analysis%20Methods/actionable_mutation_annotation/#return-value","title":"Return value","text":"<p>Returns a <code>pd.DataFrame</code> containing the original self.data DataFrame with OncoKB annotations added as columns. The annotations include therapeutic implications and actionable mutation information.</p>"},{"location":"api/Analysis%20Methods/actionable_mutation_annotation/#exceptions","title":"Exceptions","text":"<p>List only those the user should handle:</p> <ul> <li><code>ValueError</code>: if the DataFrame doesn't contain the necessary data for export (missing required columns like CHROM, POS, REF, ALT) or if the reference genome is invalid.</li> <li><code>requests.exceptions.RequestException</code>: if there's an error with the API request that can't be resolved with retries.</li> </ul>"},{"location":"api/Analysis%20Methods/actionable_mutation_annotation/#minimal-usage-example","title":"Minimal usage example","text":"<pre><code>&gt;&gt;&gt; # Assuming you have a valid OncoKB API token\n&gt;&gt;&gt; token = \"your_oncokb_api_token\"\n&gt;&gt;&gt; annotated_data = pymutation_obj.actionable_mutations_oncokb(token)\n&gt;&gt;&gt; print(annotated_data.columns)\n</code></pre>"},{"location":"api/Analysis%20Methods/known_cancer_annotation/","title":"Known Cancer Gene Annotation","text":""},{"location":"api/Analysis%20Methods/known_cancer_annotation/#knowncancer","title":"knownCancer","text":""},{"location":"api/Analysis%20Methods/known_cancer_annotation/#short-description","title":"Short description","text":"<p>Annotates mutations with COSMIC and OncoKB cancer-related annotations to identify known cancer genes.</p>"},{"location":"api/Analysis%20Methods/known_cancer_annotation/#signature","title":"Signature","text":"<pre><code>def knownCancer(self, annotation_table, output_path=None, compress_output=True, join_column=\"Hugo_Symbol\", oncokb_table=None, in_place=False):\n</code></pre>"},{"location":"api/Analysis%20Methods/known_cancer_annotation/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>annotation_table</code> <code>str | Path</code> Yes Path to the COSMIC annotation table (.tsv or .tsv.gz format). <code>output_path</code> <code>str | Path</code> No Output file path. If not provided, saves with default naming convention. <code>compress_output</code> <code>bool</code> No Whether to compress the output file with gzip (default: True). <code>join_column</code> <code>str</code> No Column name to use for joining (default: \"Hugo_Symbol\"). <code>oncokb_table</code> <code>str | Path</code> No Path to the OncoKB cancer gene list table (.tsv). Adds OncoKB annotations if provided. <code>in_place</code> <code>bool</code> No If True, replaces self.data with annotated data. If False, returns annotated DataFrame (default: False)."},{"location":"api/Analysis%20Methods/known_cancer_annotation/#return-value","title":"Return value","text":"<p>Returns <code>pd.DataFrame</code> if <code>in_place=False</code>, containing the annotated mutation data with cancer gene annotations. Returns <code>None</code> if <code>in_place=True</code> and updates <code>self.data</code> directly.</p>"},{"location":"api/Analysis%20Methods/known_cancer_annotation/#exceptions","title":"Exceptions","text":"<p>List only those the user should handle:</p> <ul> <li><code>FileNotFoundError</code>: if annotation files don't exist.</li> <li><code>ValueError</code>: if join column is not found in DataFrame.</li> </ul>"},{"location":"api/Analysis%20Methods/known_cancer_annotation/#minimal-usage-example","title":"Minimal usage example","text":"<pre><code>&gt;&gt;&gt; annotated_data = py_mut.knownCancer(\"cosmic_cancer_genes.tsv\")\n&gt;&gt;&gt; print(f\"Annotated {len(annotated_data)} mutations\")\n</code></pre>"},{"location":"api/Analysis%20Methods/pfam_annotation/","title":"PFAM Annotation","text":""},{"location":"api/Analysis%20Methods/pfam_annotation/#annotate_pfam","title":"annotate_pfam","text":""},{"location":"api/Analysis%20Methods/pfam_annotation/#short-description","title":"Short description","text":"<p>Annotate PyMutation data with PFAM domains using database annotation or VEP data extraction.</p>"},{"location":"api/Analysis%20Methods/pfam_annotation/#signature","title":"Signature","text":"<pre><code>def annotate_pfam(self, db_conn: Optional[duckdb.DuckDBPyConnection] = None, *, aa_column: str = 'aa_pos', auto_extract: bool = True, prefer_database: bool = True):\n</code></pre>"},{"location":"api/Analysis%20Methods/pfam_annotation/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>db_conn</code> <code>Optional[duckdb.DuckDBPyConnection]</code> No DuckDB connection for PFAM database. If None, will create one automatically. <code>aa_column</code> <code>str</code> No Name of the column containing amino acid positions. Default is 'aa_pos'. <code>auto_extract</code> <code>bool</code> No If True, automatically extract uniprot/aa_pos from VEP data when missing. Default is True. <code>prefer_database</code> <code>bool</code> No If True, prefer database annotation over VEP parsing when both are available. Default is True."},{"location":"api/Analysis%20Methods/pfam_annotation/#return-value","title":"Return value","text":"<p>Returns a new PyMutation object with PFAM domain annotations added as additional columns. Can return <code>None</code> if annotation fails.</p>"},{"location":"api/Analysis%20Methods/pfam_annotation/#exceptions","title":"Exceptions","text":"<ul> <li><code>PfamAnnotationError</code>: if database connection fails or annotation process encounters errors.</li> <li><code>ValueError</code>: if required columns are missing or data format is invalid.</li> </ul>"},{"location":"api/Analysis%20Methods/pfam_annotation/#minimal-usage-example","title":"Minimal usage example","text":"<pre><code>&gt;&gt;&gt; from pyMut.io import read_maf\n&gt;&gt;&gt; py_mut = read_maf(\"mutations_vep_annotated.maf\")\n&gt;&gt;&gt; annotated = py_mut.annotate_pfam()\n&gt;&gt;&gt; print(annotated.data.columns)\n</code></pre>"},{"location":"api/Analysis%20Methods/pfam_domains/","title":"Pfam Domains Annotation","text":""},{"location":"api/Analysis%20Methods/pfam_domains/#pfam_domains","title":"pfam_domains","text":""},{"location":"api/Analysis%20Methods/pfam_domains/#short-description","title":"Short description","text":"<p>Summarise already-annotated Pfam protein-domain information in a <code>PyMutation</code> object, returning the most frequent domains or hotspots. </p>"},{"location":"api/Analysis%20Methods/pfam_domains/#signature","title":"Signature","text":"<pre><code>def pfam_domains(\n    *,\n    aa_column: str = \"aa_pos\",\n    summarize_by: str = \"PfamDomain\",\n    top_n: int = 10,\n    include_synonymous: bool = False\n) -&gt; pandas.DataFrame:\n</code></pre>"},{"location":"api/Analysis%20Methods/pfam_domains/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>aa_column</code> <code>str</code> No Column with amino-acid positions. Default <code>\"aa_pos\"</code>. <code>summarize_by</code> <code>str</code> No Either <code>\"PfamDomain\"</code> (aggregate by domain) or <code>\"AAPos\"</code> (per-residue hotspots). <code>top_n</code> <code>int</code> No Number of rows to keep in the output (sorted by variant count). Default <code>10</code>. <code>include_synonymous</code> <code>bool</code> No If <code>False</code> (default) silent variants are excluded from the summary."},{"location":"api/Analysis%20Methods/pfam_domains/#return-value","title":"Return value","text":"<p><code>pandas.DataFrame</code> containing, for each reported line, counts of variants and unique genes:</p> <ul> <li>When <code>summarize_by=\"PfamDomain\"</code> \u2192 columns <code>pfam_id</code>, <code>pfam_name</code>, <code>n_genes</code>, <code>n_variants</code>.</li> <li>When <code>summarize_by=\"AAPos\"</code> \u2192 columns depend on grouping (<code>uniprot</code>, <code>aa_pos</code>, Pfam columns) plus <code>n_variants</code>, <code>n_genes</code>.</li> </ul>"},{"location":"api/Analysis%20Methods/pfam_domains/#exceptions","title":"Exceptions","text":"<ul> <li><code>PfamAnnotationError</code> \u2013 Pfam columns (<code>pfam_id</code>, <code>pfam_name</code>) missing, or <code>Hugo_Symbol</code> absent when required.</li> <li><code>ValueError</code> \u2013 <code>summarize_by</code> is not <code>\"PfamDomain\"</code> nor <code>\"AAPos\"</code>.</li> </ul>"},{"location":"api/Analysis%20Methods/pfam_domains/#minimal-usage-example","title":"Minimal usage example","text":"<pre><code># Assuming you have already run annotate_pfam()\nsummary = pymut.pfam_domains(\n    summarize_by=\"PfamDomain\",\n    top_n=20\n)\n\nprint(summary.head())\n</code></pre>"},{"location":"api/Analysis%20Methods/tmb_analysis/","title":"TMB Analysis","text":""},{"location":"api/Analysis%20Methods/tmb_analysis/#calculate_tmb_analysis","title":"calculate_tmb_analysis","text":""},{"location":"api/Analysis%20Methods/tmb_analysis/#short-description","title":"Short description","text":"<p>Calculate Tumor Mutation Burden (TMB) analysis for each sample in a PyMutation object.</p>"},{"location":"api/Analysis%20Methods/tmb_analysis/#signature","title":"Signature","text":"<pre><code>def calculate_tmb_analysis(self, variant_classification_column: Optional[str] = None, genome_size_bp: int = 60456963, output_dir: str = \".\", save_files: bool = True) -&gt; Dict[str, pd.DataFrame]:\n</code></pre>"},{"location":"api/Analysis%20Methods/tmb_analysis/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>variant_classification_column</code> <code>Optional[str]</code> No Name of the column containing variant classification information. If None, will automatically detect variant classification columns. <code>genome_size_bp</code> <code>int</code> No Size of the interrogated region in base pairs for TMB normalization. Default 60,456,963 bp (WES standard). Use ~3,000,000,000 bp for WGS. <code>output_dir</code> <code>str</code> No Directory where output files will be saved. Default is current directory. <code>save_files</code> <code>bool</code> No Whether to save the results to TSV files. Default is True."},{"location":"api/Analysis%20Methods/tmb_analysis/#return-value","title":"Return value","text":"<p>Returns a dictionary with two DataFrames: <code>{'analysis': pd.DataFrame, 'statistics': pd.DataFrame}</code>. The 'analysis' DataFrame contains per-sample TMB metrics, and the 'statistics' DataFrame contains global TMB statistics (mean, median, quartiles, etc.).</p>"},{"location":"api/Analysis%20Methods/tmb_analysis/#exceptions","title":"Exceptions","text":"<ul> <li><code>ValueError</code>: if PyMutation object is invalid (missing 'data' or 'samples' attributes).</li> <li><code>ValueError</code>: if PyMutation data is empty.</li> <li><code>ValueError</code>: if no samples found in PyMutation object.</li> <li><code>ValueError</code>: if missing required columns (REF, ALT) in PyMutation data.</li> <li><code>ValueError</code>: if provided variant classification column is not found in data.</li> </ul>"},{"location":"api/Analysis%20Methods/tmb_analysis/#minimal-usage-example","title":"Minimal usage example","text":"<pre><code>&gt;&gt;&gt; from pyMut.io import read_maf\n&gt;&gt;&gt; py_mut = read_maf(\"mutations.maf\")\n&gt;&gt;&gt; tmb_results = py_mut.calculate_tmb_analysis()\n&gt;&gt;&gt; print(tmb_results['analysis'].head())\n</code></pre>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/compare_signatures/","title":"Compare Signatures","text":""},{"location":"api/Analysis%20Methods/Mutational%20Signatures/compare_signatures/#compare_signatures","title":"compare_signatures","text":""},{"location":"api/Analysis%20Methods/Mutational%20Signatures/compare_signatures/#short-description","title":"Short description","text":"<p>Matches extracted signatures against the COSMIC catalogue via cosine similarity, reporting the best COSMIC hit for each and optionally the full similarity matrix.</p>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/compare_signatures/#signature","title":"Signature","text":"<pre><code>def compare_signatures(\n    W: np.ndarray,\n    cosmic_path: str,\n    min_cosine: float = 0.6,\n    return_matrix: bool = False\n) -&gt; Dict:\n</code></pre>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/compare_signatures/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>W</code> <code>np.ndarray</code> Yes 96 \u00d7 k matrix of normalised signatures (columns sum to 1) from <code>extract_signatures</code>. <code>cosmic_path</code> <code>str</code> Yes File path to COSMIC SBS catalogue (tab-separated, first column = context labels). <code>min_cosine</code> <code>float</code> No Threshold below which a COSMIC match is reported as \u201cNo match\u201d. Default = 0.6. <code>return_matrix</code> <code>bool</code> No If <code>True</code>, include the complete k \u00d7 N cosine-similarity matrix in the output."},{"location":"api/Analysis%20Methods/Mutational%20Signatures/compare_signatures/#return-value","title":"Return value","text":"<p><code>dict</code> with keys:</p> Key Type Meaning <code>summary_df</code> <code>pd.DataFrame</code> One row per column in <code>W</code> with <code>Signature_W</code>, <code>Best_COSMIC</code>, <code>Cosine</code>, <code>Aetiology</code>. <code>cosine_matrix</code> <code>np.ndarray</code> opt. k \u00d7 N matrix of pairwise cosine similarities (only present if <code>return_matrix=True</code>). <p><code>summary_df</code> is never empty; if no COSMIC signature reaches <code>min_cosine</code>, <code>Best_COSMIC</code> is set to \u201cNo match\u201d.</p>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/compare_signatures/#exceptions","title":"Exceptions","text":"<ul> <li><code>FileNotFoundError</code> \u2013 the COSMIC file cannot be located.</li> <li><code>ValueError</code> \u2013 mismatched shapes/contexts, empty catalog, or malformed data.</li> <li><code>ImportError</code> \u2013 scikit-learn missing.</li> </ul>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/compare_signatures/#minimal-usage-example","title":"Minimal usage example","text":"<pre><code># W is the signature matrix from extract_signatures\ncmp = compare_signatures(W, \"data/COSMIC_v3.4_SBS_GRCh38.txt\", min_cosine=0.7)\n\nprint(cmp[\"summary_df\"].head())\n</code></pre>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/estimateSignatures/","title":"Estimated Signatures","text":""},{"location":"api/Analysis%20Methods/Mutational%20Signatures/estimateSignatures/#estimatesignatures","title":"estimateSignatures","text":""},{"location":"api/Analysis%20Methods/Mutational%20Signatures/estimateSignatures/#short-description","title":"Short description","text":"<p>Determines the optimal number of mutational signatures in a 96 \u00d7 samples matrix by running multiple non-negative matrix factorization (NMF) decompositions and evaluating stability metrics.</p>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/estimateSignatures/#signature","title":"Signature","text":"<pre><code>def estimateSignatures(\n    contexts_df: pd.DataFrame,\n    nMin: int = 2,\n    nTry: int = 6,\n    nrun: int = 5,\n    parallel: int = 4,\n    pConstant: Optional[float] = None\n) -&gt; Dict:\n</code></pre>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/estimateSignatures/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>contexts_df</code> <code>pd.DataFrame</code> Yes 96 \u00d7 samples count matrix produced by <code>trinucleotideMatrix</code>. <code>nMin</code> <code>int</code> No Smallest number of signatures (<code>k</code>) to test. Default = 2. <code>nTry</code> <code>int</code> No Largest <code>k</code> to test (inclusive). Default = 6. <code>nrun</code> <code>int</code> No Independent NMF runs per <code>k</code> to assess robustness. Default = 5. <code>parallel</code> <code>int</code> No CPU threads used for parallel NMF fits. Default = 4. <code>pConstant</code> `float None` No Small positive value added if the matrix is extremely sparse; leave <code>None</code> to disable."},{"location":"api/Analysis%20Methods/Mutational%20Signatures/estimateSignatures/#return-value","title":"Return value","text":"<p><code>dict</code> with the keys:</p> Key Type Meaning <code>metrics</code> <code>pd.DataFrame</code> Stability statistics for each tested <code>k</code> (mean RSS, dispersion, cophenetic correlation, etc.). <code>models</code> <code>list</code> All successful NMF model results (<code>W</code>, <code>H</code>, RSS, run index\u2026). <code>optimal_k</code> <code>int</code> Suggested best number of signatures based on cophenetic drop-off. <code>normalized_matrix</code> <code>np.ndarray</code> Input matrix after column-wise frequency normalisation (used for NMF). <code>original_matrix</code> <code>np.ndarray</code> Raw count matrix (same values as <code>contexts_df.values</code>). <p>None of these items are ever <code>None</code>; if every NMF fit fails, the function raises instead of returning.</p>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/estimateSignatures/#exceptions","title":"Exceptions","text":"<ul> <li><code>ImportError</code>\u2003\u2013 scikit-learn or scipy not installed.</li> <li><code>ValueError</code>\u2003\u2013 invalid inputs (wrong shape, impossible <code>nMin/nTry</code>, all decompositions fail).</li> </ul>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/estimateSignatures/#minimal-usage-example","title":"Minimal usage example","text":"<pre><code># ctx is the 96 \u00d7 samples matrix from trinucleotideMatrix\nresults = estimateSignatures(ctx, nMin=2, nTry=8, nrun=10, parallel=6)\n\nprint(\"Optimal k =\", results[\"optimal_k\"])\nprint(results[\"metrics\"][[\"k\", \"mean_rss\", \"cophenetic_corr\"]])\n</code></pre>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/extract_signatures/","title":"Extract Signatures","text":""},{"location":"api/Analysis%20Methods/Mutational%20Signatures/extract_signatures/#extract_signatures","title":"extract_signatures","text":""},{"location":"api/Analysis%20Methods/Mutational%20Signatures/extract_signatures/#short-description","title":"Short description","text":"<p>Decomposes a 96 \u00d7 samples mutation-context matrix into mutational signature profiles (W) and their contributions per sample (H) using repeated non-negative matrix factorisation (NMF) for stability.</p>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/extract_signatures/#signature","title":"Signature","text":"<pre><code>def extract_signatures(\n    contexts_df: pd.DataFrame,\n    k: int,\n    nrun: int = 30,\n    pseudocount: float = 1e-4,\n    random_seed: Optional[int] = None\n) -&gt; Dict:\n</code></pre>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/extract_signatures/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>contexts_df</code> <code>pd.DataFrame</code> Yes 96 \u00d7 N matrix of raw counts produced by <code>trinucleotideMatrix</code>. <code>k</code> <code>int</code> Yes Number of signatures to extract (usually the <code>optimal_k</code> from <code>estimateSignatures</code>). <code>nrun</code> <code>int</code> No Independent NMF runs to perform; the best run (lowest KL divergence) is returned. Default = 30. <code>pseudocount</code> <code>float</code> No Small value added to avoid zeros before normalising to frequencies. Default = 1e-4. <code>random_seed</code> `int None` Base seed for reproducibility; if <code>None</code>, each run uses a fresh random seed."},{"location":"api/Analysis%20Methods/Mutational%20Signatures/extract_signatures/#return-value","title":"Return value","text":"<p><code>dict</code> with keys:</p> Key Type Meaning <code>W</code> <code>np.ndarray</code> 96 \u00d7 k signature matrix; each column sums to 1. <code>H</code> <code>np.ndarray</code> k \u00d7 samples exposure matrix scaled back to raw counts. <code>reconstruction_error</code> <code>float</code> KL-divergence between input and reconstruction for the best run. <code>best_run</code> <code>int</code> Index of the run that achieved the lowest error. <code>all_errors</code> <code>list[float]</code> Error from every run (length = <code>nrun</code>). <p>None of these entries is ever <code>None</code>; the function raises if every run fails.</p>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/extract_signatures/#exceptions","title":"Exceptions","text":"<ul> <li><code>ImportError</code> \u2013 scikit-learn missing.</li> <li><code>ValueError</code> \u2013 invalid arguments (e.g. <code>k</code> &gt; samples), wrong input shape, or all NMF runs fail.</li> </ul>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/extract_signatures/#minimal-usage-example","title":"Minimal usage example","text":"<pre><code># ctx is the matrix from trinucleotideMatrix\nsig = extract_signatures(ctx, k=4, nrun=50, random_seed=123)\n\nprint(\"Chosen run:\", sig[\"best_run\"])\nprint(\"W shape:\", sig[\"W\"].shape)\n</code></pre>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/trinucleotideMatrix/","title":"Matriz Trinucleotide","text":""},{"location":"api/Analysis%20Methods/Mutational%20Signatures/trinucleotideMatrix/#trinucleotidematrix","title":"trinucleotideMatrix","text":""},{"location":"api/Analysis%20Methods/Mutational%20Signatures/trinucleotideMatrix/#short-description","title":"Short description","text":"<p>Builds the 96-trinucleotide context matrix for all single-nucleotide variants (SNVs) in a <code>PyMutation</code> object, enriching the original data with context annotations to enable downstream signature analysis.</p>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/trinucleotideMatrix/#signature","title":"Signature","text":"<pre><code>def trinucleotideMatrix(\n    self,\n    fasta_file: str\n) -&gt; Tuple[pd.DataFrame, pd.DataFrame]:\n</code></pre>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/trinucleotideMatrix/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>fasta_file</code> <code>str</code> (path) Yes Path to the reference-genome FASTA file used to look up trinucleotide contexts (must be indexed)."},{"location":"api/Analysis%20Methods/Mutational%20Signatures/trinucleotideMatrix/#return-value","title":"Return value","text":"<p>A tuple <code>(contexts_df, enriched_data)</code>:</p> <ul> <li><code>contexts_df</code> \u2013 <code>pd.DataFrame</code> of shape 96 \u00d7 N-samples. Each row corresponds to one of the 96 canonical trinucleotide mutation classes; each column contains the raw counts for a sample.</li> <li> <p><code>enriched_data</code> \u2013 original mutation table with three extra columns:</p> </li> <li> <p><code>trinuc</code> \u2013 the reference trinucleotide (e.g. <code>\"ACA\"</code>).</p> </li> <li><code>class96</code> \u2013 class label in the form <code>\"A[C&gt;T]A\"</code>.</li> <li><code>idx96</code> \u2013 integer index (0\u201395) into the standard context order.</li> </ul> <p>Both DataFrames are never <code>None</code>.</p>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/trinucleotideMatrix/#exceptions","title":"Exceptions","text":"<ul> <li><code>ImportError</code>\u2003\u2013 pyfaidx is missing.</li> <li><code>ValueError</code>\u2003\u2013 required columns are absent, no valid SNVs are found, or the FASTA cannot be read.</li> </ul>"},{"location":"api/Analysis%20Methods/Mutational%20Signatures/trinucleotideMatrix/#minimal-usage-example","title":"Minimal usage example","text":"<pre><code>from pymutation import PyMutation           # hypothetical package\nmut = PyMutation.from_maf(\"my_cohort.maf\")  # load variants\nctx, enriched = mut.trinucleotideMatrix(\"GRCh38.fa\")\nprint(ctx.head())\n</code></pre>"},{"location":"api/Analysis%20Methods/VEP%20annotate/vep_annotation_maf/","title":"MAF annotation","text":""},{"location":"api/Analysis%20Methods/VEP%20annotate/vep_annotation_maf/#wrap_maf_vep_annotate_protein","title":"wrap_maf_vep_annotate_protein","text":""},{"location":"api/Analysis%20Methods/VEP%20annotate/vep_annotation_maf/#short-description","title":"Short description","text":"<p>Annotates a MAF file with protein-level VEP information and automatically merges the VEP output back into the original MAF, producing an annotated file ready for downstream analysis. </p>"},{"location":"api/Analysis%20Methods/VEP%20annotate/vep_annotation_maf/#signature","title":"Signature","text":"<pre><code>def wrap_maf_vep_annotate_protein(\n    maf_file: Union[str, Path],\n    cache_dir: Union[str, Path],\n    fasta: Union[str, Path],\n    output_file: Optional[Union[str, Path]] = None,\n    synonyms_file: Optional[Union[str, Path]] = None,\n    assembly: Optional[str] = None,\n    version: Optional[str] = None,\n    compress: bool = True,\n    no_stats: bool = True\n) -&gt; Tuple[bool, str]:\n</code></pre>"},{"location":"api/Analysis%20Methods/VEP%20annotate/vep_annotation_maf/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>maf_file</code> <code>str</code> | <code>Path</code> Yes Path to the input MAF file (<code>.maf</code> or <code>.maf.gz</code>). <code>cache_dir</code> <code>str</code> | <code>Path</code> Yes Directory containing the local VEP cache. <code>fasta</code> <code>str</code> | <code>Path</code> Yes Reference FASTA used by VEP. <code>output_file</code> <code>str</code> | <code>Path</code> No Destination for the raw VEP output. If omitted, a directory named <code>vep_annotation_&lt;timestamp&gt;</code> is created beside the MAF. <code>synonyms_file</code> <code>str</code> | <code>Path</code> No Chromosome\u2013synonyms file. When <code>None</code>, it is inferred from the cache directory. <code>assembly</code> <code>str</code> No Genome assembly (e.g. <code>\"GRCh38\"</code>). If omitted, parsed from <code>cache_dir</code>. <code>version</code> <code>str</code> No VEP cache version (e.g. <code>\"113\"</code>). If omitted, parsed from <code>cache_dir</code>. <code>compress</code> <code>bool</code> No Gzip-compress the merged MAF (<code>True</code>, default). <code>no_stats</code> <code>bool</code> No Run VEP with <code>--no_stats</code> to skip statistics (<code>True</code>, default)."},{"location":"api/Analysis%20Methods/VEP%20annotate/vep_annotation_maf/#return-value","title":"Return value","text":"<p><code>Tuple[bool, str]</code> where  </p> <ul> <li><code>bool</code> \u2013 <code>True</code> on successful VEP run (merge may still fail) and <code>False</code> on fatal error.  </li> <li><code>str</code> \u2013 Path(s) to the VEP output and (when merge succeeds) the final annotated MAF. Never <code>None</code>.  </li> </ul>"},{"location":"api/Analysis%20Methods/VEP%20annotate/vep_annotation_maf/#exceptions","title":"Exceptions","text":"<ul> <li><code>ValueError</code> \u2013 if <code>cache_dir</code> name does not encode <code>assembly</code>/<code>version</code> and they are not provided.  </li> <li><code>FileNotFoundError</code> \u2013 if <code>maf_file</code>, <code>cache_dir</code>, or <code>fasta</code> does not exist.  </li> </ul>"},{"location":"api/Analysis%20Methods/VEP%20annotate/vep_annotation_maf/#minimal-usage-example","title":"Minimal usage example","text":"<p>```python from pathlib import Path from vep_annotate import wrap_maf_vep_annotate_protein</p> <p>success, info = wrap_maf_vep_annotate_protein(     maf_file=\"tumor_samples.maf.gz\",     cache_dir=Path(\"/data/vep_cache\"),     fasta=Path(\"/data/genome/GRCh38.fa\") ) print(success, info) ````</p>"},{"location":"api/Analysis%20Methods/VEP%20annotate/vep_annotation_vcf/","title":"VCF annotation","text":""},{"location":"api/Analysis%20Methods/VEP%20annotate/vep_annotation_vcf/#wrap_vcf_vep_annotate_unified","title":"wrap_vcf_vep_annotate_unified","text":""},{"location":"api/Analysis%20Methods/VEP%20annotate/vep_annotation_vcf/#short-description","title":"Short description","text":"<p>Provides a single entry point to run VEP on a VCF file with any combination of protein, gene, and variant-class annotations in one call. </p>"},{"location":"api/Analysis%20Methods/VEP%20annotate/vep_annotation_vcf/#signature","title":"Signature","text":"<pre><code>def wrap_vcf_vep_annotate_unified(\n    vcf_file: Union[str, Path],\n    cache_dir: Union[str, Path],\n    fasta: Union[str, Path],\n    output_file: Optional[Union[str, Path]] = None,\n    synonyms_file: Optional[Union[str, Path]] = None,\n    assembly: Optional[str] = None,\n    version: Optional[str] = None,\n    no_stats: bool = True,\n    annotate_protein: bool = False,\n    annotate_gene: bool = False,\n    annotate_variant_class: bool = False,\n    distance: Optional[int] = None\n) -&gt; Tuple[bool, str]:\n</code></pre>"},{"location":"api/Analysis%20Methods/VEP%20annotate/vep_annotation_vcf/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>vcf_file</code> <code>str</code> | <code>Path</code> Yes Path to the input VCF file. <code>cache_dir</code> <code>str</code> | <code>Path</code> Yes Directory containing the local VEP cache. <code>fasta</code> <code>str</code> | <code>Path</code> Yes Reference FASTA used by VEP. <code>output_file</code> <code>str</code> | <code>Path</code> No Destination for the annotated VCF. If omitted, a directory named <code>vep_annotation_&lt;timestamp&gt;</code> is created beside the VCF. <code>synonyms_file</code> <code>str</code> | <code>Path</code> No Chromosome\u2013synonyms file. When <code>None</code>, it is inferred from the cache directory. <code>assembly</code> <code>str</code> No Genome assembly. If omitted, parsed from <code>cache_dir</code>. <code>version</code> <code>str</code> No VEP cache version. If omitted, parsed from <code>cache_dir</code>. <code>no_stats</code> <code>bool</code> No Run VEP with <code>--no_stats</code> (<code>True</code>, default). <code>annotate_protein</code> <code>bool</code> No Add protein-level data (<code>--protein --uniprot --domains --symbol</code>). Default <code>False</code>. <code>annotate_gene</code> <code>bool</code> No Add gene symbols (and optionally nearest gene) via <code>--symbol</code>. Default <code>False</code>. <code>annotate_variant_class</code> <code>bool</code> No Add variant class information (<code>--variant_class</code>). Default <code>False</code>. <code>distance</code> <code>int</code> No Distance (bp) for nearest-gene lookup when <code>annotate_gene=True</code>. Ignored otherwise."},{"location":"api/Analysis%20Methods/VEP%20annotate/vep_annotation_vcf/#return-value","title":"Return value","text":"<p><code>Tuple[bool, str]</code> where  </p> <ul> <li><code>bool</code> \u2013 <code>True</code> if VEP completed without error, else <code>False</code>.  </li> <li><code>str</code> \u2013 Path to the annotated VCF (even on certain non-fatal errors); never <code>None</code>.  </li> </ul>"},{"location":"api/Analysis%20Methods/VEP%20annotate/vep_annotation_vcf/#exceptions","title":"Exceptions","text":"<ul> <li><code>ValueError</code> \u2013 if none of <code>annotate_protein</code>, <code>annotate_gene</code>, or <code>annotate_variant_class</code> is <code>True</code>.  </li> <li><code>FileNotFoundError</code> \u2013 if <code>vcf_file</code>, <code>cache_dir</code>, or <code>fasta</code> does not exist.  </li> </ul>"},{"location":"api/Analysis%20Methods/VEP%20annotate/vep_annotation_vcf/#minimal-usage-example","title":"Minimal usage example","text":"<p>```python from pathlib import Path from vep_annotate import wrap_vcf_vep_annotate_unified</p> <p>success, info = wrap_vcf_vep_annotate_unified(     vcf_file=\"cohort.vcf.gz\",     cache_dir=Path(\"/data/vep_cache\"),     fasta=Path(\"/data/genome/GRCh38.fa\"),     annotate_protein=True,     annotate_variant_class=True ) print(success, info) ````</p>"},{"location":"api/Core/pymutation_class/","title":"PyMutation \u2013 Main Class for Mutation Analysis","text":"<p>The <code>PyMutation</code> class is the central object in pyMut, encapsulating mutation data and providing methods for both analysis and visualisation.</p>"},{"location":"api/Core/pymutation_class/#what-is-pymutation","title":"What is PyMutation?","text":"<p><code>PyMutation</code> represents an entire mutation dataset: it stores the data in a structured table, keeps metadata about its origin, and exposes analysis and plotting helpers.</p>"},{"location":"api/Core/pymutation_class/#object-structure","title":"Object Structure","text":""},{"location":"api/Core/pymutation_class/#main-attributes","title":"Main Attributes","text":"<pre><code>class PyMutation:\n    def __init__(self, data: pd.DataFrame, metadata: MutationMetadata, samples: List[str]):\n        self.data = data           # DataFrame of mutations (VCF-like columns)\n        self.samples = samples     # List of sample IDs\n        self.metadata = metadata   # Provenance and configuration metadata\n</code></pre>"},{"location":"api/Core/pymutation_class/#data-attribute-pddataframe","title":"<code>data</code> Attribute (<code>pd.DataFrame</code>)","text":"<p>VCF-style mutation table with standard columns:</p> <pre><code>CHROM | POS | ID | REF | ALT | QUAL | FILTER | SAMPLE_001 | SAMPLE_002 | ANNOTATIONS | ...\nchr1  | 100 | .  | A   | G   | .    | .      | A|G        | A|A        | ...         | ...\nchr2  | 200 | .  | C   | T   | .    | .      | C|C        | C|T        | ...         | ...\n</code></pre>"},{"location":"api/Core/pymutation_class/#samples-attribute-liststr","title":"<code>samples</code> Attribute (<code>List[str]</code>)","text":"<p>Sample identifiers:</p> <pre><code>['SAMPLE_001', 'SAMPLE_002', 'SAMPLE_003', ...]\n</code></pre>"},{"location":"api/Core/pymutation_class/#metadata-attribute-mutationmetadata","title":"<code>metadata</code> Attribute (<code>MutationMetadata</code>)","text":"<p>Provenance and settings:</p> <pre><code>metadata.source_format   # \"MAF\" or \"VCF\"\nmetadata.file_path       # Path to the original file\nmetadata.loaded_at       # Timestamp when loaded\nmetadata.filters         # Applied filters\nmetadata.fasta           # Reference FASTA\nmetadata.notes           # Original file comments\n</code></pre>"},{"location":"api/Core/pymutation_class/#creating-pymutation-objects","title":"Creating <code>PyMutation</code> Objects","text":""},{"location":"api/Core/pymutation_class/#from-a-maf-file","title":"From a MAF file","text":"<pre><code>from pyMut.io import read_maf\n\n# Recommended entry-point\npy_mut = read_maf(\"mutations.maf\")\n</code></pre>"},{"location":"api/Core/pymutation_class/#manual-creation-advanced","title":"Manual creation (advanced)","text":"<pre><code>import pandas as pd\nfrom pyMut.core import PyMutation, MutationMetadata\n\n# Build a DataFrame with the required columns\ndata = pd.DataFrame({\n    'CHROM': ['chr1', 'chr2'],\n    'POS': [100, 200],\n    'REF': ['A', 'C'],\n    'ALT': ['G', 'T'],\n    'SAMPLE_001': ['A|G', 'C|C'],\n    'SAMPLE_002': ['A|A', 'C|T'],\n    'Hugo_Symbol': ['GENE1', 'GENE2'],\n    'Variant_Classification': ['Missense_Mutation', 'Nonsense_Mutation']\n})\n\n# Create metadata\nmetadata = MutationMetadata(\n    source_format=\"Manual\",\n    file_path=\"manual_creation\",\n    filters=[\".\"],\n    fasta=\"\",\n    notes=\"Manually created\"\n)\n\n# Instantiate the object\nsamples = ['SAMPLE_001', 'SAMPLE_002']\npy_mut = PyMutation(data, metadata, samples)\n</code></pre>"},{"location":"api/Core/pymutation_class/#visualisation-methods","title":"Visualisation Methods","text":""},{"location":"api/Core/pymutation_class/#summary-plot-complete-analysis","title":"Summary Plot \u2013 Complete Analysis","text":"<pre><code># Produce a 6-panel overview figure\nfig = py_mut.summary_plot(\n    title=\"My Mutation Analysis\",\n    figsize=(16, 12),\n    max_samples=100,\n    top_genes_count=15,\n)\nfig.savefig(\"summary_analysis.png\")\n</code></pre>"},{"location":"api/Core/pymutation_class/#individual-plots","title":"Individual Plots","text":""},{"location":"api/Core/pymutation_class/#variant-classification","title":"Variant Classification","text":"<pre><code>fig = py_mut.variant_classification_plot(\n    title=\"Mutation Type Distribution\",\n    figsize=(10, 6)\n)\n</code></pre>"},{"location":"api/Core/pymutation_class/#variant-types","title":"Variant Types","text":"<pre><code>fig = py_mut.variant_type_plot(\n    title=\"Variant Type Distribution\",\n    figsize=(10, 6)\n)\n</code></pre>"},{"location":"api/Core/pymutation_class/#snv-classes","title":"SNV Classes","text":"<pre><code>fig = py_mut.snv_class_plot(\n    title=\"Nucleotide Change Distribution\",\n    figsize=(10, 6)\n)\n</code></pre>"},{"location":"api/Core/pymutation_class/#variants-per-sample-tmb","title":"Variants per Sample (TMB)","text":"<pre><code>fig = py_mut.variants_per_sample_plot(\n    title=\"Tumour Mutation Burden per Sample\",\n    max_samples=50,\n    figsize=(12, 6)\n)\n</code></pre>"},{"location":"api/Core/pymutation_class/#per-sample-classification-summary","title":"Per-Sample Classification Summary","text":"<pre><code>fig = py_mut.variant_classification_summary_plot(\n    title=\"Per-Sample Classification Summary\",\n    figsize=(10, 6)\n)\n</code></pre>"},{"location":"api/Core/pymutation_class/#most-mutated-genes","title":"Most-Mutated Genes","text":"<pre><code>fig = py_mut.top_mutated_genes_plot(\n    title=\"Top Mutated Genes\",\n    count=20,\n    figsize=(10, 8)\n)\n</code></pre>"},{"location":"api/Core/pymutation_class/#analysis-methods","title":"Analysis Methods","text":""},{"location":"api/Core/pymutation_class/#tumour-mutation-burden-tmb","title":"Tumour Mutation Burden (TMB)","text":"<pre><code># Full TMB analysis\ntmb_results = py_mut.calculate_tmb_analysis(\n    variant_classification_column=\"Variant_Classification\",\n    genome_size_bp=60_456_963,  # WES\n    output_dir=\"results\",\n    save_files=True\n)\n\n# Access results\nanalysis_df = tmb_results['analysis']\nstatistics_df = tmb_results['statistics']\n</code></pre>"},{"location":"api/Core/pymutation_class/#utility-methods","title":"Utility Methods","text":""},{"location":"api/Core/pymutation_class/#high-quality-plot-configuration","title":"High-Quality Plot Configuration","text":"<pre><code># Global matplotlib settings for publication-ready output\nPyMutation.configure_high_quality_plots()\n\n# All subsequent figures are rendered at high DPI\nfig = py_mut.summary_plot()\nfig.savefig(\"high_quality_plot.png\")  # Automatically DPI=300\n</code></pre>"},{"location":"api/Core/pymutation_class/#centralised-figure-saving","title":"Centralised Figure Saving","text":"<pre><code>fig = py_mut.summary_plot()\n\n# Basic save\npy_mut.save_figure(fig, \"analysis.png\")\n\n# Custom save\npy_mut.save_figure(fig, \"analysis.pdf\", dpi=600, bbox_inches=\"tight\")\n</code></pre>"},{"location":"api/Core/pymutation_class/#end-to-end-example","title":"End-to-End Example","text":"<pre><code>from pyMut.io import read_maf\nfrom pyMut import PyMutation\nimport matplotlib.pyplot as plt\n\n# 1. LOAD DATA\nprint(\"\ud83d\udcc2 Loading MAF data...\")\npy_mut = read_maf(\"src/pyMut/data/examples/tcga_laml.maf.gz\")\n\n# 2. EXPLORE STRUCTURE\nprint(\"\u2705 Data successfully loaded:\")\nprint(f\"   \u2022 Samples: {len(py_mut.samples)}\")\nprint(f\"   \u2022 Mutations: {len(py_mut.data)}\")\nprint(f\"   \u2022 Source format: {py_mut.metadata.source_format}\")\nprint(f\"   \u2022 File: {py_mut.metadata.file_path}\")\n\n# 3. HIGH-QUALITY SETTINGS\nPyMutation.configure_high_quality_plots()\n\n# 4. COMPREHENSIVE VISUAL ANALYSIS\nprint(\"\\n\ud83d\udcca Generating visual analysis...\")\nsummary_fig = py_mut.summary_plot(\n    title=\"TCGA-LAML: Comprehensive Mutation Analysis\",\n    figsize=(18, 14),\n    max_samples=150,\n    top_genes_count=20\n)\n\n# Save in multiple formats\npy_mut.save_figure(summary_fig, \"tcga_laml_summary.png\")\npy_mut.save_figure(summary_fig, \"tcga_laml_summary.pdf\", dpi=300)\n\n# 5. TMB ANALYSIS\nprint(\"\\n\ud83e\uddec Calculating TMB...\")\ntmb_results = py_mut.calculate_tmb_analysis(\n    genome_size_bp=60_456_963,  # Standard WES\n    output_dir=\"results/tmb_analysis\",\n    save_files=True\n)\n\n# Explore TMB output\nanalysis_df = tmb_results['analysis']\nstatistics_df = tmb_results['statistics']\n\nprint(f\"   \u2022 Analysed samples: {len(analysis_df)}\")\nprint(f\"   \u2022 Mean TMB: {analysis_df['TMB_Total_Normalized'].mean():.3f} mut/Mb\")\nprint(f\"   \u2022 Median TMB: {analysis_df['TMB_Total_Normalized'].median():.3f} mut/Mb\")\n\n# 6. INDIVIDUAL VISUALISATIONS\nprint(\"\\n\ud83d\udcc8 Generating specific plots...\")\n\n# TMB per sample\ntmb_fig = py_mut.variants_per_sample_plot(\n    title=\"Tumour Mutation Burden (TMB)\",\n    max_samples=100\n)\npy_mut.save_figure(tmb_fig, \"tmb_per_sample.png\")\n\n# Top mutated genes\ngenes_fig = py_mut.top_mutated_genes_plot(\n    title=\"Top 25 Mutated Genes\",\n    count=25\n)\npy_mut.save_figure(genes_fig, \"top_mutated_genes.png\")\n\n# Mutation types\nclassification_fig = py_mut.variant_classification_plot(\n    title=\"Mutation Type Distribution\"\n)\npy_mut.save_figure(classification_fig, \"variant_classification.png\")\n\n# 7. CUSTOM ANALYSIS\nprint(\"\\n\ud83d\udd0d Custom analysis...\")\n\n# Identify high-TMB samples\nhigh_tmb_threshold = 10  # mut/Mb\nhigh_tmb_samples = analysis_df[\n    analysis_df['TMB_Total_Normalized'] &gt; high_tmb_threshold\n]\n\nprint(f\"   \u2022 High-TMB samples (&gt;{high_tmb_threshold} mut/Mb): {len(high_tmb_samples)}\")\n\nif len(high_tmb_samples) &gt; 0:\n    print(\"   \u2022 Top 5 samples by TMB:\")\n    top_samples = high_tmb_samples.nlargest(5, 'TMB_Total_Normalized')\n    for _, row in top_samples.iterrows():\n        print(f\"     - {row['Sample']}: {row['TMB_Total_Normalized']:.3f} mut/Mb\")\n\n# Most frequently mutated genes\ngene_counts = py_mut.data['Hugo_Symbol'].value_counts().head(10)\nprint(\"\\n   \u2022 Top 10 mutated genes:\")\nfor gene, count in gene_counts.items():\n    print(f\"     - {gene}: {count} mutations\")\n\nprint(\"\\n\u2705 Complete analysis finished!\")\nprint(\"\ud83d\udcc1 Generated files:\")\nprint(\"   \u2022 tcga_laml_summary.png/pdf \u2013 full overview\")\nprint(\"   \u2022 tmb_per_sample.png \u2013 TMB per sample\")\nprint(\"   \u2022 top_mutated_genes.png \u2013 most mutated genes\")\nprint(\"   \u2022 variant_classification.png \u2013 mutation types\")\nprint(\"   \u2022 results/tmb_analysis/ \u2013 detailed TMB results\")\n</code></pre>"},{"location":"api/Core/pymutation_class/#data-access","title":"Data Access","text":""},{"location":"api/Core/pymutation_class/#basic-exploration","title":"Basic Exploration","text":"<pre><code># Basic info\nprint(f\"Shape: {py_mut.data.shape}\")\nprint(f\"Columns: {list(py_mut.data.columns)}\")\nprint(f\"Samples: {py_mut.samples}\")\n\n# Preview rows\nprint(py_mut.data.head())\n\n# Column info\nprint(py_mut.data.info())\n</code></pre>"},{"location":"api/Core/pymutation_class/#filtering","title":"Filtering","text":"<pre><code># By gene\ntp53_data = py_mut.data[py_mut.data['Hugo_Symbol'] == 'TP53']\n\n# By mutation type\nmissense_data = py_mut.data[\n    py_mut.data['Variant_Classification'] == 'Missense_Mutation'\n]\n\n# By chromosome\nchr1_data = py_mut.data[py_mut.data['CHROM'] == 'chr1']\n</code></pre>"},{"location":"api/Core/pymutation_class/#descriptive-statistics","title":"Descriptive Statistics","text":"<pre><code># Count by mutation type\nmutation_counts = py_mut.data['Variant_Classification'].value_counts()\nprint(mutation_counts)\n\n# Unique genes\nunique_genes = py_mut.data['Hugo_Symbol'].nunique()\nprint(f\"Unique genes: {unique_genes}\")\n\n# Mutations per sample\nmutations_per_sample = {}\nfor sample in py_mut.samples:\n    count = 0\n    for _, row in py_mut.data.iterrows():\n        genotype = row[sample]\n        ref = row['REF']\n        if genotype != f\"{ref}|{ref}\":  # not REF|REF\n            count += 1\n    mutations_per_sample[sample] = count\n\nprint(\"Mutations per sample:\")\nfor sample, count in sorted(mutations_per_sample.items(),\n                            key=lambda x: x[1], reverse=True)[:10]:\n    print(f\"  {sample}: {count}\")\n</code></pre>"},{"location":"api/Core/pymutation_class/#integration-with-other-analyses","title":"Integration with Other Analyses","text":""},{"location":"api/Core/pymutation_class/#export-data-for-external-tools","title":"Export Data for External Tools","text":"<pre><code># Full export\npy_mut.data.to_csv(\"mutations_export.tsv\", sep=\"\\t\", index=False)\n\n# Export mutations for a single sample\nsample = py_mut.samples[0]\nsample_mut = py_mut.data[\n    py_mut.data[sample] != f\"{py_mut.data['REF']}|{py_mut.data['REF']}\"\n]\nsample_mut.to_csv(f\"{sample}_mutations.tsv\", sep=\"\\t\", index=False)\n\n# Export metadata\nmetadata_info = {\n    \"source_format\": py_mut.metadata.source_format,\n    \"file_path\": py_mut.metadata.file_path,\n    \"loaded_at\": str(py_mut.metadata.loaded_at),\n    \"total_samples\": len(py_mut.samples),\n    \"total_mutations\": len(py_mut.data)\n}\n\nimport json\nwith open(\"metadata.json\", \"w\") as f:\n    json.dump(metadata_info, f, indent=2)\n</code></pre>"},{"location":"api/Core/pymutation_class/#combine-with-pandas-for-advanced-analyses","title":"Combine with <code>pandas</code> for Advanced Analyses","text":"<pre><code>import pandas as pd\nimport numpy as np\n\ndef analyse_gene_cooccurrence(py_mut, genes):\n    \"\"\"Analyse mutation co-occurrence in specific genes.\"\"\"\n    rows = []\n    for sample in py_mut.samples:\n        mutated = []\n        for gene in genes:\n            gene_rows = py_mut.data[py_mut.data['Hugo_Symbol'] == gene]\n            if gene_rows.empty:\n                continue\n            for _, row in gene_rows.iterrows():\n                genotype = row[sample]\n                ref = row['REF']\n                if genotype != f\"{ref}|{ref}\":\n                    mutated.append(gene)\n                    break\n        rows.append({\n            \"Sample\": sample,\n            \"Mutated_Genes\": mutated,\n            \"Gene_Count\": len(mutated)\n        })\n    return pd.DataFrame(rows)\n\n# Example usage\noncogenes = [\"TP53\", \"KRAS\", \"PIK3CA\", \"APC\", \"EGFR\"]\ncooccurrence_df = analyse_gene_cooccurrence(py_mut, oncogenes)\nprint(cooccurrence_df.head())\n</code></pre>"},{"location":"api/Core/pymutation_class/#best-practices","title":"Best Practices","text":""},{"location":"api/Core/pymutation_class/#1-recommended-initial-setup","title":"1. Recommended Initial Setup","text":"<pre><code>from pyMut.io import read_maf\nfrom pyMut import PyMutation\n\n# Always enable high-quality plotting early\nPyMutation.configure_high_quality_plots()\n\n# Load data\npy_mut = read_maf(\"data.maf\")\n</code></pre>"},{"location":"api/Core/pymutation_class/#2-data-validation","title":"2. Data Validation","text":"<pre><code>assert len(py_mut.samples) &gt; 0, \"No samples found\"\nassert len(py_mut.data) &gt; 0, \"No mutations found\"\nassert \"Hugo_Symbol\" in py_mut.data.columns, \"Missing gene column\"\n</code></pre>"},{"location":"api/Core/pymutation_class/#3-systematic-workflow","title":"3. Systematic Workflow","text":"<pre><code># 1. Visual overview\nsummary_fig = py_mut.summary_plot()\n\n# 2. TMB analysis\ntmb_results = py_mut.calculate_tmb_analysis()\n\n# 3. Specific plots as needed\n# 4. Custom data analysis\n</code></pre>"},{"location":"api/Core/pymutation_class/#4-file-management","title":"4. File Management","text":"<pre><code>import os\n\n# Create results directory\nos.makedirs(\"results\", exist_ok=True)\n\n# Save all figures centrally\npy_mut.save_figure(summary_fig, \"results/summary.png\")\n</code></pre>"},{"location":"api/Data%20Combination/combine_data/","title":"Data Combination","text":""},{"location":"api/Data%20Combination/combine_data/#combine_pymutations","title":"combine_pymutations","text":""},{"location":"api/Data%20Combination/combine_data/#short-description","title":"Short description","text":"<p>Combines two PyMutation objects into a single instance, deduplicating variants, merging sample columns, and ensuring both input cohorts share the same genome assembly.</p>"},{"location":"api/Data%20Combination/combine_data/#signature","title":"Signature","text":"<pre><code>def combine_pymutations(pymut1: PyMutation, pymut2: PyMutation) -&gt; PyMutation:\n</code></pre>"},{"location":"api/Data%20Combination/combine_data/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>pymut1</code> <code>PyMutation</code> Yes First mutation cohort. Its assembly must match that of <code>pymut2</code>. <code>pymut2</code> <code>PyMutation</code> Yes Second mutation cohort to merge with <code>pymut1</code>. Samples and annotations are integrated."},{"location":"api/Data%20Combination/combine_data/#return-value","title":"Return value","text":"<p><code>PyMutation</code> \u2013 new object containing the union of variants, samples, and annotations from both inputs. Originals are left untouched.</p>"},{"location":"api/Data%20Combination/combine_data/#exceptions","title":"Exceptions","text":"<ul> <li><code>ValueError</code>: if <code>pymut1</code> and <code>pymut2</code> have different <code>assembly</code> values.</li> </ul>"},{"location":"api/Data%20Combination/combine_data/#minimal-usage-example","title":"Minimal usage example","text":"<pre><code>from pymutation import PyMutation\nfrom pymutation.analysis import combine_pymutations\n\ncohort_a = PyMutation.from_maf(\"tumours_setA.maf\")\ncohort_b = PyMutation.from_maf(\"tumours_setB.maf\")\n\nmerged = combine_pymutations(cohort_a, cohort_b)\nprint(f\"Merged cohort: {len(merged.samples)} samples, {len(merged.data)} variants\")\n</code></pre>"},{"location":"api/Data%20Export/to_maf/","title":"Export to MAF","text":""},{"location":"api/Data%20Export/to_maf/#to_maf","title":"to_maf","text":""},{"location":"api/Data%20Export/to_maf/#short-description","title":"Short description","text":"<p>Exports a PyMutation object back to MAF (Mutation Annotation Format) file format.</p>"},{"location":"api/Data%20Export/to_maf/#signature","title":"Signature","text":"<pre><code>def to_maf(self, output_path: str | Path) -&gt; None:\n</code></pre>"},{"location":"api/Data%20Export/to_maf/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>output_path</code> <code>str | Path</code> Yes Path where the MAF file will be written. Supports .maf and .maf.gz formats."},{"location":"api/Data%20Export/to_maf/#return-value","title":"Return value","text":"<p>Returns <code>None</code>. The method writes the MAF file to the specified path.</p>"},{"location":"api/Data%20Export/to_maf/#exceptions","title":"Exceptions","text":"<p>List only those the user should handle:</p> <ul> <li><code>ValueError</code>: if the PyMutation object doesn't contain the necessary data for MAF export or if required VCF-style columns are missing.</li> </ul>"},{"location":"api/Data%20Export/to_maf/#minimal-usage-example","title":"Minimal usage example","text":"<pre><code>&gt;&gt;&gt; from pyMut.input import read_maf\n&gt;&gt;&gt; py_mut = read_maf(\"input.maf\")\n&gt;&gt;&gt; py_mut.to_maf(\"output.maf\")\n</code></pre>"},{"location":"api/Data%20Export/to_vcf/","title":"Export to VCF","text":""},{"location":"api/Data%20Export/to_vcf/#to_vcf","title":"to_vcf","text":""},{"location":"api/Data%20Export/to_vcf/#short-description","title":"Short description","text":"<p>Exports a PyMutation object to VCF format with proper headers and metadata information.</p>"},{"location":"api/Data%20Export/to_vcf/#signature","title":"Signature","text":"<pre><code>def to_vcf(self, output_path: str | Path) -&gt; None:\n</code></pre>"},{"location":"api/Data%20Export/to_vcf/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>output_path</code> <code>str | Path</code> Yes Path where the VCF file will be written. Can be a string or Path object."},{"location":"api/Data%20Export/to_vcf/#return-value","title":"Return value","text":"<p>Returns <code>None</code>. The method writes the VCF file to the specified output path.</p>"},{"location":"api/Data%20Export/to_vcf/#exceptions","title":"Exceptions","text":"<p>List only those the user should handle:</p> <ul> <li><code>ValueError</code>: if the PyMutation object doesn't contain the necessary data for VCF export (missing required VCF-style columns like CHROM, POS, REF, ALT, ID or missing sample columns).</li> </ul>"},{"location":"api/Data%20Export/to_vcf/#minimal-usage-example","title":"Minimal usage example","text":"<pre><code>&gt;&gt;&gt; pymutation_obj.to_vcf(\"output.vcf\")\n&gt;&gt;&gt; # Or using Path object\n&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; pymutation_obj.to_vcf(Path(\"data/output.vcf\"))\n</code></pre>"},{"location":"api/Data%20Loading/read_maf/","title":"Read MAF Files","text":""},{"location":"api/Data%20Loading/read_maf/#read_maf","title":"read_maf","text":""},{"location":"api/Data%20Loading/read_maf/#short-description","title":"Short description","text":"<p>Reads a MAF file and returns a PyMutation object with automatic caching and performance optimizations.</p>"},{"location":"api/Data%20Loading/read_maf/#signature","title":"Signature","text":"<pre><code>def read_maf(path: str | Path,\n             assembly: str,\n             cache_dir: Optional[str | Path] = None,\n             consolidate_variants: bool = True\n) -&gt; PyMutation:\n</code></pre>"},{"location":"api/Data%20Loading/read_maf/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>path</code> <code>str \\| Path</code> Yes Path to the MAF file (.maf or .maf.gz). <code>assembly</code> <code>str</code> Yes Version of the genome assembly. Must be either \"37\" or \"38\". <code>cache_dir</code> <code>str \\| Path</code> No Directory for caching processed files. If None, uses a .pymut_cache directory next to the input file. <code>consolidate_variants</code> <code>bool</code> No If True (default), consolidates identical variants that appear in multiple samples into a single row. If False, maintains the original behavior where each MAF row becomes a separate DataFrame row."},{"location":"api/Data%20Loading/read_maf/#return-value","title":"Return value","text":"<p>Returns a <code>PyMutation</code> object containing the mutations read from the MAF file, converted to wide-format. Includes metadata with information about the source file, comments, and configuration.</p>"},{"location":"api/Data%20Loading/read_maf/#exceptions","title":"Exceptions","text":"<ul> <li><code>FileNotFoundError</code>: if the specified MAF file path does not exist.</li> <li><code>ValueError</code>: if the MAF file is missing required columns or has an invalid format, or if the assembly parameter is not \"37\" or \"38\".</li> <li><code>ImportError</code>: if the 'pyarrow' library cannot be imported and the 'c' engine alternative also fails.</li> <li><code>Exception</code>: for any other errors encountered while reading or processing the file.</li> </ul>"},{"location":"api/Data%20Loading/read_maf/#minimal-usage-example","title":"Minimal usage example","text":"<pre><code>&gt;&gt;&gt; from pyMut import read_maf\n&gt;&gt;&gt; mutations = read_maf(\"data/mutations.maf\", assembly=\"38\")\n&gt;&gt;&gt; print(mutations.data.shape)\n(1000, 25)\n</code></pre>"},{"location":"api/Data%20Loading/read_vcf/","title":"Read VCF Files","text":""},{"location":"api/Data%20Loading/read_vcf/#read_vcf","title":"read_vcf","text":""},{"location":"api/Data%20Loading/read_vcf/#short-description","title":"Short description","text":"<p>High-performance reader that converts a VCF (or VCF-GZ) file into a <code>PyMutation</code> object, with PyArrow acceleration, automatic caching and optional Tabix indexing. </p>"},{"location":"api/Data%20Loading/read_vcf/#signature","title":"Signature","text":"<pre><code>def read_vcf(\n    path: str | pathlib.Path,\n    assembly: str,\n    create_index: bool = False,\n    cache_dir: str | pathlib.Path | None = None\n) -&gt; PyMutation:\n</code></pre>"},{"location":"api/Data%20Loading/read_vcf/#parameters","title":"Parameters","text":"Parameter Type Required Description <code>path</code> <code>str \\| Path</code> Yes Path to the VCF (plain or <code>*.vcf.gz</code>). <code>assembly</code> <code>str</code> Yes Genome build identifier, must be <code>\"37\"</code> or <code>\"38\"</code>. <code>create_index</code> <code>bool</code> No If <code>True</code>, create a Tabix (<code>.tbi</code>) index if missing (requires <code>tabix</code> in <code>PATH</code>). Default <code>False</code>. <code>cache_dir</code> <code>str \\| Path \\| None</code> No Directory where parsed Parquet caches are stored. <code>None</code> (default) writes next to the VCF in <code>.pymut_cache/</code>."},{"location":"api/Data%20Loading/read_vcf/#return-value","title":"Return value","text":"<p><code>PyMutation</code> \u2014 a wide-format table of variants plus metadata and sample columns, ready for downstream analysis.</p>"},{"location":"api/Data%20Loading/read_vcf/#exceptions","title":"Exceptions","text":"<ul> <li><code>FileNotFoundError</code> \u2013 VCF file does not exist.</li> <li><code>ValueError</code> \u2013 invalid assembly, missing required VCF columns, or header problems.</li> <li><code>Exception</code> \u2013 any other I/O or parsing error (e.g. broken compression, PyArrow failure).</li> </ul>"},{"location":"api/Data%20Loading/read_vcf/#minimal-usage-example","title":"Minimal usage example","text":"<pre><code>from pymutation.io import read_vcf\n\npymut = read_vcf(\n    \"tumour.vcf.gz\",\n    assembly=\"38\",\n    create_index=True          # build Tabix if needed\n)\n\nprint(pymut.data.shape)\n</code></pre>"},{"location":"api/Data%20Loading/read_vcf/#standard-vcf-columns","title":"Standard VCF Columns","text":"<pre><code>CHROM | POS | ID | REF | ALT | QUAL | FILTER | INFO | FORMAT | SAMPLE_001 | SAMPLE_002\nchr1  | 100 | .  | A   | G   | 60   | PASS   | ...  | GT:DP  | 0/1:30    | 1/1:25\n</code></pre>"},{"location":"api/Data%20Loading/read_vcf/#conversion-to-pymut-format","title":"Conversion to pyMut Format","text":"<pre><code>CHROM | POS | ID | REF | ALT | QUAL | FILTER | SAMPLE_001 | SAMPLE_002 | INFO_parsed\nchr1  | 100 | .  | A   | G   | 60   | PASS   | A|G        | G|G        | {...}\n</code></pre>"},{"location":"api/Data%20Loading/read_vcf/#complete-example","title":"Complete Example","text":"<pre><code>from pyMut.input import read_vcf\nimport logging\n\n# Enable logging to monitor progress\nlogging.basicConfig(level=logging.INFO)\n\n# Load a VCF file with all options enabled\npy_mut = read_vcf(\n    path=\"src/pyMut/data/examples/ALL.chr10.vcf.gz\",\n    fasta=\"reference/hg38.fasta\",\n    create_index=True,\n    cache_dir=\"cache/\"\n)\n\n# Verify that the file was loaded successfully\nprint(f\"Loaded samples: {len(py_mut.samples)}\")\nprint(f\"Total variants: {len(py_mut.data)}\")\nprint(f\"Unique chromosomes: {py_mut.data['CHROM'].unique()}\")\n\n# Genotype information\nprint(f\"Sample columns: {py_mut.samples[:5]}...\")  # First 5 samples\n\n# Check metadata\nprint(f\"Source format: {py_mut.metadata.source_format}\")\nprint(f\"FASTA file: {py_mut.metadata.fasta}\")\n</code></pre>"},{"location":"api/Data%20Loading/read_vcf/#genotype-handling","title":"Genotype Handling","text":"<p>The function automatically converts VCF genotypes into pyMut\u2019s allelic format:</p>"},{"location":"api/Data%20Loading/read_vcf/#vcf-genotypes-input","title":"VCF Genotypes (input)","text":"<pre><code>FORMAT: GT:DP:GQ\nSAMPLE_001: 0/1:30:99    # Heterozygous\nSAMPLE_002: 1/1:25:99    # Homozygous alternate\nSAMPLE_003: 0/0:35:99    # Homozygous reference\n</code></pre>"},{"location":"api/Data%20Loading/read_vcf/#pymut-format-output","title":"pyMut Format (output)","text":"<pre><code>SAMPLE_001: A|G    # REF|ALT\nSAMPLE_002: G|G    # ALT|ALT  \nSAMPLE_003: A|A    # REF|REF\n</code></pre>"},{"location":"api/Data%20Loading/read_vcf/#cache-system","title":"Cache System","text":"<pre><code># First load \u2014 cache is created\npy_mut1 = read_vcf(\"large_file.vcf.gz\", cache_dir=\"cache/\")\n\n# Second load \u2014 cache is used (much faster)\npy_mut2 = read_vcf(\"large_file.vcf.gz\", cache_dir=\"cache/\")\n</code></pre>"},{"location":"api/Filters/chrom_sample_filter/","title":"filter_by_chrom_sample - Chromosome and Sample Filter","text":"<p>The filter_by_chrom_sample method allows filtering PyMutation data by chromosome and/or sample, providing granular control over which data to include in the analysis.</p>"},{"location":"api/Filters/chrom_sample_filter/#what-is-filter_by_chrom_sample","title":"What is filter_by_chrom_sample?","text":"<p>It is a versatile method that allows filtering data by chromosome, sample, or both criteria simultaneously. In addition to filtering rows, it also handles column filtering when samples are specified, maintaining data format integrity.</p>"},{"location":"api/Filters/chrom_sample_filter/#main-features","title":"Main Features","text":"<ul> <li>Dual filtering: By chromosome and/or sample in a single operation</li> <li>Row and column filtering: Removes both irrelevant rows and columns</li> <li>Multiple value support: Accepts lists of chromosomes and samples</li> <li>MAF/VCF compatibility: Handles both formats automatically</li> <li>Metadata preservation: Records all applied filters</li> <li>Automatic validation: Verifies the existence of chromosomes and samples</li> <li>Detailed logging: Provides information about the filtering process</li> </ul>"},{"location":"api/Filters/chrom_sample_filter/#basic-usage","title":"Basic Usage","text":"<pre><code>from pyMut.input import read_maf\n\n# Load data\npy_mut = read_maf(\"mutations.maf\")\n\n# Filter by chromosome only\nchr17_data = py_mut.filter_by_chrom_sample(chrom=\"chr17\")\n\n# Filter by sample only\nsample_data = py_mut.filter_by_chrom_sample(sample=\"TCGA-AB-2802\")\n\n# Filter by both criteria\nchr17_sample = py_mut.filter_by_chrom_sample(\n    chrom=\"chr17\", \n    sample=\"TCGA-AB-2802\"\n)\n\nprint(f\"Mutations in chr17: {len(chr17_data.data)}\")\nprint(f\"Mutations in sample: {len(sample_data.data)}\")\nprint(f\"Mutations chr17 + sample: {len(chr17_sample.data)}\")\n</code></pre>"},{"location":"api/Filters/chrom_sample_filter/#parameters","title":"Parameters","text":""},{"location":"api/Filters/chrom_sample_filter/#chrom-str-list-optional","title":"chrom (str, list, optional)","text":"<ul> <li>Description: Chromosome(s) to filter</li> <li>Accepted formats: <code>\"chr17\"</code>, <code>\"17\"</code>, <code>[\"chr1\", \"chr17\"]</code>, <code>[\"X\", \"Y\"]</code></li> <li>Normalization: Automatically normalized to standard format</li> <li>Example: <code>\"chr17\"</code> or <code>[\"chr1\", \"chr2\", \"chrX\"]</code></li> </ul>"},{"location":"api/Filters/chrom_sample_filter/#sample-str-list-optional","title":"sample (str, list, optional)","text":"<ul> <li>Description: Sample(s) to filter</li> <li>Format: Sample identifiers as they appear in the data</li> <li>Example: <code>\"TCGA-AB-2802\"</code> or <code>[\"TCGA-AB-2802\", \"TCGA-AB-2803\"]</code></li> </ul>"},{"location":"api/Filters/chrom_sample_filter/#sample_column-str-optional","title":"sample_column (str, optional)","text":"<ul> <li>Description: Name of the column containing sample information</li> <li>Default: <code>\"Tumor_Sample_Barcode\"</code> (MAF standard)</li> <li>Usage: For data with non-standard column names</li> </ul>"},{"location":"api/Filters/chrom_sample_filter/#filtering-behavior","title":"Filtering Behavior","text":""},{"location":"api/Filters/chrom_sample_filter/#chromosome-only-filtering","title":"Chromosome-Only Filtering","text":"<pre><code># Keeps all columns, filters only rows\nchr_filtered = py_mut.filter_by_chrom_sample(chrom=\"chr17\")\n\n# Result: Only mutations in chr17, all samples preserved\nprint(f\"Unique chromosomes: {chr_filtered.data['CHROM'].unique()}\")\nprint(f\"Preserved samples: {len(chr_filtered.samples)}\")\n</code></pre>"},{"location":"api/Filters/chrom_sample_filter/#sample-only-filtering","title":"Sample-Only Filtering","text":"<pre><code># Filters both rows and columns\nsample_filtered = py_mut.filter_by_chrom_sample(sample=\"TCGA-AB-2802\")\n\n# Result: Only mutations from the sample, only relevant columns\nprint(f\"Samples in data: {sample_filtered.samples}\")\nprint(f\"Sample columns: {[col for col in sample_filtered.data.columns if 'TCGA' in col]}\")\n</code></pre>"},{"location":"api/Filters/chrom_sample_filter/#combined-filtering","title":"Combined Filtering","text":"<pre><code># Applies both filters simultaneously\ncombined = py_mut.filter_by_chrom_sample(\n    chrom=[\"chr17\", \"chrX\"], \n    sample=[\"TCGA-AB-2802\", \"TCGA-AB-2803\"]\n)\n\nprint(f\"Chromosomes: {combined.data['CHROM'].unique()}\")\nprint(f\"Samples: {combined.samples}\")\n</code></pre>"},{"location":"api/Filters/chrom_sample_filter/#detailed-examples","title":"Detailed Examples","text":""},{"location":"api/Filters/chrom_sample_filter/#specific-chromosome-analysis","title":"Specific Chromosome Analysis","text":"<pre><code>from pyMut.input import read_maf\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\n# Load TCGA data\npy_mut = read_maf(\"src/pyMut/data/examples/tcga_laml.maf.gz\")\nprint(f\"Original data: {len(py_mut.data)} mutations, {len(py_mut.samples)} samples\")\n\n# Analysis of oncologically interesting chromosomes\noncology_chromosomes = [\"chr17\", \"chr13\", \"chr3\", \"chr7\", \"chr12\"]\n\nprint(f\"\\n=== Chromosome Analysis ===\")\nfor chrom in oncology_chromosomes:\n    try:\n        # Filter by chromosome\n        chrom_data = py_mut.filter_by_chrom_sample(chrom=chrom)\n\n        print(f\"\\n{chrom}:\")\n        print(f\"  \u2022 Mutations: {len(chrom_data.data)}\")\n\n        if len(chrom_data.data) &gt; 0:\n            # Most mutated genes in this chromosome\n            top_genes = chrom_data.data['Hugo_Symbol'].value_counts().head(3)\n            print(f\"  \u2022 Top genes:\")\n            for gene, count in top_genes.items():\n                print(f\"    - {gene}: {count} mutations\")\n\n            # Affected samples\n            affected_samples = chrom_data.data['Tumor_Sample_Barcode'].nunique()\n            print(f\"  \u2022 Affected samples: {affected_samples}\")\n\n    except Exception as e:\n        print(f\"\u274c Error processing {chrom}: {e}\")\n</code></pre>"},{"location":"api/Filters/chrom_sample_filter/#sample-specific-analysis","title":"Sample-Specific Analysis","text":"<pre><code># Select samples of interest\nsamples_of_interest = py_mut.samples[:5]  # First 5 samples\n\nprint(f\"\\n=== Sample Analysis ===\")\nfor sample in samples_of_interest:\n    try:\n        # Filter by sample\n        sample_data = py_mut.filter_by_chrom_sample(sample=sample)\n\n        print(f\"\\n{sample}:\")\n        print(f\"  \u2022 Total mutations: {len(sample_data.data)}\")\n\n        if len(sample_data.data) &gt; 0:\n            # Mutation types\n            mutation_types = sample_data.data['Variant_Classification'].value_counts()\n            print(f\"  \u2022 Main mutation types:\")\n            for mut_type, count in mutation_types.head(3).items():\n                print(f\"    - {mut_type}: {count}\")\n\n            # Chromosomal distribution\n            chrom_dist = sample_data.data['CHROM'].value_counts()\n            print(f\"  \u2022 Most affected chromosomes:\")\n            for chrom, count in chrom_dist.head(3).items():\n                print(f\"    - {chrom}: {count} mutations\")\n\n    except Exception as e:\n        print(f\"\u274c Error processing {sample}: {e}\")\n</code></pre>"},{"location":"api/Filters/chrom_sample_filter/#multi-sample-comparative-analysis","title":"Multi-Sample Comparative Analysis","text":"<pre><code># Compare multiple samples\nsample_groups = {\n    \"Group_A\": [\"TCGA-AB-2802\", \"TCGA-AB-2803\", \"TCGA-AB-2804\"],\n    \"Group_B\": [\"TCGA-AB-2805\", \"TCGA-AB-2806\", \"TCGA-AB-2807\"]\n}\n\nprint(f\"\\n=== Multi-Sample Comparative Analysis ===\")\nfor group_name, samples in sample_groups.items():\n    try:\n        # Filter by sample group\n        group_data = py_mut.filter_by_chrom_sample(sample=samples)\n\n        print(f\"\\n{group_name} ({len(samples)} samples):\")\n        print(f\"  \u2022 Total mutations: {len(group_data.data)}\")\n        print(f\"  \u2022 Average mutations per sample: {len(group_data.data)/len(samples):.1f}\")\n\n        if len(group_data.data) &gt; 0:\n            # Most mutated genes in the group\n            top_genes = group_data.data['Hugo_Symbol'].value_counts().head(5)\n            print(f\"  \u2022 Most mutated genes:\")\n            for gene, count in top_genes.items():\n                print(f\"    - {gene}: {count} mutations\")\n\n    except Exception as e:\n        print(f\"\u274c Error processing {group_name}: {e}\")\n</code></pre>"},{"location":"api/Filters/chrom_sample_filter/#combined-filtering-analysis","title":"Combined Filtering Analysis","text":"<pre><code># Analysis combining chromosome and sample filters\nprint(f\"\\n=== Combined Analysis: chr17 + Specific Samples ===\")\n\n# Select samples with high mutation load\nhigh_mutation_samples = []\nfor sample in py_mut.samples[:10]:  # Check first 10 samples\n    sample_data = py_mut.filter_by_chrom_sample(sample=sample)\n    if len(sample_data.data) &gt; 50:  # Samples with &gt;50 mutations\n        high_mutation_samples.append(sample)\n\nprint(f\"Samples with high mutation load: {len(high_mutation_samples)}\")\n\nif high_mutation_samples:\n    # Filter chr17 in high-mutation samples\n    chr17_high_mut = py_mut.filter_by_chrom_sample(\n        chrom=\"chr17\",\n        sample=high_mutation_samples\n    )\n\n    print(f\"chr17 mutations in high-mutation samples: {len(chr17_high_mut.data)}\")\n\n    if len(chr17_high_mut.data) &gt; 0:\n        # Genes most affected in chr17\n        chr17_genes = chr17_high_mut.data['Hugo_Symbol'].value_counts()\n        print(f\"Most mutated genes in chr17:\")\n        for gene, count in chr17_genes.head(5).items():\n            print(f\"  - {gene}: {count} mutations\")\n</code></pre>"},{"location":"api/Filters/chrom_sample_filter/#advanced-usage","title":"Advanced Usage","text":""},{"location":"api/Filters/chrom_sample_filter/#filtering-by-chromosome-lists","title":"Filtering by Chromosome Lists","text":"<pre><code># Filter multiple chromosomes simultaneously\nsex_chromosomes = py_mut.filter_by_chrom_sample(chrom=[\"chrX\", \"chrY\"])\nautosomes_1_5 = py_mut.filter_by_chrom_sample(chrom=[\"chr1\", \"chr2\", \"chr3\", \"chr4\", \"chr5\"])\n\nprint(f\"Mutations in sex chromosomes: {len(sex_chromosomes.data)}\")\nprint(f\"Mutations in chromosomes 1-5: {len(autosomes_1_5.data)}\")\n</code></pre>"},{"location":"api/Filters/chrom_sample_filter/#filtering-by-sample-list","title":"Filtering by Sample List","text":"<pre><code># Define a list of samples of interest\nsamples_of_interest = [\n    \"TCGA-AB-2802\",\n    \"TCGA-AB-2803\", \n    \"TCGA-AB-2804\",\n    \"TCGA-AB-2805\",\n    \"TCGA-AB-2806\"\n]\n\n# Filter data to include only specified samples\nfiltered_data = py_mut.filter_by_chrom_sample(sample=samples_of_interest)\nprint(f\"Mutations in selected samples: {len(filtered_data.data)}\")\nprint(f\"Number of samples in filtered data: {len(filtered_data.samples)}\")\n\n# You can also combine with chromosome filtering\nchr17_selected_samples = py_mut.filter_by_chrom_sample(\n    chrom=\"chr17\",\n    sample=samples_of_interest\n)\nprint(f\"chr17 mutations in selected samples: {len(chr17_selected_samples.data)}\")\n\n# Filter by sample subsets for comparative analysis\ngroup_a = [\"TCGA-AB-2802\", \"TCGA-AB-2803\"]\ngroup_b = [\"TCGA-AB-2804\", \"TCGA-AB-2805\"]\n\ngroup_a_data = py_mut.filter_by_chrom_sample(sample=group_a)\ngroup_b_data = py_mut.filter_by_chrom_sample(sample=group_b)\n\nprint(f\"Group A mutations: {len(group_a_data.data)}\")\nprint(f\"Group B mutations: {len(group_b_data.data)}\")\n</code></pre>"},{"location":"api/Filters/chrom_sample_filter/#error-handling-and-validation","title":"Error Handling and Validation","text":"<pre><code># The method includes robust validation\ntry:\n    # Valid filtering\n    valid_filter = py_mut.filter_by_chrom_sample(chrom=\"chr17\", sample=\"TCGA-AB-2802\")\n    print(\"\u2705 Valid filtering successful\")\n\nexcept ValueError as e:\n    print(f\"\u274c Validation error: {e}\")\n\n# Handle non-existent chromosomes\ntry:\n    invalid_chrom = py_mut.filter_by_chrom_sample(chrom=\"chr99\")\nexcept KeyError as e:\n    print(f\"\u274c Chromosome not found: {e}\")\n\n# Handle non-existent samples\ntry:\n    invalid_sample = py_mut.filter_by_chrom_sample(sample=\"NON_EXISTENT_SAMPLE\")\nexcept KeyError as e:\n    print(f\"\u274c Sample not found: {e}\")\n</code></pre>"},{"location":"api/Filters/chrom_sample_filter/#integration-with-other-methods","title":"Integration with Other Methods","text":""},{"location":"api/Filters/chrom_sample_filter/#chaining-with-other-filters","title":"Chaining with Other Filters","text":"<pre><code># Chain multiple filters\nfiltered_data = (py_mut\n    .filter_by_chrom_sample(chrom=\"chr17\")\n    .filter_by_pass()  # If available\n    .filter_by_tissue_expression([('BRCA', 5)]))  # If available\n\nprint(f\"Data after chained filters: {len(filtered_data.data)}\")\n</code></pre>"},{"location":"api/Filters/chrom_sample_filter/#combination-with-analysis-methods","title":"Combination with Analysis Methods","text":"<pre><code># Filter and then analyze\nchr17_data = py_mut.filter_by_chrom_sample(chrom=\"chr17\")\n\n# Perform TMB analysis on filtered data\nif hasattr(chr17_data, 'calculate_tmb_analysis'):\n    tmb_results = chr17_data.calculate_tmb_analysis()\n    print(f\"TMB analysis on chr17: {len(tmb_results['analysis'])} samples\")\n\n# Generate visualizations\nif hasattr(chr17_data, 'summary_plot'):\n    fig = chr17_data.summary_plot(title=\"chr17 Mutation Analysis\")\n</code></pre>"},{"location":"api/Filters/chrom_sample_filter/#metadata-and-tracking","title":"Metadata and Tracking","text":"<pre><code># Filters are automatically recorded in metadata\noriginal = py_mut\nfiltered = py_mut.filter_by_chrom_sample(chrom=\"chr17\", sample=\"TCGA-AB-2802\")\n\nprint(\"Applied filters:\")\nfor filter_info in filtered.metadata.filters:\n    print(f\"  - {filter_info}\")\n\n# Example output:\n# - filter_by_chrom_sample:chrom=chr17,sample=TCGA-AB-2802\n</code></pre>"},{"location":"api/Filters/chrom_sample_filter/#common-use-cases","title":"Common Use Cases","text":"<ol> <li>Chromosome-specific analysis: Focus on specific chromosomes of oncological interest</li> <li>Sample subset analysis: Analyze specific patient cohorts</li> <li>Quality control: Remove problematic samples or chromosomes</li> <li>Comparative studies: Compare mutation patterns between sample groups</li> <li>Performance optimization: Reduce dataset size for faster processing</li> </ol>"},{"location":"api/Filters/chrom_sample_filter/#technical-notes","title":"Technical Notes","text":"<ul> <li>The method preserves all original metadata and sample information</li> <li>Chromosome normalization handles formats with and without \"chr\" prefix</li> <li>Sample filtering also removes corresponding columns from the data</li> <li>Compatible with both MAF and VCF-derived data formats</li> <li>Thread-safe and suitable for parallel processing</li> <li>Maintains data integrity and format consistency</li> </ul>"},{"location":"api/Filters/genomic_range/","title":"Genomic Range Filters - region and gen_region","text":"<p>The region and gen_region methods allow filtering PyMutation data by specific genomic location, either by chromosomal coordinates or by gene name.</p>"},{"location":"api/Filters/genomic_range/#what-are-genomic-range-filters","title":"What are Genomic Range Filters?","text":"<p>These are methods that allow extracting mutation subsets based on their location in the genome, facilitating analysis of specific regions of interest.</p>"},{"location":"api/Filters/genomic_range/#main-features","title":"Main Features","text":"<ul> <li>Coordinate filtering: Specify chromosome, start and end positions</li> <li>Gene filtering: Automatically search for coordinates of a specific gene</li> <li>pyarrow optimization: Uses pyarrow for fast queries when available</li> <li>Metadata preservation: Maintains original information and records applied filters</li> <li>Automatic validation: Verifies that coordinates are valid</li> <li>Detailed logging: Provides information about the filtering process</li> </ul>"},{"location":"api/Filters/genomic_range/#region-method-coordinate-based-filtering","title":"region Method - Coordinate-based Filtering","text":""},{"location":"api/Filters/genomic_range/#basic-usage","title":"Basic Usage","text":"<pre><code>from pyMut.input import read_maf\n\n# Load data\npy_mut = read_maf(\"mutations.maf\")\n\n# Filter by specific region\n# Chromosome 17, positions 7,500,000 to 7,600,000\ntp53_region = py_mut.region(\"chr17\", 7500000, 7600000)\n\nprint(f\"Mutations in region: {len(tp53_region.data)}\")\n</code></pre>"},{"location":"api/Filters/genomic_range/#region-parameters","title":"region Parameters","text":""},{"location":"api/Filters/genomic_range/#chrom-str-required","title":"chrom (str) [required]","text":"<ul> <li>Description: Chromosome to filter</li> <li>Accepted formats: <code>\"chr17\"</code>, <code>\"17\"</code>, <code>\"X\"</code>, <code>\"Y\"</code>, <code>\"chrX\"</code>, <code>\"chrY\"</code></li> <li>Example: <code>\"chr17\"</code></li> </ul>"},{"location":"api/Filters/genomic_range/#start-int-required","title":"start (int) [required]","text":"<ul> <li>Description: Start position of the region (inclusive)</li> <li>Coordinates: 1-based (genomic standard)</li> <li>Example: <code>7500000</code></li> </ul>"},{"location":"api/Filters/genomic_range/#end-int-required","title":"end (int) [required]","text":"<ul> <li>Description: End position of the region (inclusive)</li> <li>Coordinates: 1-based (genomic standard)</li> <li>Example: <code>7600000</code></li> </ul>"},{"location":"api/Filters/genomic_range/#region-examples","title":"region Examples","text":"<pre><code># TP53 gene region (chromosome 17)\ntp53_mutations = py_mut.region(\"chr17\", 7571720, 7590868)\n\n# BRCA1 gene region (chromosome 17)\nbrca1_mutations = py_mut.region(\"17\", 43044295, 43125483)\n\n# Complete chromosome X (large region example)\nchrx_mutations = py_mut.region(\"X\", 1, 156040895)\n\n# Specific region on chromosome Y\nchry_region = py_mut.region(\"chrY\", 2781479, 2781479)  # Specific position\n</code></pre>"},{"location":"api/Filters/genomic_range/#gen_region-method-gene-name-filtering","title":"gen_region Method - Gene Name Filtering","text":""},{"location":"api/Filters/genomic_range/#basic-usage_1","title":"Basic Usage","text":"<pre><code># Filter by gene name (automatic)\ntp53_mutations = py_mut.gen_region(\"TP53\")\nbrca1_mutations = py_mut.gen_region(\"BRCA1\")\n\nprint(f\"Mutations in TP53: {len(tp53_mutations.data)}\")\nprint(f\"Mutations in BRCA1: {len(brca1_mutations.data)}\")\n</code></pre>"},{"location":"api/Filters/genomic_range/#gen_region-parameters","title":"gen_region Parameters","text":""},{"location":"api/Filters/genomic_range/#gen_name-str-required","title":"gen_name (str) [required]","text":"<ul> <li>Description: Name of the gene to search</li> <li>Format: Official gene symbol (HUGO)</li> <li>Examples: <code>\"TP53\"</code>, <code>\"BRCA1\"</code>, <code>\"EGFR\"</code>, <code>\"KRAS\"</code></li> </ul>"},{"location":"api/Filters/genomic_range/#gene-database","title":"Gene Database","text":"<p>The method uses an internal database with genomic information:</p> <pre><code># Supported genes include:\navailable_genes = [\n    \"TP53\",      # Chromosome 17: 7,571,720-7,590,868\n    \"BRCA1\",     # Chromosome 17: 43,044,295-43,125,483\n    \"BRCA2\",     # Chromosome 13: 32,315,086-32,400,268\n    \"EGFR\",      # Chromosome 7: 55,019,017-55,211,628\n    \"KRAS\",      # Chromosome 12: 25,205,246-25,250,929\n    \"PIK3CA\",    # Chromosome 3: 179,148,114-179,240,093\n    # ... and many more\n]\n</code></pre>"},{"location":"api/Filters/genomic_range/#complete-example","title":"Complete Example","text":"<pre><code>from pyMut.input import read_maf\nimport logging\n\n# Configure logging to see details\nlogging.basicConfig(level=logging.INFO)\n\n# Load TCGA data\npy_mut = read_maf(\"src/pyMut/data/examples/tcga_laml.maf.gz\")\nprint(f\"Total mutations: {len(py_mut.data)}\")\n\n# Analysis of specific genes\ngenes_of_interest = [\"TP53\", \"KRAS\", \"PIK3CA\", \"EGFR\"]\n\nfor gene in genes_of_interest:\n    try:\n        # Filter by gene\n        gene_mutations = py_mut.gen_region(gene)\n        print(f\"\\n=== Analysis of {gene} ===\")\n        print(f\"Mutations found: {len(gene_mutations.data)}\")\n\n        if len(gene_mutations.data) &gt; 0:\n            # Most common mutation types\n            types = gene_mutations.data['Variant_Classification'].value_counts()\n            print(f\"Mutation types:\")\n            for mutation_type, count in types.head(3).items():\n                print(f\"  - {mutation_type}: {count}\")\n\n            # Affected samples\n            samples = gene_mutations.data['Tumor_Sample_Barcode'].nunique()\n            print(f\"Affected samples: {samples}\")\n\n    except Exception as e:\n        print(f\"\u274c Error processing {gene}: {e}\")\n\n# Specific region analysis\nprint(f\"\\n=== Chromosomal Region Analysis ===\")\n# Cancer gene-rich region on chromosome 17\nchr17_region = py_mut.region(\"chr17\", 7000000, 8000000)\nprint(f\"Mutations in chr17:7M-8M: {len(chr17_region.data)}\")\n\n# Genes in this region\nif len(chr17_region.data) &gt; 0:\n    genes_region = chr17_region.data['Hugo_Symbol'].value_counts()\n    print(\"Most mutated genes in the region:\")\n    for gene, count in genes_region.head(5).items():\n        print(f\"  - {gene}: {count} mutations\")\n</code></pre>"},{"location":"api/Filters/genomic_range/#coordinate-validation","title":"Coordinate Validation","text":"<pre><code># Automatic validations performed:\ntry:\n    # Valid coordinates\n    valid_region = py_mut.region(\"chr1\", 1000000, 2000000)\n\n    # Error: start &gt; end\n    invalid_region = py_mut.region(\"chr1\", 2000000, 1000000)\n\nexcept ValueError as e:\n    print(f\"\u274c Invalid coordinates: {e}\")\n\n# Error: non-existent chromosome\ntry:\n    invalid_chr = py_mut.region(\"chr99\", 1000000, 2000000)\nexcept KeyError as e:\n    print(f\"\u274c Chromosome not found: {e}\")\n</code></pre>"},{"location":"api/Filters/genomic_range/#metadata-handling","title":"Metadata Handling","text":"<pre><code># Filters are automatically registered\noriginal = py_mut\nfiltered = py_mut.region(\"chr17\", 7500000, 7600000)\n\nprint(\"Applied filters:\")\nfor filter_info in filtered.metadata.filters:\n    print(f\"  - {filter_info}\")\n\n# Example output:\n# - region:chr17:7500000-7600000\n</code></pre>"},{"location":"api/Filters/genomic_range/#common-use-cases","title":"Common Use Cases","text":""},{"location":"api/Filters/genomic_range/#candidate-gene-analysis","title":"Candidate Gene Analysis","text":"<pre><code># List of oncological genes of interest\ncancer_genes = [\"TP53\", \"KRAS\", \"PIK3CA\", \"EGFR\", \"BRAF\", \"APC\"]\n\n# Analyze each gene individually\ngene_analysis = {}\nfor gene in cancer_genes:\n    mutations = py_mut.gen_region(gene)\n    gene_analysis[gene] = {\n        'mutations': len(mutations.data),\n        'samples': mutations.data['Tumor_Sample_Barcode'].nunique() if len(mutations.data) &gt; 0 else 0\n    }\n\n# Summary\nfor gene, stats in gene_analysis.items():\n    print(f\"{gene}: {stats['mutations']} mutations in {stats['samples']} samples\")\n</code></pre>"},{"location":"api/Filters/genomic_range/#chromosomal-region-analysis","title":"Chromosomal Region Analysis","text":"<pre><code># Chromosomal arm analysis\n# Chromosome 17p (short arm)\nchr17p = py_mut.region(\"chr17\", 1, 22300000)\n\n# Chromosome 17q (long arm)  \nchr17q = py_mut.region(\"chr17\", 22300001, 83257441)\n\nprint(f\"Mutations in 17p: {len(chr17p.data)}\")\nprint(f\"Mutations in 17q: {len(chr17q.data)}\")\n</code></pre>"},{"location":"api/Filters/genomic_range/#hotspot-analysis","title":"Hotspot Analysis","text":"<pre><code># Known hotspot regions\nhotspots = {\n    \"TP53_DBD\": (\"chr17\", 7571720, 7590868),      # DNA binding domain\n    \"KRAS_G12\": (\"chr12\", 25245274, 25245276),    # Codon 12\n    \"PIK3CA_E545\": (\"chr3\", 179218303, 179218305) # Codon 545\n}\n\nfor name, (chrom, start, end) in hotspots.items():\n    hotspot_muts = py_mut.region(chrom, start, end)\n    print(f\"{name}: {len(hotspot_muts.data)} mutations\")\n</code></pre>"},{"location":"api/Filters/genomic_range/#combination-with-other-filters","title":"Combination with Other Filters","text":"<pre><code># Combine genomic filters with sample filters\n# 1. Filter by region\ntp53_region = py_mut.region(\"chr17\", 7571720, 7590868)\n\n# 2. Filter by specific samples\nspecific_samples = [\"TCGA-AB-2802\", \"TCGA-AB-2803\"]\ntp53_samples = tp53_region.filter_by_chrom_sample(sample=specific_samples)\n\nprint(f\"TP53 mutations in specific samples: {len(tp53_samples.data)}\")\n</code></pre>"},{"location":"api/Filters/pass_filter/","title":"pass_filter - Filtro de Calidad PASS","text":"<p>El m\u00e9todo pass_filter permite verificar si una variante espec\u00edfica tiene el estado de calidad \"PASS\" en el campo FILTER de datos VCF.</p>"},{"location":"api/Filters/pass_filter/#que-es-pass_filter","title":"\u00bfQu\u00e9 es pass_filter?","text":"<p>Es un m\u00e9todo que verifica si una variante espec\u00edfica (definida por cromosoma, posici\u00f3n, alelo de referencia y alelo alternativo) tiene el valor \"PASS\" en el campo FILTER, indicando que pas\u00f3 todos los filtros de calidad aplicados durante el proceso de llamada de variantes.</p>"},{"location":"api/Filters/pass_filter/#caracteristicas-principales","title":"Caracter\u00edsticas Principales","text":"<ul> <li>Verificaci\u00f3n espec\u00edfica: Busca una variante exacta por coordenadas y alelos</li> <li>Optimizaci\u00f3n con pyarrow: Utiliza pyarrow para consultas r\u00e1pidas cuando est\u00e1 disponible</li> <li>Fallback autom\u00e1tico: Si pyarrow falla, usa operaciones pandas est\u00e1ndar</li> <li>Normalizaci\u00f3n de cromosomas: Maneja diferentes formatos de nomenclatura cromos\u00f3mica</li> <li>Logging detallado: Proporciona informaci\u00f3n sobre el proceso de b\u00fasqueda</li> <li>Manejo de duplicados: Detecta y maneja registros duplicados</li> </ul>"},{"location":"api/Filters/pass_filter/#uso-basico","title":"Uso B\u00e1sico","text":"<pre><code>from pyMut.input import read_vcf\n\n# Cargar datos VCF\npy_mut = read_vcf(\"variants.vcf.gz\")\n\n# Verificar si una variante espec\u00edfica tiene FILTER=PASS\nis_pass = py_mut.pass_filter(\n    chrom=\"chr17\",\n    pos=7577121,\n    ref=\"C\",\n    alt=\"T\"\n)\n\nprint(f\"\u00bfLa variante pas\u00f3 los filtros de calidad? {is_pass}\")\n</code></pre>"},{"location":"api/Filters/pass_filter/#parametros","title":"Par\u00e1metros","text":""},{"location":"api/Filters/pass_filter/#chrom-str-requerido","title":"chrom (str) [requerido]","text":"<ul> <li>Descripci\u00f3n: Cromosoma de la variante a verificar</li> <li>Formatos aceptados: <code>\"chr17\"</code>, <code>\"17\"</code>, <code>\"X\"</code>, <code>\"Y\"</code>, <code>\"chrX\"</code>, <code>\"chrY\"</code></li> <li>Normalizaci\u00f3n: Se normaliza autom\u00e1ticamente al formato est\u00e1ndar</li> <li>Ejemplo: <code>\"chr17\"</code></li> </ul>"},{"location":"api/Filters/pass_filter/#pos-int-requerido","title":"pos (int) [requerido]","text":"<ul> <li>Descripci\u00f3n: Posici\u00f3n gen\u00f3mica de la variante</li> <li>Coordenadas: Basadas en 1 (est\u00e1ndar VCF)</li> <li>Ejemplo: <code>7577121</code></li> </ul>"},{"location":"api/Filters/pass_filter/#ref-str-requerido","title":"ref (str) [requerido]","text":"<ul> <li>Descripci\u00f3n: Alelo de referencia</li> <li>Formato: Secuencia de nucle\u00f3tidos (A, T, G, C, N, -)</li> <li>Ejemplo: <code>\"C\"</code></li> </ul>"},{"location":"api/Filters/pass_filter/#alt-str-requerido","title":"alt (str) [requerido]","text":"<ul> <li>Descripci\u00f3n: Alelo alternativo</li> <li>Formato: Secuencia de nucle\u00f3tidos (A, T, G, C, N, -)</li> <li>Ejemplo: <code>\"T\"</code></li> </ul>"},{"location":"api/Filters/pass_filter/#valor-de-retorno","title":"Valor de Retorno","text":"<p>Retorna un boolean: - True: La variante existe y tiene FILTER=\"PASS\" - False: La variante no existe o no tiene FILTER=\"PASS\"</p>"},{"location":"api/Filters/pass_filter/#ejemplos-detallados","title":"Ejemplos Detallados","text":""},{"location":"api/Filters/pass_filter/#verificacion-de-variantes-especificas","title":"Verificaci\u00f3n de Variantes Espec\u00edficas","text":"<pre><code>from pyMut.input import read_vcf\nimport logging\n\n# Configurar logging para ver detalles\nlogging.basicConfig(level=logging.INFO)\n\n# Cargar datos VCF\npy_mut = read_vcf(\"src/pyMut/data/examples/ALL.chr10.vcf.gz\")\n\n# Lista de variantes a verificar\nvariantes_interes = [\n    {\"chrom\": \"chr10\", \"pos\": 60523, \"ref\": \"T\", \"alt\": \"G\"},\n    {\"chrom\": \"10\", \"pos\": 60803, \"ref\": \"T\", \"alt\": \"C\"},\n    {\"chrom\": \"chr10\", \"pos\": 61023, \"ref\": \"C\", \"alt\": \"T\"},\n]\n\nprint(\"=== Verificaci\u00f3n de Calidad de Variantes ===\")\nfor i, var in enumerate(variantes_interes, 1):\n    print(f\"\\nVariante {i}: {var['chrom']}:{var['pos']} {var['ref']}&gt;{var['alt']}\")\n\n    try:\n        is_pass = py_mut.pass_filter(\n            chrom=var['chrom'],\n            pos=var['pos'],\n            ref=var['ref'],\n            alt=var['alt']\n        )\n\n        status = \"\u2705 PASS\" if is_pass else \"\u274c NO PASS\"\n        print(f\"Estado de calidad: {status}\")\n\n    except Exception as e:\n        print(f\"\u274c Error: {e}\")\n</code></pre>"},{"location":"api/Filters/pass_filter/#verificacion-masiva-de-variantes","title":"Verificaci\u00f3n Masiva de Variantes","text":"<pre><code># Verificar m\u00faltiples variantes de una lista\ndef verificar_calidad_variantes(py_mut, lista_variantes):\n    \"\"\"\n    Verifica la calidad de una lista de variantes\n    \"\"\"\n    resultados = []\n\n    for var in lista_variantes:\n        try:\n            is_pass = py_mut.pass_filter(\n                chrom=var['chrom'],\n                pos=var['pos'],\n                ref=var['ref'],\n                alt=var['alt']\n            )\n\n            resultados.append({\n                'variante': f\"{var['chrom']}:{var['pos']} {var['ref']}&gt;{var['alt']}\",\n                'pass_filter': is_pass,\n                'status': 'success'\n            })\n\n        except Exception as e:\n            resultados.append({\n                'variante': f\"{var['chrom']}:{var['pos']} {var['ref']}&gt;{var['alt']}\",\n                'pass_filter': False,\n                'status': f'error: {e}'\n            })\n\n    return resultados\n\n# Ejemplo de uso\nvariantes_candidatas = [\n    {\"chrom\": \"chr10\", \"pos\": 60523, \"ref\": \"T\", \"alt\": \"G\"},\n    {\"chrom\": \"chr10\", \"pos\": 60803, \"ref\": \"T\", \"alt\": \"C\"},\n    {\"chrom\": \"chr10\", \"pos\": 61023, \"ref\": \"C\", \"alt\": \"T\"},\n]\n\nresultados = verificar_calidad_variantes(py_mut, variantes_candidatas)\n\n# Mostrar resultados\nprint(\"\\n=== Resumen de Verificaci\u00f3n ===\")\nfor resultado in resultados:\n    print(f\"{resultado['variante']}: {resultado['pass_filter']} ({resultado['status']})\")\n</code></pre>"},{"location":"api/Filters/pass_filter/#optimizacion-con-pyarrow","title":"Optimizaci\u00f3n con PyArrow","text":"<pre><code># El m\u00e9todo utiliza pyarrow autom\u00e1ticamente para mejor rendimiento\ntry:\n    # Conversi\u00f3n autom\u00e1tica a tipos pyarrow para optimizaci\u00f3n\n    is_pass = py_mut.pass_filter(\"chr10\", 60523, \"T\", \"G\")\n    print(\"\u2705 Verificaci\u00f3n optimizada con pyarrow\")\nexcept ImportError:\n    print(\"\u26a0\ufe0f pyarrow no disponible, usando pandas est\u00e1ndar\")\nexcept Exception as e:\n    print(f\"\u26a0\ufe0f pyarrow fall\u00f3 ({e}), usando pandas est\u00e1ndar\")\n</code></pre>"},{"location":"api/Filters/pass_filter/#manejo-de-diferentes-formatos-de-cromosoma","title":"Manejo de Diferentes Formatos de Cromosoma","text":"<pre><code># El m\u00e9todo normaliza autom\u00e1ticamente los formatos de cromosoma\nvariante_chr = py_mut.pass_filter(\"chr10\", 60523, \"T\", \"G\")\nvariante_num = py_mut.pass_filter(\"10\", 60523, \"T\", \"G\")\n\n# Ambas consultas son equivalentes\nprint(f\"Con 'chr10': {variante_chr}\")\nprint(f\"Con '10': {variante_num}\")\nprint(f\"\u00bfSon iguales? {variante_chr == variante_num}\")\n</code></pre>"},{"location":"api/Filters/pass_filter/#casos-de-uso-comunes","title":"Casos de Uso Comunes","text":""},{"location":"api/Filters/pass_filter/#validacion-de-variantes-de-interes","title":"Validaci\u00f3n de Variantes de Inter\u00e9s","text":"<pre><code># Verificar variantes reportadas en literatura\nvariantes_literatura = [\n    # Variante en TP53 reportada como patog\u00e9nica\n    {\"chrom\": \"chr17\", \"pos\": 7577121, \"ref\": \"C\", \"alt\": \"T\"},\n    # Variante en BRCA1 de significado cl\u00ednico\n    {\"chrom\": \"chr17\", \"pos\": 43094077, \"ref\": \"A\", \"alt\": \"C\"},\n]\n\nprint(\"=== Validaci\u00f3n de Variantes de Literatura ===\")\nfor var in variantes_literatura:\n    is_pass = py_mut.pass_filter(\n        chrom=var['chrom'],\n        pos=var['pos'],\n        ref=var['ref'],\n        alt=var['alt']\n    )\n\n    if is_pass:\n        print(f\"\u2705 {var['chrom']}:{var['pos']} {var['ref']}&gt;{var['alt']} - Calidad PASS\")\n    else:\n        print(f\"\u26a0\ufe0f {var['chrom']}:{var['pos']} {var['ref']}&gt;{var['alt']} - No PASS o no encontrada\")\n</code></pre>"},{"location":"api/Filters/pass_filter/#control-de-calidad-en-pipeline","title":"Control de Calidad en Pipeline","text":"<pre><code>def filtrar_variantes_alta_calidad(py_mut, lista_variantes):\n    \"\"\"\n    Filtra variantes que pasan los controles de calidad\n    \"\"\"\n    variantes_pass = []\n    variantes_fail = []\n\n    for var in lista_variantes:\n        is_pass = py_mut.pass_filter(\n            chrom=var['chrom'],\n            pos=var['pos'],\n            ref=var['ref'],\n            alt=var['alt']\n        )\n\n        if is_pass:\n            variantes_pass.append(var)\n        else:\n            variantes_fail.append(var)\n\n    return variantes_pass, variantes_fail\n\n# Ejemplo de uso en pipeline\ntodas_variantes = [\n    {\"chrom\": \"chr10\", \"pos\": 60523, \"ref\": \"T\", \"alt\": \"G\"},\n    {\"chrom\": \"chr10\", \"pos\": 60803, \"ref\": \"T\", \"alt\": \"C\"},\n    {\"chrom\": \"chr10\", \"pos\": 61023, \"ref\": \"C\", \"alt\": \"T\"},\n]\n\npass_vars, fail_vars = filtrar_variantes_alta_calidad(py_mut, todas_variantes)\n\nprint(f\"Variantes que pasan filtros: {len(pass_vars)}\")\nprint(f\"Variantes que fallan filtros: {len(fail_vars)}\")\n</code></pre>"},{"location":"api/Filters/pass_filter/#analisis-de-calidad-por-region","title":"An\u00e1lisis de Calidad por Regi\u00f3n","text":"<pre><code># Verificar calidad de variantes en una regi\u00f3n espec\u00edfica\ndef analizar_calidad_region(py_mut, chrom, start, end):\n    \"\"\"\n    Analiza la calidad de variantes en una regi\u00f3n gen\u00f3mica\n    \"\"\"\n    # Primero filtrar por regi\u00f3n\n    region_data = py_mut.region(chrom, start, end)\n\n    if len(region_data.data) == 0:\n        print(f\"No hay variantes en {chrom}:{start}-{end}\")\n        return\n\n    # Verificar calidad de cada variante en la regi\u00f3n\n    total_variantes = 0\n    pass_variantes = 0\n\n    for _, row in region_data.data.iterrows():\n        total_variantes += 1\n\n        is_pass = py_mut.pass_filter(\n            chrom=row['CHROM'],\n            pos=row['POS'],\n            ref=row['REF'],\n            alt=row['ALT']\n        )\n\n        if is_pass:\n            pass_variantes += 1\n\n    porcentaje_pass = (pass_variantes / total_variantes) * 100\n\n    print(f\"=== An\u00e1lisis de Calidad: {chrom}:{start}-{end} ===\")\n    print(f\"Total de variantes: {total_variantes}\")\n    print(f\"Variantes PASS: {pass_variantes}\")\n    print(f\"Porcentaje PASS: {porcentaje_pass:.1f}%\")\n\n# Ejemplo de uso\nanalizar_calidad_region(py_mut, \"chr10\", 60000, 70000)\n</code></pre>"},{"location":"api/Filters/pass_filter/#manejo-de-errores","title":"Manejo de Errores","text":""},{"location":"api/Filters/pass_filter/#variante-no-encontrada","title":"Variante no encontrada","text":"<pre><code>try:\n    # Buscar variante que probablemente no existe\n    is_pass = py_mut.pass_filter(\"chr99\", 999999999, \"A\", \"T\")\n    print(f\"Resultado: {is_pass}\")  # Ser\u00e1 False\nexcept KeyError as e:\n    print(f\"\u274c Error de columnas: {e}\")\n</code></pre>"},{"location":"api/Filters/pass_filter/#datos-malformados","title":"Datos malformados","text":"<pre><code>try:\n    # Verificar con datos inv\u00e1lidos\n    is_pass = py_mut.pass_filter(\"chr10\", \"invalid_pos\", \"A\", \"T\")\nexcept (ValueError, TypeError) as e:\n    print(f\"\u274c Error en formato de datos: {e}\")\n</code></pre>"},{"location":"api/Filters/pass_filter/#columnas-faltantes","title":"Columnas faltantes","text":"<pre><code># El m\u00e9todo verifica autom\u00e1ticamente las columnas requeridas\nrequired_columns = [\"CHROM\", \"POS\", \"REF\", \"ALT\", \"FILTER\"]\n\n# Si faltan columnas, se lanza KeyError con informaci\u00f3n detallada\ntry:\n    is_pass = py_mut.pass_filter(\"chr10\", 60523, \"T\", \"G\")\nexcept KeyError as e:\n    print(f\"\u274c Columnas faltantes: {e}\")\n</code></pre>"},{"location":"api/Filters/pass_filter/#rendimiento-y-optimizacion","title":"Rendimiento y Optimizaci\u00f3n","text":""},{"location":"api/Filters/pass_filter/#para-consultas-multiples","title":"Para consultas m\u00faltiples","text":"<pre><code>import time\n\n# Medir rendimiento de consultas m\u00faltiples\nvariantes_test = [\n    {\"chrom\": \"chr10\", \"pos\": 60523, \"ref\": \"T\", \"alt\": \"G\"},\n    {\"chrom\": \"chr10\", \"pos\": 60803, \"ref\": \"T\", \"alt\": \"C\"},\n    {\"chrom\": \"chr10\", \"pos\": 61023, \"ref\": \"C\", \"alt\": \"T\"},\n] * 100  # Repetir 100 veces para test de rendimiento\n\nstart_time = time.time()\n\nresultados = []\nfor var in variantes_test:\n    is_pass = py_mut.pass_filter(\n        chrom=var['chrom'],\n        pos=var['pos'],\n        ref=var['ref'],\n        alt=var['alt']\n    )\n    resultados.append(is_pass)\n\nend_time = time.time()\n\nprint(f\"Verificadas {len(variantes_test)} variantes en {end_time - start_time:.2f} segundos\")\nprint(f\"Promedio: {(end_time - start_time) / len(variantes_test) * 1000:.2f} ms por variante\")\n</code></pre>"},{"location":"api/Filters/pass_filter/#optimizacion-de-memoria","title":"Optimizaci\u00f3n de memoria","text":"<pre><code># Para datasets muy grandes, considerar filtrar primero por regi\u00f3n\n# antes de verificar variantes espec\u00edficas\n\n# Menos eficiente: buscar en todo el dataset\nis_pass = py_mut.pass_filter(\"chr10\", 60523, \"T\", \"G\")\n\n# M\u00e1s eficiente: filtrar regi\u00f3n primero, luego buscar\nregion_subset = py_mut.region(\"chr10\", 60000, 61000)\nis_pass = region_subset.pass_filter(\"chr10\", 60523, \"T\", \"G\")\n</code></pre>"},{"location":"api/Filters/tissue_expression_filter/","title":"Tissue Expression Filter","text":"<p>The filter_by_tissue_expression method allows filtering mutation data based on gene expression in specific tissues using cancer RNA consensus data.</p>"},{"location":"api/Filters/tissue_expression_filter/#what-is-the-tissue-expression-filter","title":"What is the Tissue Expression Filter?","text":"<p>This filter allows identifying and filtering mutations in genes that are sufficiently expressed (or not expressed) in specific tissues/cancer types. It uses cancer RNA consensus data to determine if a gene is \"active\" in a particular tissue according to a defined expression threshold.</p>"},{"location":"api/Filters/tissue_expression_filter/#main-features","title":"Main Features","text":"<ul> <li>Multi-tissue filtering: Allows specifying multiple tissues with independent thresholds</li> <li>Automatic column detection: Automatically identifies gene symbol columns</li> <li>Smart caching: Expression data is loaded once and kept in cache</li> <li>Bidirectional filtering: Can filter expressed or non-expressed genes</li> <li>TCGA codes: Uses standard TCGA codes for cancer types</li> <li>Robust validation: Complete validation of input parameters</li> </ul>"},{"location":"api/Filters/tissue_expression_filter/#basic-usage","title":"Basic Usage","text":"<pre><code>from pyMut.io import read_maf\n\n# Load data\npy_mut = read_maf(\"mutations.maf\")\n\n# Filter genes expressed in bladder cancer (threshold 5)\nfiltered_mut = py_mut.filter_by_tissue_expression([('BLCA', 5)])\n\n# Filter genes NOT expressed in lung adenocarcinoma\nnot_expressed_mut = py_mut.filter_by_tissue_expression(\n    [('LUAD', 4)], \n    keep_expressed=False\n)\n\n# Filter genes expressed in multiple tissues with different thresholds\nmulti_tissue_mut = py_mut.filter_by_tissue_expression([\n    ('BLCA', 5),    # Bladder cancer, threshold 5\n    ('BRCA', 3),    # Breast cancer, threshold 3\n    ('LUAD', 4),    # Lung adenocarcinoma, threshold 4\n    ('COAD', 6)     # Colon adenocarcinoma, threshold 6\n])\n\nprint(f\"Original mutations: {len(py_mut.data)}\")\nprint(f\"Filtered mutations: {len(filtered_mut.data)}\")\n</code></pre>"},{"location":"api/Filters/tissue_expression_filter/#parameters","title":"Parameters","text":""},{"location":"api/Filters/tissue_expression_filter/#tissues-listtuplestr-float-required","title":"tissues (List[Tuple[str, float]], required)","text":"<ul> <li>Description: List of tuples with tissue and threshold specifications</li> <li>Format: <code>[('tissue_code', threshold), ...]</code></li> <li>TCGA Codes: Uses standard codes like 'BLCA', 'BRCA', 'LUAD', etc.</li> <li>Example: <code>[('BLCA', 5), ('BRCA', 3)]</code></li> </ul>"},{"location":"api/Filters/tissue_expression_filter/#keep_expressed-bool-defaulttrue","title":"keep_expressed (bool, default=True)","text":"<ul> <li>Description: Determines which mutations to keep</li> <li>True: Keeps genes expressed in at least one of the specified tissues</li> <li>False: Keeps genes NOT expressed in any of the specified tissues</li> </ul>"},{"location":"api/Filters/tissue_expression_filter/#return-value","title":"Return Value","text":"<p>Returns a new PyMutation object with data filtered according to the specified tissue expression criteria.</p> <pre><code># The returned object maintains the same structure\nfiltered_mut = py_mut.filter_by_tissue_expression([('BLCA', 5)])\nprint(type(filtered_mut))  # &lt;class 'pyMut.core.PyMutation'&gt;\n</code></pre>"},{"location":"api/Filters/tissue_expression_filter/#supported-tcga-tissue-codes","title":"Supported TCGA Tissue Codes","text":"<p>The filter uses standard TCGA codes for different cancer types:</p> <pre><code># Examples of common TCGA codes\ntissue_codes = {\n    'BLCA': 'Bladder Urothelial Carcinoma',\n    'BRCA': 'Breast Invasive Carcinoma', \n    'COAD': 'Colon Adenocarcinoma',\n    'LUAD': 'Lung Adenocarcinoma',\n    'LUSC': 'Lung Squamous Cell Carcinoma',\n    'PRAD': 'Prostate Adenocarcinoma',\n    'THCA': 'Thyroid Carcinoma',\n    'LIHC': 'Liver Hepatocellular Carcinoma',\n    'STAD': 'Stomach Adenocarcinoma',\n    'SKCM': 'Skin Cutaneous Melanoma'\n    # ... and many more\n}\n</code></pre>"},{"location":"api/Filters/tissue_expression_filter/#helper-function-tissue_expression","title":"Helper Function: tissue_expression","text":"<p>In addition to the filtering method, the <code>tissue_expression</code> helper function is available for individual checks:</p> <pre><code>from pyMut.filters.tissue_expression import tissue_expression\nimport pandas as pd\n\n# Check expression using gene symbol directly\nis_expressed = tissue_expression(\"TSPAN6\", [\"BLCA\", 5])\nprint(f\"TSPAN6 expressed in BLCA (threshold 5): {is_expressed}\")\n\n# Check expression using a data row\nrow = pd.Series({'Hugo_Symbol': 'TSPAN6', 'Chromosome': 'X'})\nis_expressed = tissue_expression(row, [\"BRCA\", 10])\nprint(f\"TSPAN6 expressed in BRCA (threshold 10): {is_expressed}\")\n</code></pre>"},{"location":"api/Filters/tissue_expression_filter/#tissue_expression-parameters","title":"tissue_expression Parameters","text":"<ul> <li>data: <code>Union[str, pd.Series]</code> - Gene symbol or data row</li> <li>tissue: <code>List[Union[str, float]]</code> - <code>[tissue_code, threshold]</code></li> </ul>"},{"location":"api/Filters/tissue_expression_filter/#advanced-examples","title":"Advanced Examples","text":""},{"location":"api/Filters/tissue_expression_filter/#conditional-filtering-by-cancer-type","title":"Conditional Filtering by Cancer Type","text":"<pre><code># Filter mutations relevant to breast cancer\nbreast_cancer_mut = py_mut.filter_by_tissue_expression([\n    ('BRCA', 5)  # Genes expressed in breast cancer\n])\n\n# Filter silenced genes in lung cancer\nlung_silenced_mut = py_mut.filter_by_tissue_expression([\n    ('LUAD', 3),\n    ('LUSC', 3)\n], keep_expressed=False)\n</code></pre>"},{"location":"api/Filters/tissue_expression_filter/#multi-tissue-analysis","title":"Multi-Tissue Analysis","text":"<pre><code># Genes expressed in at least one of multiple digestive cancers\ndigestive_cancers_mut = py_mut.filter_by_tissue_expression([\n    ('COAD', 4),    # Colon\n    ('STAD', 4),    # Stomach  \n    ('LIHC', 5),    # Liver\n    ('PAAD', 6)     # Pancreas\n])\n\nprint(f\"Mutations in genes expressed in digestive cancers: {len(digestive_cancers_mut.data)}\")\n</code></pre>"},{"location":"api/Filters/tissue_expression_filter/#combination-with-other-filters","title":"Combination with Other Filters","text":"<pre><code># Combine tissue expression filter with other filters\nfiltered_mut = (py_mut\n    .filter_by_tissue_expression([('BRCA', 5)])\n    .filter_by_pass()\n    .filter_by_chromosome(['1', '2', '3']))\n\nprint(f\"Mutations after combined filters: {len(filtered_mut.data)}\")\n</code></pre>"},{"location":"api/Filters/tissue_expression_filter/#error-handling","title":"Error Handling","text":"<p>The method includes robust validation and error handling:</p> <pre><code>try:\n    # Error: empty list\n    py_mut.filter_by_tissue_expression([])\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n\ntry:\n    # Error: incorrect tuple format\n    py_mut.filter_by_tissue_expression([('BLCA', 5, 'extra')])\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n\ntry:\n    # Error: tissue code is not string\n    py_mut.filter_by_tissue_expression([(123, 5)])\nexcept ValueError as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"api/Filters/tissue_expression_filter/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Caching: Expression data is loaded once and kept in cache</li> <li>Memory: Filtering creates a copy of the data, does not modify the original object</li> <li>Scalability: Efficient for large datasets thanks to smart caching</li> </ul>"},{"location":"api/Filters/tissue_expression_filter/#common-use-cases","title":"Common Use Cases","text":"<ol> <li>Cancer-specific analysis: Filter mutations relevant to a specific cancer type</li> <li>Silenced genes: Identify mutations in non-expressed genes (potential tumor suppressors)</li> <li>Comparative analysis: Compare mutation patterns between different cancer types</li> <li>Variant prioritization: Focus analysis on genes active in relevant tissues</li> </ol>"},{"location":"api/Filters/tissue_expression_filter/#technical-notes","title":"Technical Notes","text":"<ul> <li>Expression data comes from <code>rna_cancer_consensus.json</code></li> <li>Automatically detects columns like 'Hugo_Symbol', 'Gene_Symbol', etc.</li> <li>Filtering preserves all metadata from the original PyMutation object</li> <li>Compatible with MAF format data and converted VCF</li> </ul>"},{"location":"api/Visualization/summary_plot/","title":"Summary Plot - Complete Mutation Analysis","text":"<p>El Summary Plot es la visualizaci\u00f3n principal de pyMut que combina m\u00faltiples an\u00e1lisis de mutaciones en una sola figura comprehensiva.</p>"},{"location":"api/Visualization/summary_plot/#que-es-el-summary-plot","title":"\u00bfQu\u00e9 es el Summary Plot?","text":"<p>Es un panel que incluye 6 visualizaciones diferentes en una sola figura:</p> <ol> <li>Variant Classification - Distribuci\u00f3n de tipos de mutaci\u00f3n (Missense, Nonsense, etc.)</li> <li>Variant Type - Distribuci\u00f3n de tipos de variante (SNP, INS, DEL, etc.)  </li> <li>SNV Class - Distribuci\u00f3n de cambios nucleot\u00eddicos (A&gt;G, C&gt;T, etc.)</li> <li>Variants per Sample (TMB) - N\u00famero de mutaciones por muestra con l\u00ednea de mediana</li> <li>Variant Classification Summary - Boxplot de clasificaciones por muestra</li> <li>Top Mutated Genes - Genes m\u00e1s frecuentemente mutados</li> </ol>"},{"location":"api/Visualization/summary_plot/#uso-basico","title":"Uso B\u00e1sico","text":"<pre><code>from pyMut import PyMutation\nimport pandas as pd\n\n# Paso 1: Configurar alta calidad (recomendado)\nPyMutation.configure_high_quality_plots()\n\n# Paso 2: Cargar datos y crear objeto\ndata = pd.read_csv(\"mutations.tsv\", sep='\\t')\npy_mut = PyMutation(data)\n\n# Paso 3: Generar summary plot\nfig = py_mut.summary_plot()\n\n# Paso 4: Guardar figura (autom\u00e1ticamente alta calidad)\nfig.savefig(\"summary_plot.png\")\n</code></pre>"},{"location":"api/Visualization/summary_plot/#personalizacion-avanzada","title":"Personalizaci\u00f3n Avanzada","text":""},{"location":"api/Visualization/summary_plot/#parametros-principales","title":"Par\u00e1metros principales","text":"<pre><code>fig = py_mut.summary_plot(\n    title=\"Mi An\u00e1lisis de Mutaciones\",    # T\u00edtulo personalizado\n    figsize=(18, 14),                     # Tama\u00f1o de figura (m\u00e1s grande)\n    max_samples=100,                      # M\u00e1ximo muestras en TMB plot\n    top_genes_count=10                    # N\u00famero de genes top a mostrar\n)\n</code></pre>"},{"location":"api/Visualization/summary_plot/#control-de-rendimiento-para-datasets-grandes","title":"Control de rendimiento para datasets grandes","text":"<pre><code># Para datasets con muchas muestras\nfig = py_mut.summary_plot(\n    max_samples=50,        # Limita el TMB plot a 50 muestras\n    top_genes_count=10     # Muestra solo los 10 genes m\u00e1s mutados\n)\n\n# Para figuras m\u00e1s grandes y detalladas\nfig = py_mut.summary_plot(\n    figsize=(20, 16),      # Figura muy grande para publicaciones\n    top_genes_count=20     # M\u00e1s genes para an\u00e1lisis detallado\n)\n</code></pre>"},{"location":"api/Visualization/summary_plot/#guardar-en-diferentes-formatos","title":"Guardar en diferentes formatos","text":"<pre><code># PNG para presentaciones (por defecto)\nfig.savefig(\"summary.png\")\n\n# PDF para publicaciones cient\u00edficas\nfig.savefig(\"summary.pdf\")\n\n# SVG para edici\u00f3n vectorial\nfig.savefig(\"summary.svg\")\n\n# Ultra alta calidad para impresi\u00f3n\npy_mut.save_figure(fig, \"summary_ultra.png\", dpi=600)\n</code></pre>"},{"location":"api/Visualization/summary_plot/#formato-de-datos","title":"Formato de Datos","text":"<p>pyMut funciona con datos en formato largo (recomendado):</p> <pre><code>Hugo_Symbol | Variant_Classification | Tumor_Sample_Barcode | REF | ALT\nGENE1      | Missense_Mutation      | SAMPLE_001          | A   | G\nGENE2      | Nonsense_Mutation      | SAMPLE_001          | C   | T\n</code></pre> <p>Columnas requeridas: - <code>Hugo_Symbol</code> - S\u00edmbolo del gen - <code>Variant_Classification</code> - Tipo de mutaci\u00f3n</p> <p>Columnas opcionales pero recomendadas: - <code>Tumor_Sample_Barcode</code> - Identificador de muestra - <code>REF</code> / <code>ALT</code> - Alelos de referencia y alternativo</p>"},{"location":"api/Visualization/summary_plot/#soporte-para-formato-tcga-ancho","title":"Soporte para formato TCGA (ancho)","text":"<pre><code># pyMut detecta autom\u00e1ticamente columnas de muestras TCGA\n# Ejemplo: TCGA-AB-2001, TCGA-AB-2002, etc.\n# Se procesan autom\u00e1ticamente sin configuraci\u00f3n adicional\n</code></pre>"},{"location":"api/Visualization/summary_plot/#interpretacion-de-resultados","title":"Interpretaci\u00f3n de Resultados","text":""},{"location":"api/Visualization/summary_plot/#variant-classification","title":"Variant Classification","text":"<ul> <li>Missense_Mutation: Cambia amino\u00e1cido (potencialmente funcional)</li> <li>Silent: No cambia amino\u00e1cido (generalmente neutral)</li> <li>Nonsense_Mutation: Crea cod\u00f3n de parada (muy impactante)</li> <li>Frame_Shift_Del/Ins: Cambia marco de lectura (muy impactante)</li> <li>Splice_Site: Afecta empalme de RNA (potencialmente impactante)</li> </ul>"},{"location":"api/Visualization/summary_plot/#tmb-plot-tumor-mutation-burden","title":"TMB Plot (Tumor Mutation Burden)","text":"<ul> <li>Altura de barras: N\u00famero total de mutaciones por muestra</li> <li>Colores en barras: Composici\u00f3n por tipos de mutaci\u00f3n</li> <li>L\u00ednea roja: Mediana de todas las muestras</li> <li>Utilidad: Identificar muestras con alta carga mutacional</li> </ul>"},{"location":"api/Visualization/summary_plot/#variant-classification-summary-boxplot","title":"Variant Classification Summary (Boxplot)","text":"<ul> <li>Cajas: Distribuci\u00f3n de cada tipo de mutaci\u00f3n entre muestras</li> <li>L\u00ednea central: Mediana del tipo de mutaci\u00f3n</li> <li>Whiskers: Rango de valores t\u00edpicos</li> <li>Puntos: Muestras at\u00edpicas (outliers)</li> </ul>"},{"location":"api/Visualization/summary_plot/#top-genes","title":"Top Genes","text":"<ul> <li>Modo \"variants\": Genes con m\u00e1s mutaciones totales</li> <li>Modo \"samples\": Genes mutados en m\u00e1s muestras (prevalencia)</li> <li>Utilidad: Identificar posibles genes driver o hotspots</li> </ul>"},{"location":"api/Visualization/summary_plot/#caracteristicas-tecnicas","title":"Caracter\u00edsticas T\u00e9cnicas","text":""},{"location":"api/Visualization/summary_plot/#consistencia-de-colores","title":"Consistencia de colores","text":"<ul> <li>Mapeo de colores coherente entre todas las subgr\u00e1ficas</li> <li>Leyenda unificada en la parte inferior</li> <li>Ordenamiento por frecuencia de mutaciones</li> </ul>"},{"location":"api/Visualization/summary_plot/#gestion-de-memoria","title":"Gesti\u00f3n de memoria","text":"<ul> <li>Procesamiento optimizado para datasets grandes</li> <li>Par\u00e1metro <code>max_samples</code> para limitar uso de memoria</li> <li>Detecci\u00f3n autom\u00e1tica de formato de datos</li> </ul>"},{"location":"api/Visualization/summary_plot/#calidad-de-imagen","title":"Calidad de imagen","text":"<ul> <li>DPI 300 por defecto con <code>configure_high_quality_plots()</code></li> <li>M\u00e1rgenes optimizados autom\u00e1ticamente</li> <li>Soporte para m\u00faltiples formatos vectoriales</li> </ul>"},{"location":"api/Visualization/summary_plot/#ejemplo-completo-con-datos-tcga","title":"Ejemplo Completo con Datos TCGA","text":"<pre><code>import pandas as pd\nfrom pyMut import PyMutation\n\n# Cargar datos de ejemplo TCGA-LAML\ndata = pd.read_csv(\"src/pyMut/data/examples/tcga_laml_converted.tsv\", sep='\\t')\n\n# Crear an\u00e1lisis\npy_mut = PyMutation(data)\n\n# Configurar alta calidad\nPyMutation.configure_high_quality_plots()\n\n# Generar summary plot personalizado para publicaci\u00f3n\nsummary_fig = py_mut.summary_plot(\n    title=\"TCGA-LAML Mutation Landscape Analysis\",\n    figsize=(20, 16),           # Figura grande para publicaci\u00f3n\n    max_samples=150,            # Mostrar hasta 150 muestras\n    top_genes_count=20          # Top 20 genes m\u00e1s mutados\n)\n\n# Guardar en m\u00faltiples formatos\nsummary_fig.savefig(\"tcga_laml_summary.png\")      # PNG alta calidad\nsummary_fig.savefig(\"tcga_laml_summary.pdf\")      # PDF para publicaci\u00f3n\nsummary_fig.savefig(\"tcga_laml_summary.svg\")      # SVG para edici\u00f3n\n\nprint(\"\u2705 Summary plot generado exitosamente!\")\n</code></pre>"},{"location":"api/Visualization/summary_plot/#solucion-de-problemas","title":"Soluci\u00f3n de Problemas","text":""},{"location":"api/Visualization/summary_plot/#datos-vacios-o-graficos-inesperados","title":"Datos vac\u00edos o gr\u00e1ficos inesperados","text":"<pre><code># Verificar estructura de datos\nprint(f\"Forma de datos: {data.shape}\")\nprint(f\"Columnas: {data.columns.tolist()}\")\nprint(f\"Clasificaciones \u00fanicas: {data['Variant_Classification'].value_counts()}\")\nprint(f\"Genes \u00fanicos: {data['Hugo_Symbol'].nunique()}\")\n</code></pre>"},{"location":"api/Visualization/summary_plot/#demasiadas-muestras-en-tmb-plot","title":"Demasiadas muestras en TMB plot","text":"<pre><code># Limitar n\u00famero de muestras mostradas\nfig = py_mut.summary_plot(max_samples=50)\n\n# O verificar n\u00famero de muestras primero\nn_samples = data['Tumor_Sample_Barcode'].nunique()\nprint(f\"Total de muestras: {n_samples}\")\n</code></pre>"},{"location":"api/Visualization/summary_plot/#imagenes-de-baja-calidad","title":"Im\u00e1genes de baja calidad","text":"<pre><code># Siempre configurar alta calidad al inicio\nPyMutation.configure_high_quality_plots()\n\n# O manualmente para un caso espec\u00edfico\nfig.savefig(\"plot.png\", dpi=300, bbox_inches='tight')\n</code></pre>"},{"location":"api/Visualization/summary_plot/#rendimiento-con-datasets-grandes","title":"Rendimiento con datasets grandes","text":"<pre><code># Filtrar datos antes de crear el plot\nfiltered_data = data[data['Variant_Classification'].isin([\n    'Missense_Mutation', 'Nonsense_Mutation', 'Frame_Shift_Del'\n])]\npy_mut = PyMutation(filtered_data)\n\n# O usar par\u00e1metros de rendimiento\nfig = py_mut.summary_plot(\n    max_samples=100,       # Limitar muestras\n    top_genes_count=10     # Limitar genes\n)\n</code></pre>"},{"location":"examples/analysis/domains_pfam/","title":"PFAM Annotation Module","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\n\n# Import pyMut\nfrom pyMut import read_maf\nfrom pyMut.utils.database import build_embedded_db, connect_db\n\n# Load example data\nmaf_file = \"../../../src/pyMut/data/examples/MAF/tcga_laml_VEP_annotated.maf.gz\"\nmaf_data = read_maf(maf_file,assembly=\"37\")\n\n# Configure PFAM database\ntry:\n    build_embedded_db(force_rebuild=False)\nexcept:\n    pass\n</pre> import matplotlib.pyplot as plt  # Import pyMut from pyMut import read_maf from pyMut.utils.database import build_embedded_db, connect_db  # Load example data maf_file = \"../../../src/pyMut/data/examples/MAF/tcga_laml_VEP_annotated.maf.gz\" maf_data = read_maf(maf_file,assembly=\"37\")  # Configure PFAM database try:     build_embedded_db(force_rebuild=False) except:     pass  <pre>2025-08-01 01:11:46,272 | INFO | pyMut.input | Starting MAF reading: ../../../src/pyMut/data/examples/MAF/tcga_laml_VEP_annotated.maf.gz\n2025-08-01 01:11:46,273 | INFO | pyMut.input | Loading from cache: ../../../src/pyMut/data/examples/MAF/.pymut_cache/tcga_laml_VEP_annotated.maf_d6a2449e9d8817c9.parquet\n2025-08-01 01:11:46,304 | INFO | pyMut.input | Cache loaded successfully in 0.03 seconds\n</pre> <pre>\u2705 Database already exists at /home/luisruimore/Escritorio/TFG/src/pyMut/data/resources/data.duckdb\n</pre> In\u00a0[2]: Copied! <pre># Annotate variants with PFAM domains\nmaf_data = maf_data.annotate_pfam()\n\n# Show annotation examples\nif 'pfam_id' in maf_data.data.columns:\n    pfam_examples = maf_data.data[\n        maf_data.data['pfam_id'].notna()\n    ][['Hugo_Symbol', 'Protein_Change', 'uniprot', 'aa_pos', 'pfam_id', 'pfam_name']].head(10)\n    display(pfam_examples)\n</pre> # Annotate variants with PFAM domains maf_data = maf_data.annotate_pfam()  # Show annotation examples if 'pfam_id' in maf_data.data.columns:     pfam_examples = maf_data.data[         maf_data.data['pfam_id'].notna()     ][['Hugo_Symbol', 'Protein_Change', 'uniprot', 'aa_pos', 'pfam_id', 'pfam_name']].head(10)     display(pfam_examples)  <pre>2025-08-01 01:11:52,254 | INFO | pyMut.analysis.pfam_annotation | UniProt resolution summary:\n2025-08-01 01:11:52,254 | INFO | pyMut.analysis.pfam_annotation |    Total identifiers processed: 676\n2025-08-01 01:11:52,255 | INFO | pyMut.analysis.pfam_annotation |    Direct accessions: 669\n2025-08-01 01:11:52,255 | INFO | pyMut.analysis.pfam_annotation |    Resolved via short_name: 0\n2025-08-01 01:11:52,255 | INFO | pyMut.analysis.pfam_annotation |    Resolved via external ID: 0\n2025-08-01 01:11:52,256 | INFO | pyMut.analysis.pfam_annotation |    Unresolved: 7\n2025-08-01 01:11:52,854 | INFO | pyMut.analysis.pfam_annotation | Variantes anotadas con PFAM: 317/775\n2025-08-01 01:11:53,007 | INFO | pyMut.analysis.pfam_annotation | \nFinal annotation summary:\n2025-08-01 01:11:53,007 | INFO | pyMut.analysis.pfam_annotation |    Total variants processed: 2,091\n2025-08-01 01:11:53,008 | INFO | pyMut.analysis.pfam_annotation |    UniProt identifiers resolved: 669/676\n2025-08-01 01:11:53,008 | INFO | pyMut.analysis.pfam_annotation |    Variants with PFAM annotations: 317\n</pre> Hugo_Symbol Protein_Change uniprot aa_pos pfam_id pfam_name 0 KIAA1529 p.T431T None 431.0 PF00004 PF00004 1 KIAA1529 p.R581H Q9BS26 581.0 PF00102 PF00102 2 TBC1D2 p.L593R None 593.0 PF00102 PF00102 3 LPPR1 p.T325I None 325.0 PF00581 PF00581 4 BAAT p.T376M O95347 376.0 PF00667 PF00667 5 FKTN &lt;NA&gt; None NaN PF01112 PF01112 6 ZNF462 p.R1680C Q9Y2D5 1680.0 PF01821 PF01821 7 ACTL7A p.G426R None 426.0 PF02221 PF02221 8 UGCG p.Y47Y A0A1B0GUV7 47.0 PF06327 PF06327 9 C9orf43 p.T181A Q13219 181.0 PF13087 PF13087 In\u00a0[3]: Copied! <pre># Summary by PFAM domain\npfam_summary = maf_data.pfam_domains(\n    summarize_by='PfamDomain',\n    top_n=10,\n    include_synonymous=False\n)\n\nif not pfam_summary.empty:\n    display(pfam_summary)\n\n    # Visualization\n    plt.figure(figsize=(12, 6))\n    plt.bar(range(len(pfam_summary)), pfam_summary['n_variants'])\n    plt.xticks(range(len(pfam_summary)), pfam_summary['pfam_name'], rotation=45, ha='right')\n    plt.ylabel('Number of variants')\n    plt.title('Top 10 Most Affected PFAM Domains')\n    plt.tight_layout()\n    plt.show()\n\n# Summary by amino acid position\naa_summary = maf_data.pfam_domains(\n    summarize_by='AAPos',\n    top_n=10,\n    include_synonymous=False\n)\n\nif not aa_summary.empty:\n    display(aa_summary)\n</pre> # Summary by PFAM domain pfam_summary = maf_data.pfam_domains(     summarize_by='PfamDomain',     top_n=10,     include_synonymous=False )  if not pfam_summary.empty:     display(pfam_summary)      # Visualization     plt.figure(figsize=(12, 6))     plt.bar(range(len(pfam_summary)), pfam_summary['n_variants'])     plt.xticks(range(len(pfam_summary)), pfam_summary['pfam_name'], rotation=45, ha='right')     plt.ylabel('Number of variants')     plt.title('Top 10 Most Affected PFAM Domains')     plt.tight_layout()     plt.show()  # Summary by amino acid position aa_summary = maf_data.pfam_domains(     summarize_by='AAPos',     top_n=10,     include_synonymous=False )  if not aa_summary.empty:     display(aa_summary)  pfam_id pfam_name n_genes n_variants 138 PF04118 PF04118 8 7 51 PF00520 PF00520 6 6 186 PF13853 PF13853 4 5 152 PF07679 PF07679 4 5 36 PF00271 PF00271 3 5 15 PF00069 PF00069 3 4 35 PF00270 PF00270 4 4 13 PF00063 PF00063 3 3 10 PF00041 PF00041 3 3 216 PF21114 PF21114 3 3 uniprot aa_pos pfam_id pfam_name n_variants n_genes 0 A0A0B4J262 28.0 PF00431 PF00431 1 1 33 Q14678 405.0 PF00096 PF00096 1 1 35 Q5JUK3 266.0 PF00084 PF00084 1 1 36 Q6ZU80 28.0 PF08647 PF08647 1 1 37 Q8NEA6 741.0 PF03250 PF03250 1 1 38 Q8NFX7 87.0 PF03055 PF03055 1 1 39 Q8NHH1 374.0 PF00096 PF00096 1 1 40 Q8WXB1 274.0 PF05586 PF05586 1 1 41 Q92688 43.0 PF00134 PF00134 1 1 42 Q96FT7 17.0 PF00535 PF00535 1 1 In\u00a0[4]: Copied! <pre># Try to build the embedded database\nprint(\"Setting up PFAM database...\")\ntry:\n    # This will create the database if it doesn't exist\n    build_embedded_db(force_rebuild=False)\n    print(\"\u2713 PFAM database configured successfully\")\nexcept Exception as e:\n    print(f\"\u26a0\ufe0f  Error setting up database: {e}\")\n    print(\"We will continue with available functions...\")\n\n# Try to connect to the database\ntry:\n    db_conn = connect_db()\n    print(\"\u2713 Database connection established\")\n\n    # Check available tables\n    tables = db_conn.execute(\"SHOW TABLES\").fetchall()\n    print(f\"Available tables: {[table[0] for table in tables]}\")\n\n    db_conn.close()\nexcept Exception as e:\n    print(f\"\u26a0\ufe0f  Error connecting to database: {e}\")\n    db_conn = None\n</pre> # Try to build the embedded database print(\"Setting up PFAM database...\") try:     # This will create the database if it doesn't exist     build_embedded_db(force_rebuild=False)     print(\"\u2713 PFAM database configured successfully\") except Exception as e:     print(f\"\u26a0\ufe0f  Error setting up database: {e}\")     print(\"We will continue with available functions...\")  # Try to connect to the database try:     db_conn = connect_db()     print(\"\u2713 Database connection established\")      # Check available tables     tables = db_conn.execute(\"SHOW TABLES\").fetchall()     print(f\"Available tables: {[table[0] for table in tables]}\")      db_conn.close() except Exception as e:     print(f\"\u26a0\ufe0f  Error connecting to database: {e}\")     db_conn = None <pre>Setting up PFAM database...\n\u2705 Database already exists at /home/luisruimore/Escritorio/TFG/src/pyMut/data/resources/data.duckdb\n\u2713 PFAM database configured successfully\n\u2713 Database connection established\nAvailable tables: ['meta', 'pfam', 'xref']\n</pre>"},{"location":"examples/analysis/domains_pfam/#pfam-annotation-module","title":"PFAM Annotation Module\u00b6","text":"<p>This notebook demonstrates the use of the two main methods from the <code>pfam_annotation.py</code> module in pyMut.</p>"},{"location":"examples/analysis/domains_pfam/#1-import-libraries-and-load-data","title":"1. Import libraries and load data\u00b6","text":""},{"location":"examples/analysis/domains_pfam/#2-using-the-annotate_pfam-method","title":"2. Using the annotate_pfam() method\u00b6","text":""},{"location":"examples/analysis/domains_pfam/#3-using-the-pfam_domains-method","title":"3. Using the pfam_domains() method\u00b6","text":""},{"location":"examples/analysis/mutation_burden/","title":"Tumor Mutational Burden (TMB) Analysis with PyMut-Bio","text":"In\u00a0[1]: Copied! <pre>import os\nfrom pyMut.input import read_maf\n\nprint('\u2705 Modules imported successfully')\n</pre> import os from pyMut.input import read_maf  print('\u2705 Modules imported successfully')  <pre>\u2705 Modules imported successfully\n</pre> In\u00a0[2]: Copied! <pre>maf_path = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\"  # Replace with the path to your MAF file\n\n# Check if the file exists\nif not os.path.exists(maf_path):\n    print(f\"\u274c File not found: {maf_path}\")\n    print(\"\ud83d\udcdd Please specify the correct path to your MAF file in the 'maf_path' variable\")\n    print(\"\ud83d\udca1 You can download example data from TCGA or use your own data\")\nelse:\n    print(f'\ud83d\udcc2 Loading file: {maf_path}')\n    py_mutation = read_maf(maf_path, assembly=\"37\")\n    \n    print(\"\u2705 Data loaded successfully\")\n    print(f\"\ud83d\udcca Data shape: {py_mutation.data.shape}\")\n    print(f\"\ud83d\udc65 Number of samples: {len(py_mutation.samples)}\")\n    print(f\"\ud83e\uddec First 3 samples: {py_mutation.samples[:3]}\")\n</pre> maf_path = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\"  # Replace with the path to your MAF file  # Check if the file exists if not os.path.exists(maf_path):     print(f\"\u274c File not found: {maf_path}\")     print(\"\ud83d\udcdd Please specify the correct path to your MAF file in the 'maf_path' variable\")     print(\"\ud83d\udca1 You can download example data from TCGA or use your own data\") else:     print(f'\ud83d\udcc2 Loading file: {maf_path}')     py_mutation = read_maf(maf_path, assembly=\"37\")          print(\"\u2705 Data loaded successfully\")     print(f\"\ud83d\udcca Data shape: {py_mutation.data.shape}\")     print(f\"\ud83d\udc65 Number of samples: {len(py_mutation.samples)}\")     print(f\"\ud83e\uddec First 3 samples: {py_mutation.samples[:3]}\")  <pre>2025-08-01 00:45:36,996 | INFO | pyMut.input | Starting MAF reading: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n2025-08-01 00:45:36,998 | INFO | pyMut.input | Reading MAF with 'pyarrow' engine\u2026\n2025-08-01 00:45:37,007 | INFO | pyMut.input | Reading with 'pyarrow' completed.\n2025-08-01 00:45:37,013 | INFO | pyMut.input | Detected 193 unique samples.\n2025-08-01 00:45:37,098 | INFO | pyMut.input | Consolidating duplicate variants across samples...\n2025-08-01 00:45:37,111 | INFO | pyMut.input | Consolidating variants using vectorized operations...\n</pre> <pre>\ud83d\udcc2 Loading file: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n</pre> <pre>2025-08-01 00:46:29,613 | INFO | pyMut.input | Variant consolidation completed in 52.51 seconds\n2025-08-01 00:46:29,620 | INFO | pyMut.input | Consolidated 2207 rows into 2091 unique variants\n2025-08-01 00:46:29,635 | INFO | pyMut.input | Saving to cache: ../../../src/pyMut/data/examples/MAF/.pymut_cache/tcga_laml.maf_8bfbda65c4b23428.parquet\n2025-08-01 00:46:29,697 | INFO | pyMut.input | MAF processed successfully: 2091 rows, 216 columns in 52.70 seconds\n</pre> <pre>\u2705 Data loaded successfully\n\ud83d\udcca Data shape: (2091, 216)\n\ud83d\udc65 Number of samples: 193\n\ud83e\uddec First 3 samples: ['TCGA-AB-2988', 'TCGA-AB-2869', 'TCGA-AB-3009']\n</pre> In\u00a0[3]: Copied! <pre># Search for variant classification columns\nimport re\n\npattern = re.compile(r'^(gencode_\\d+_)?variant[_]?classification$', flags=re.IGNORECASE)\nvariant_cols = [col for col in py_mutation.data.columns if pattern.match(col)]\n\nprint(\"\ud83d\udd0d Variant classification columns found:\")\nif variant_cols:\n    for i, col in enumerate(variant_cols, 1):\n        print(f\"  {i}. {col}\")\nelse:\n    print(\"  \u274c No variant classification columns found\")\n\n# Show some columns that contain 'variant' in the name\nvariant_like_cols = [col for col in py_mutation.data.columns if 'variant' in col.lower()]\nprint(f\"\\n\ud83d\udd0d Columns containing 'variant' ({len(variant_like_cols)}):\")\nfor col in variant_like_cols[:5]:  # Show only the first 5\n    print(f\"  \u2022 {col}\")\n</pre> # Search for variant classification columns import re  pattern = re.compile(r'^(gencode_\\d+_)?variant[_]?classification$', flags=re.IGNORECASE) variant_cols = [col for col in py_mutation.data.columns if pattern.match(col)]  print(\"\ud83d\udd0d Variant classification columns found:\") if variant_cols:     for i, col in enumerate(variant_cols, 1):         print(f\"  {i}. {col}\") else:     print(\"  \u274c No variant classification columns found\")  # Show some columns that contain 'variant' in the name variant_like_cols = [col for col in py_mutation.data.columns if 'variant' in col.lower()] print(f\"\\n\ud83d\udd0d Columns containing 'variant' ({len(variant_like_cols)}):\") for col in variant_like_cols[:5]:  # Show only the first 5     print(f\"  \u2022 {col}\")  <pre>\ud83d\udd0d Variant classification columns found:\n  1. Variant_Classification\n\n\ud83d\udd0d Columns containing 'variant' (2):\n  \u2022 Variant_Classification\n  \u2022 Variant_Type\n</pre> In\u00a0[4]: Copied! <pre># Create directory for results\noutput_dir = \"results_tmb\"\nos.makedirs(output_dir, exist_ok=True)\n\nprint(f\"\ud83d\udcc1 Output directory: {output_dir}\")\n</pre> # Create directory for results output_dir = \"results_tmb\" os.makedirs(output_dir, exist_ok=True)  print(f\"\ud83d\udcc1 Output directory: {output_dir}\")  <pre>\ud83d\udcc1 Output directory: results_tmb\n</pre> In\u00a0[5]: Copied! <pre># Run TMB analysis\nprint(\"\ud83e\uddec Running mutational burden analysis...\")\nprint(\"\u23f3 This may take a few moments...\")\n\ntry:\n    # Run TMB analysis with standard configuration for WES\n    results = py_mutation.calculate_tmb_analysis(\n        genome_size_bp=60456963,  # Standard size for WES\n        output_dir=output_dir,\n        save_files=True\n    )\n    \n    print(\"\u2705 TMB analysis completed successfully!\")\n    \nexcept Exception as e:\n    print(f\"\u274c Error during TMB analysis: {e}\")\n    results = None\n</pre> # Run TMB analysis print(\"\ud83e\uddec Running mutational burden analysis...\") print(\"\u23f3 This may take a few moments...\")  try:     # Run TMB analysis with standard configuration for WES     results = py_mutation.calculate_tmb_analysis(         genome_size_bp=60456963,  # Standard size for WES         output_dir=output_dir,         save_files=True     )          print(\"\u2705 TMB analysis completed successfully!\")      except Exception as e:     print(f\"\u274c Error during TMB analysis: {e}\")     results = None  <pre>2025-08-01 00:46:29,809 | INFO | pyMut.analysis.mutation_burden | Auto-detected variant classification column: Variant_Classification\n</pre> <pre>\ud83e\uddec Running mutational burden analysis...\n\u23f3 This may take a few moments...\n</pre> <pre>2025-08-01 00:46:45,054 | INFO | pyMut.analysis.mutation_burden | TMB analysis saved to: results_tmb/TMB_analysis.tsv\n2025-08-01 00:46:45,054 | INFO | pyMut.analysis.mutation_burden | TMB statistics saved to: results_tmb/TMB_statistics.tsv\n2025-08-01 00:46:45,054 | INFO | pyMut.analysis.mutation_burden | Analyzed 193 samples with 2091 total mutations\n2025-08-01 00:46:45,055 | INFO | pyMut.analysis.mutation_burden | TMB ANALYSIS SUMMARY\n2025-08-01 00:46:45,055 | INFO | pyMut.analysis.mutation_burden | \u2022 Total samples analyzed: 193\n2025-08-01 00:46:45,055 | INFO | pyMut.analysis.mutation_burden | \u2022 Average total mutations per sample: 11.4\n2025-08-01 00:46:45,056 | INFO | pyMut.analysis.mutation_burden | \u2022 Average non-synonymous mutations per sample: 9.0\n2025-08-01 00:46:45,057 | INFO | pyMut.analysis.mutation_burden | \u2022 Average normalized TMB (total): 0.189147 mutations/Mb\n2025-08-01 00:46:45,057 | INFO | pyMut.analysis.mutation_burden | \u2022 Average normalized TMB (non-synonymous): 0.148438 mutations/Mb\n2025-08-01 00:46:45,057 | INFO | pyMut.analysis.mutation_burden | \u2022 Sample with highest TMB: TCGA-AB-3009\n2025-08-01 00:46:45,058 | INFO | pyMut.analysis.mutation_burden |   - TMB value: 0.694709 mutations/Mb\n2025-08-01 00:46:45,058 | INFO | pyMut.analysis.mutation_burden | \u2022 Sample with lowest TMB: TCGA-AB-2903\n2025-08-01 00:46:45,059 | INFO | pyMut.analysis.mutation_burden |   - TMB value: 0.016541 mutations/Mb\n</pre> <pre>\u2705 TMB analysis completed successfully!\n</pre> In\u00a0[6]: Copied! <pre>if results:\n    # Get the results DataFrames\n    analysis_df = results['analysis']\n    statistics_df = results['statistics']\n    \n    print(\"\ud83d\udcca TMB ANALYSIS RESULTS\")\n    print(\"=\" * 50)\n    print(f\"\ud83d\udc65 Samples analyzed: {len(analysis_df)}\")\n    print(f\"\ud83d\udcc8 Metrics calculated: {len(statistics_df)}\")\n    \n    # Show the first rows of the per-sample analysis\n    print(\"\\n\ud83d\udd0d First 5 samples from analysis:\")\n    print(\"-\" * 40)\n    display(analysis_df.head())\n    \nelse:\n    print(\"\u274c Could not obtain analysis results\")\n</pre> if results:     # Get the results DataFrames     analysis_df = results['analysis']     statistics_df = results['statistics']          print(\"\ud83d\udcca TMB ANALYSIS RESULTS\")     print(\"=\" * 50)     print(f\"\ud83d\udc65 Samples analyzed: {len(analysis_df)}\")     print(f\"\ud83d\udcc8 Metrics calculated: {len(statistics_df)}\")          # Show the first rows of the per-sample analysis     print(\"\\n\ud83d\udd0d First 5 samples from analysis:\")     print(\"-\" * 40)     display(analysis_df.head())      else:     print(\"\u274c Could not obtain analysis results\")  <pre>\ud83d\udcca TMB ANALYSIS RESULTS\n==================================================\n\ud83d\udc65 Samples analyzed: 193\n\ud83d\udcc8 Metrics calculated: 4\n\n\ud83d\udd0d First 5 samples from analysis:\n----------------------------------------\n</pre> Sample Total_Mutations Non_Synonymous_Mutations TMB_Total_Normalized TMB_Non_Synonymous_Normalized 0 TCGA-AB-2988 15 13 0.248110 0.215029 1 TCGA-AB-2869 12 8 0.198488 0.132326 2 TCGA-AB-3009 42 34 0.694709 0.562384 3 TCGA-AB-2830 17 13 0.281192 0.215029 4 TCGA-AB-2887 15 12 0.248110 0.198488 In\u00a0[7]: Copied! <pre>if results:\n    print(\"\ud83d\udcc8 TMB GLOBAL STATISTICS\")\n    print(\"=\" * 40)\n    display(statistics_df)\n    \n    # Show some key statistics\n    print(\"\\n\ud83c\udfaf KEY STATISTICS:\")\n    print(\"-\" * 30)\n    \n    # Total normalized TMB\n    tmb_total_stats = statistics_df[statistics_df['Metric'] == 'TMB_Total_Normalized'].iloc[0]\n    print(\"\ud83e\uddec Total Normalized TMB:\")\n    print(f\"   \u2022 Mean: {tmb_total_stats['Mean']:.4f} mutations/Mb\")\n    print(f\"   \u2022 Median: {tmb_total_stats['Median']:.4f} mutations/Mb\")\n    print(f\"   \u2022 Range: {tmb_total_stats['Min']:.4f} - {tmb_total_stats['Max']:.4f} mutations/Mb\")\n    \n    # Non-synonymous normalized TMB\n    tmb_nonsyn_stats = statistics_df[statistics_df['Metric'] == 'TMB_Non_Synonymous_Normalized'].iloc[0]\n    print(\"\\n\ud83c\udfaf Non-Synonymous Normalized TMB:\")\n    print(f\"   \u2022 Mean: {tmb_nonsyn_stats['Mean']:.4f} mutations/Mb\")\n    print(f\"   \u2022 Median: {tmb_nonsyn_stats['Median']:.4f} mutations/Mb\")\n    print(f\"   \u2022 Range: {tmb_nonsyn_stats['Min']:.4f} - {tmb_nonsyn_stats['Max']:.4f} mutations/Mb\")\n</pre> if results:     print(\"\ud83d\udcc8 TMB GLOBAL STATISTICS\")     print(\"=\" * 40)     display(statistics_df)          # Show some key statistics     print(\"\\n\ud83c\udfaf KEY STATISTICS:\")     print(\"-\" * 30)          # Total normalized TMB     tmb_total_stats = statistics_df[statistics_df['Metric'] == 'TMB_Total_Normalized'].iloc[0]     print(\"\ud83e\uddec Total Normalized TMB:\")     print(f\"   \u2022 Mean: {tmb_total_stats['Mean']:.4f} mutations/Mb\")     print(f\"   \u2022 Median: {tmb_total_stats['Median']:.4f} mutations/Mb\")     print(f\"   \u2022 Range: {tmb_total_stats['Min']:.4f} - {tmb_total_stats['Max']:.4f} mutations/Mb\")          # Non-synonymous normalized TMB     tmb_nonsyn_stats = statistics_df[statistics_df['Metric'] == 'TMB_Non_Synonymous_Normalized'].iloc[0]     print(\"\\n\ud83c\udfaf Non-Synonymous Normalized TMB:\")     print(f\"   \u2022 Mean: {tmb_nonsyn_stats['Mean']:.4f} mutations/Mb\")     print(f\"   \u2022 Median: {tmb_nonsyn_stats['Median']:.4f} mutations/Mb\")     print(f\"   \u2022 Range: {tmb_nonsyn_stats['Min']:.4f} - {tmb_nonsyn_stats['Max']:.4f} mutations/Mb\")  <pre>\ud83d\udcc8 TMB GLOBAL STATISTICS\n========================================\n</pre> Metric Count Mean Median Min Max Q1 Q3 Std 0 Total_Mutations 193 11.435233 11.000000 1.000000 42.000000 6.000000 15.000000 6.752870 1 Non_Synonymous_Mutations 193 8.974093 9.000000 0.000000 34.000000 5.000000 12.000000 5.452862 2 TMB_Total_Normalized 193 0.189147 0.181948 0.016541 0.694709 0.099244 0.248110 0.111697 3 TMB_Non_Synonymous_Normalized 193 0.148438 0.148866 0.000000 0.562384 0.082703 0.198488 0.090194 <pre>\n\ud83c\udfaf KEY STATISTICS:\n------------------------------\n\ud83e\uddec Total Normalized TMB:\n   \u2022 Mean: 0.1891 mutations/Mb\n   \u2022 Median: 0.1819 mutations/Mb\n   \u2022 Range: 0.0165 - 0.6947 mutations/Mb\n\n\ud83c\udfaf Non-Synonymous Normalized TMB:\n   \u2022 Mean: 0.1484 mutations/Mb\n   \u2022 Median: 0.1489 mutations/Mb\n   \u2022 Range: 0.0000 - 0.5624 mutations/Mb\n</pre>"},{"location":"examples/analysis/mutation_burden/#tumor-mutational-burden-tmb-analysis-with-pymut-bio","title":"Tumor Mutational Burden (TMB) Analysis with PyMut-Bio\u00b6","text":"<p>This notebook demonstrates how to use the <code>calculate_tmb_analysis</code> method from PyMut-Bio to calculate Tumor Mutational Burden (TMB) and generate the corresponding analysis files.</p>"},{"location":"examples/analysis/mutation_burden/#what-is-tmb","title":"What is TMB?\u00b6","text":"<p>Tumor Mutational Burden (TMB) is a measure of the number of mutations present in a tumor, normalized by the size of the interrogated genome. It is an important biomarker in oncology.</p>"},{"location":"examples/analysis/mutation_burden/#initial-setup","title":"Initial Setup\u00b6","text":""},{"location":"examples/analysis/mutation_burden/#load-example-data","title":"Load Example Data\u00b6","text":"<p>For this example, you will need a MAF file. You can use your own data or download example data from TCGA.</p>"},{"location":"examples/analysis/mutation_burden/#explore-variant-classification-columns","title":"Explore Variant Classification Columns\u00b6","text":"<p>Before running the TMB analysis, let's see what variant classification columns are available:</p>"},{"location":"examples/analysis/mutation_burden/#run-tmb-analysis","title":"Run TMB Analysis\u00b6","text":"<p>Now we will run the mutational burden analysis. The method will generate two files:</p> <ol> <li>TMB_analysis.tsv: Per-sample analysis with mutation counts and normalized TMB</li> <li>TMB_statistics.tsv: Global statistics (mean, median, quartiles, etc.)</li> </ol>"},{"location":"examples/analysis/mutation_burden/#explore-results","title":"Explore Results\u00b6","text":""},{"location":"examples/analysis/mutation_burden/#global-statistics","title":"Global Statistics\u00b6","text":""},{"location":"examples/analysis/mutation_burden/#important-notes","title":"Important Notes\u00b6","text":"<ul> <li><p>Genome size: The parameter <code>genome_size_bp=60456963</code> corresponds to the standard size for Whole Exome Sequencing (WES). Adjust this value according to your sequencing type:</p> <ul> <li>WES: ~60 Mb</li> <li>WGS: ~3000 Mb</li> <li>Targeted panel: specific panel size</li> </ul> </li> <li><p>Output files: The TSV files are saved in the specified directory and contain:</p> <ul> <li><code>TMB_analysis.tsv</code>: Detailed per-sample analysis</li> <li><code>TMB_statistics.tsv</code>: Summary statistics of the dataset</li> </ul> </li> <li><p>Interpretation: TMB values are expressed in mutations per megabase (mutations/Mb) and can be used as a biomarker for immunotherapy treatments.</p> </li> </ul>"},{"location":"examples/analysis/mutational_signatures/","title":"Trinucleotide Matrix Analysis Demo","text":"In\u00a0[1]: Copied! <pre>import sys\nimport os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom pyMut.input import read_maf\n</pre> import sys import os import pandas as pd import numpy as np import matplotlib.pyplot as plt import seaborn as sns  from pyMut.input import read_maf  In\u00a0[2]: Copied! <pre># Define file paths\nmaf_file = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\"\nfasta_file = \"../../../src/pyMut/data/resources/genome/GRCh37/GRCh37.p13.genome.fa\"\n\n# Check if files exist\nif not os.path.exists(maf_file):\n    print(f\"\u274c MAF file not found: {maf_file}\")\nelse:\n    print(\"\u2713 MAF file found\")\n\nif not os.path.exists(fasta_file):\n    print(f\"\u274c FASTA file not found: {fasta_file}\")\nelse:\n    print(\"\u2713 FASTA file found\")\n</pre> # Define file paths maf_file = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\" fasta_file = \"../../../src/pyMut/data/resources/genome/GRCh37/GRCh37.p13.genome.fa\"  # Check if files exist if not os.path.exists(maf_file):     print(f\"\u274c MAF file not found: {maf_file}\") else:     print(\"\u2713 MAF file found\")  if not os.path.exists(fasta_file):     print(f\"\u274c FASTA file not found: {fasta_file}\") else:     print(\"\u2713 FASTA file found\")  <pre>\u2713 MAF file found\n\u2713 FASTA file found\n</pre> In\u00a0[3]: Copied! <pre># Load the MAF file\npymut = read_maf(maf_file,assembly=\"37\")\n\nprint(f\"\u2713 Loaded {len(pymut.data):,} mutations\")\nprint(f\"\u2713 Data shape: {pymut.data.shape}\")\n</pre> # Load the MAF file pymut = read_maf(maf_file,assembly=\"37\")  print(f\"\u2713 Loaded {len(pymut.data):,} mutations\") print(f\"\u2713 Data shape: {pymut.data.shape}\")  <pre>2025-08-01 00:50:22,729 | INFO | pyMut.input | Starting MAF reading: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n2025-08-01 00:50:22,730 | INFO | pyMut.input | Loading from cache: ../../../src/pyMut/data/examples/MAF/.pymut_cache/tcga_laml.maf_8bfbda65c4b23428.parquet\n2025-08-01 00:50:22,758 | INFO | pyMut.input | Cache loaded successfully in 0.03 seconds\n</pre> <pre>\u2713 Loaded 2,091 mutations\n\u2713 Data shape: (2091, 216)\n</pre> In\u00a0[4]: Copied! <pre># Generate trinucleotide context matrix\ncontexts_df, enriched_data = pymut.trinucleotideMatrix(fasta_file)\n\nprint(f\"\u2713 Generated {contexts_df.shape[0]} x {contexts_df.shape[1]} trinucleotide matrix\")\nprint(f\"\u2713 Processed {len(enriched_data):,} SNVs with valid contexts\")\nprint(f\"\u2713 Total mutations in matrix: {contexts_df.sum().sum():,}\")\n</pre> # Generate trinucleotide context matrix contexts_df, enriched_data = pymut.trinucleotideMatrix(fasta_file)  print(f\"\u2713 Generated {contexts_df.shape[0]} x {contexts_df.shape[1]} trinucleotide matrix\") print(f\"\u2713 Processed {len(enriched_data):,} SNVs with valid contexts\") print(f\"\u2713 Total mutations in matrix: {contexts_df.sum().sum():,}\")  <pre>2025-08-01 00:50:22,810 | INFO | pyMut.analysis.mutational_signature | Detected long format with Tumor_Sample_Barcode column\n2025-08-01 00:50:22,818 | INFO | pyMut.analysis.mutational_signature | Processing 1911 SNVs from 2091 total mutations\n2025-08-01 00:50:22,819 | INFO | pyMut.analysis.mutational_signature | Loaded FASTA file: ../../../src/pyMut/data/resources/genome/GRCh37/GRCh37.p13.genome.fa\n2025-08-01 00:50:22,926 | INFO | pyMut.analysis.mutational_signature | Successfully processed 1911 SNVs with valid trinucleotide contexts\n2025-08-01 00:50:23,083 | INFO | pyMut.analysis.mutational_signature | Generated 96 x 180 trinucleotide context matrix\n</pre> <pre>\u2713 Generated 96 x 180 trinucleotide matrix\n\u2713 Processed 1,911 SNVs with valid contexts\n\u2713 Total mutations in matrix: 1,911\n</pre> In\u00a0[5]: Copied! <pre># Basic statistics\ntotal_mutations = contexts_df.sum().sum()\nnon_zero_contexts = (contexts_df &gt; 0).sum().sum()\navg_mutations_per_sample = total_mutations / contexts_df.shape[1]\n\n# Create summary statistics\nsummary_stats = pd.DataFrame({\n    'Metric': ['Total Contexts', 'Total Samples', 'Total Mutations', \n               'Non-zero Contexts', 'Avg Mutations/Sample'],\n    'Value': [contexts_df.shape[0], contexts_df.shape[1], total_mutations,\n              non_zero_contexts, f\"{avg_mutations_per_sample:.1f}\"]\n})\n\nprint(\"Matrix Summary:\")\nprint(summary_stats.to_string(index=False))\n</pre> # Basic statistics total_mutations = contexts_df.sum().sum() non_zero_contexts = (contexts_df &gt; 0).sum().sum() avg_mutations_per_sample = total_mutations / contexts_df.shape[1]  # Create summary statistics summary_stats = pd.DataFrame({     'Metric': ['Total Contexts', 'Total Samples', 'Total Mutations',                 'Non-zero Contexts', 'Avg Mutations/Sample'],     'Value': [contexts_df.shape[0], contexts_df.shape[1], total_mutations,               non_zero_contexts, f\"{avg_mutations_per_sample:.1f}\"] })  print(\"Matrix Summary:\") print(summary_stats.to_string(index=False))  <pre>Matrix Summary:\n              Metric Value\n      Total Contexts    96\n       Total Samples   180\n     Total Mutations  1911\n   Non-zero Contexts  1524\nAvg Mutations/Sample  10.6\n</pre> In\u00a0[6]: Copied! <pre># Calculate context totals and plot top 15\ncontext_totals = contexts_df.sum(axis=1).sort_values(ascending=False)\n\nplt.figure(figsize=(12, 6))\ntop_contexts = context_totals.head(15)\nbars = plt.bar(range(len(top_contexts)), top_contexts.values, \n               color=sns.color_palette(\"viridis\", len(top_contexts)))\nplt.xlabel('Trinucleotide Context')\nplt.ylabel('Total Mutations')\nplt.title('Top 15 Most Frequent Trinucleotide Contexts')\nplt.xticks(range(len(top_contexts)), top_contexts.index, rotation=45, ha='right')\n\n# Add value labels on bars\nfor i, bar in enumerate(bars):\n    height = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2., height + 5,\n             f'{int(height)}', ha='center', va='bottom', fontsize=9)\n\nplt.tight_layout()\nplt.show()\n</pre> # Calculate context totals and plot top 15 context_totals = contexts_df.sum(axis=1).sort_values(ascending=False)  plt.figure(figsize=(12, 6)) top_contexts = context_totals.head(15) bars = plt.bar(range(len(top_contexts)), top_contexts.values,                 color=sns.color_palette(\"viridis\", len(top_contexts))) plt.xlabel('Trinucleotide Context') plt.ylabel('Total Mutations') plt.title('Top 15 Most Frequent Trinucleotide Contexts') plt.xticks(range(len(top_contexts)), top_contexts.index, rotation=45, ha='right')  # Add value labels on bars for i, bar in enumerate(bars):     height = bar.get_height()     plt.text(bar.get_x() + bar.get_width()/2., height + 5,              f'{int(height)}', ha='center', va='bottom', fontsize=9)  plt.tight_layout() plt.show()  In\u00a0[7]: Copied! <pre># Sample mutation counts\nsample_totals = contexts_df.sum(axis=0).sort_values(ascending=False)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))\n\n# Top 20 samples\ntop_samples = sample_totals.head(20)\nax1.bar(range(len(top_samples)), top_samples.values, color='skyblue')\nax1.set_xlabel('Sample Rank')\nax1.set_ylabel('Total Mutations')\nax1.set_title('Top 20 Samples by Mutation Count')\nax1.set_xticks(range(0, len(top_samples), 5))\n\n# Distribution histogram\nax2.hist(sample_totals.values, bins=30, color='lightcoral', alpha=0.7, edgecolor='black')\nax2.set_xlabel('Mutations per Sample')\nax2.set_ylabel('Number of Samples')\nax2.set_title('Distribution of Mutations per Sample')\nax2.axvline(sample_totals.mean(), color='red', linestyle='--', \n            label=f'Mean: {sample_totals.mean():.1f}')\nax2.legend()\n\nplt.tight_layout()\nplt.show()\n</pre> # Sample mutation counts sample_totals = contexts_df.sum(axis=0).sort_values(ascending=False) fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))  # Top 20 samples top_samples = sample_totals.head(20) ax1.bar(range(len(top_samples)), top_samples.values, color='skyblue') ax1.set_xlabel('Sample Rank') ax1.set_ylabel('Total Mutations') ax1.set_title('Top 20 Samples by Mutation Count') ax1.set_xticks(range(0, len(top_samples), 5))  # Distribution histogram ax2.hist(sample_totals.values, bins=30, color='lightcoral', alpha=0.7, edgecolor='black') ax2.set_xlabel('Mutations per Sample') ax2.set_ylabel('Number of Samples') ax2.set_title('Distribution of Mutations per Sample') ax2.axvline(sample_totals.mean(), color='red', linestyle='--',              label=f'Mean: {sample_totals.mean():.1f}') ax2.legend()  plt.tight_layout() plt.show()  In\u00a0[8]: Copied! <pre># Extract mutation types from context labels\nmutation_types = []\nfor context in contexts_df.index:\n    # Extract the mutation type from format \"X[REF&gt;ALT]Z\"\n    mutation_type = context.split('[')[1].split(']')[0]\n    mutation_types.append(mutation_type)\n\n# Group by mutation type\nmutation_type_counts = {}\nfor i, mut_type in enumerate(mutation_types):\n    if mut_type not in mutation_type_counts:\n        mutation_type_counts[mut_type] = 0\n    mutation_type_counts[mut_type] += contexts_df.iloc[i].sum()\n\n# Create pie chart\nplt.figure(figsize=(10, 8))\ncolors = sns.color_palette(\"Set3\", len(mutation_type_counts))\nwedges, texts, autotexts = plt.pie(mutation_type_counts.values(), \n                                   labels=mutation_type_counts.keys(),\n                                   autopct='%1.1f%%',\n                                   colors=colors,\n                                   startangle=90)\n\nplt.title('Distribution of Mutation Types', fontsize=14, fontweight='bold')\n\n# Add counts to labels\nfor i, (label, count) in enumerate(mutation_type_counts.items()):\n    texts[i].set_text(f'{label}\\n({count:,})')\n\nplt.axis('equal')\nplt.show()\n</pre> # Extract mutation types from context labels mutation_types = [] for context in contexts_df.index:     # Extract the mutation type from format \"X[REF&gt;ALT]Z\"     mutation_type = context.split('[')[1].split(']')[0]     mutation_types.append(mutation_type)  # Group by mutation type mutation_type_counts = {} for i, mut_type in enumerate(mutation_types):     if mut_type not in mutation_type_counts:         mutation_type_counts[mut_type] = 0     mutation_type_counts[mut_type] += contexts_df.iloc[i].sum()  # Create pie chart plt.figure(figsize=(10, 8)) colors = sns.color_palette(\"Set3\", len(mutation_type_counts)) wedges, texts, autotexts = plt.pie(mutation_type_counts.values(),                                     labels=mutation_type_counts.keys(),                                    autopct='%1.1f%%',                                    colors=colors,                                    startangle=90)  plt.title('Distribution of Mutation Types', fontsize=14, fontweight='bold')  # Add counts to labels for i, (label, count) in enumerate(mutation_type_counts.items()):     texts[i].set_text(f'{label}\\n({count:,})')  plt.axis('equal') plt.show()  In\u00a0[9]: Copied! <pre># Create a heatmap of the top contexts across top samples\ntop_20_contexts = context_totals.head(20).index\ntop_20_samples = sample_totals.head(20).index\n\n# Subset the matrix\nheatmap_data = contexts_df.loc[top_20_contexts, top_20_samples]\n\nplt.figure(figsize=(15, 10))\nsns.heatmap(heatmap_data, \n            cmap='YlOrRd',\n            cbar_kws={'label': 'Mutation Count'},\n            xticklabels=False,  # Hide sample names for clarity\n            yticklabels=True)\n\nplt.title('Trinucleotide Context Heatmap\\n(Top 20 Contexts \u00d7 Top 20 Samples)', \n          fontsize=14, fontweight='bold')\nplt.xlabel('Samples (Top 20 by mutation count)')\nplt.ylabel('Trinucleotide Contexts (Top 20 by frequency)')\nplt.tight_layout()\nplt.show()\n</pre> # Create a heatmap of the top contexts across top samples top_20_contexts = context_totals.head(20).index top_20_samples = sample_totals.head(20).index  # Subset the matrix heatmap_data = contexts_df.loc[top_20_contexts, top_20_samples]  plt.figure(figsize=(15, 10)) sns.heatmap(heatmap_data,              cmap='YlOrRd',             cbar_kws={'label': 'Mutation Count'},             xticklabels=False,  # Hide sample names for clarity             yticklabels=True)  plt.title('Trinucleotide Context Heatmap\\n(Top 20 Contexts \u00d7 Top 20 Samples)',            fontsize=14, fontweight='bold') plt.xlabel('Samples (Top 20 by mutation count)') plt.ylabel('Trinucleotide Contexts (Top 20 by frequency)') plt.tight_layout() plt.show()  In\u00a0[10]: Copied! <pre># Analyze enriched data columns\nprint(\"Enriched Data Columns:\")\nnew_columns = ['trinuc', 'class96', 'idx96']\nfor col in new_columns:\n    if col in enriched_data.columns:\n        print(f\"\u2713 {col}: {enriched_data[col].notna().sum():,} valid entries\")\n\n# Show sample of enriched data\nprint(\"\\nSample of Enriched Data:\")\nsample_cols = ['Hugo_Symbol', 'Chromosome', 'Start_Position', \n               'Reference_Allele', 'Tumor_Seq_Allele2', 'trinuc', 'class96']\navailable_cols = [col for col in sample_cols if col in enriched_data.columns]\nprint(enriched_data[available_cols].head(10).to_string(index=False))\n</pre> # Analyze enriched data columns print(\"Enriched Data Columns:\") new_columns = ['trinuc', 'class96', 'idx96'] for col in new_columns:     if col in enriched_data.columns:         print(f\"\u2713 {col}: {enriched_data[col].notna().sum():,} valid entries\")  # Show sample of enriched data print(\"\\nSample of Enriched Data:\") sample_cols = ['Hugo_Symbol', 'Chromosome', 'Start_Position',                 'Reference_Allele', 'Tumor_Seq_Allele2', 'trinuc', 'class96'] available_cols = [col for col in sample_cols if col in enriched_data.columns] print(enriched_data[available_cols].head(10).to_string(index=False))  <pre>Enriched Data Columns:\n\u2713 trinuc: 1,911 valid entries\n\u2713 class96: 1,911 valid entries\n\u2713 idx96: 1,911 valid entries\n\nSample of Enriched Data:\nHugo_Symbol  Start_Position Reference_Allele Tumor_Seq_Allele2 trinuc class96\n   KIAA1529       100077177                T                 C    CTT C[T&gt;C]T\n   KIAA1529       100085148                G                 A    GCG G[C&gt;T]G\n     TBC1D2       100971322                A                 C    CTG C[T&gt;G]G\n      LPPR1       104086335                C                 T    ACC A[C&gt;T]C\n       BAAT       104124840                G                 A    ACG A[C&gt;T]G\n       FKTN       108363630                G                 T    ACC A[C&gt;A]C\n     ZNF462       109691231                C                 T    CCG C[C&gt;T]G\n     ACTL7A       111625878                G                 C    CCG C[C&gt;G]G\n       UGCG       114676927                T                 C    ATA A[T&gt;C]A\n    C9orf43       116185663                A                 G    GTT G[T&gt;C]T\n</pre> In\u00a0[11]: Copied! <pre># Import signature estimation functionality\nfrom pyMut.analysis.mutational_signature import estimateSignatures\n\nprint(\"\u2713 Signature estimation function imported\")\n\n# Note: estimateSignatures is used as a standalone function, not as a method\nprint(\"\u2713 Using estimateSignatures as independent function (Option 1 approach)\")\n</pre> # Import signature estimation functionality from pyMut.analysis.mutational_signature import estimateSignatures  print(\"\u2713 Signature estimation function imported\")  # Note: estimateSignatures is used as a standalone function, not as a method print(\"\u2713 Using estimateSignatures as independent function (Option 1 approach)\")  <pre>\u2713 Signature estimation function imported\n\u2713 Using estimateSignatures as independent function (Option 1 approach)\n</pre> In\u00a0[12]: Copied! <pre># Run signature estimation with default parameters\nprint(\"Running signature estimation...\")\nprint(\"This may take a few moments as it performs multiple NMF decompositions...\")\n\ntry:\n    # Test with a smaller range first for demonstration\n    # Use estimateSignatures as standalone function (Option 1 approach)\n    signature_results = estimateSignatures(\n        contexts_df, \n        nMin=2,  # Minimum number of signatures to test\n        nTry=4,  # Number of different k values to try\n        nrun=3,  # Number of NMF runs per k\n        parallel=2,  # Number of parallel processes (if available)\n    )\n\n    print(\"\u2713 Signature estimation completed successfully!\")\n    print(f\"\u2713 Suggested optimal number of signatures: {signature_results['optimal_k']}\")\n\nexcept Exception as e:\n    print(f\"\u274c Error during signature estimation: {e}\")\n    # If sklearn/scipy not available, show what would happen\n    print(\"Note: This requires scikit-learn and scipy packages\")\n    print(\"Install with: pip install scikit-learn scipy\")\n</pre> # Run signature estimation with default parameters print(\"Running signature estimation...\") print(\"This may take a few moments as it performs multiple NMF decompositions...\")  try:     # Test with a smaller range first for demonstration     # Use estimateSignatures as standalone function (Option 1 approach)     signature_results = estimateSignatures(         contexts_df,          nMin=2,  # Minimum number of signatures to test         nTry=4,  # Number of different k values to try         nrun=3,  # Number of NMF runs per k         parallel=2,  # Number of parallel processes (if available)     )      print(\"\u2713 Signature estimation completed successfully!\")     print(f\"\u2713 Suggested optimal number of signatures: {signature_results['optimal_k']}\")  except Exception as e:     print(f\"\u274c Error during signature estimation: {e}\")     # If sklearn/scipy not available, show what would happen     print(\"Note: This requires scikit-learn and scipy packages\")     print(\"Install with: pip install scikit-learn scipy\")  <pre>Running signature estimation...\nThis may take a few moments as it performs multiple NMF decompositions...\n</pre> <pre>2025-08-01 00:50:24,417 | INFO | pyMut.analysis.mutational_signature | Starting signature estimation for k=2 to k=4 with 3 runs each\n2025-08-01 00:50:24,417 | INFO | pyMut.analysis.mutational_signature | Normalized matrix shape: (96, 180)\n2025-08-01 00:50:24,459 | INFO | pyMut.analysis.mutational_signature | Signature estimation completed. Suggested optimal k: 3\n</pre> <pre>\u2713 Signature estimation completed successfully!\n\u2713 Suggested optimal number of signatures: 3\n</pre> In\u00a0[13]: Copied! <pre># Display the metrics DataFrame\nif 'signature_results' in locals() and signature_results is not None:\n    metrics_df = signature_results['metrics']\n\n    print(\"Signature Estimation Metrics:\")\n    print(\"=\" * 50)\n    print(metrics_df.to_string(index=False))\n\n    # Show some key statistics\n    print(\"\\nKey Results:\")\n    print(f\"- Tested k values: {metrics_df['k'].min()} to {metrics_df['k'].max()}\")\n    print(f\"- Optimal k: {signature_results['optimal_k']}\")\n    print(f\"- Total successful models: {len(signature_results['models'])}\")\n\n    # Show best metrics for optimal k\n    optimal_row = metrics_df[metrics_df['k'] == signature_results['optimal_k']]\n    if not optimal_row.empty:\n        row = optimal_row.iloc[0]\n        print(f\"\\nMetrics for optimal k={signature_results['optimal_k']}:\")\n        print(f\"- Mean RSS: {row['mean_rss']:.4f}\")\n        print(f\"- Cophenetic correlation: {row['cophenetic_corr']:.4f}\")\n        print(f\"- Dispersion: {row['dispersion']:.4f}\")\n        print(f\"- Successful runs: {row['successful_runs']}/{row['total_runs']}\")\n</pre> # Display the metrics DataFrame if 'signature_results' in locals() and signature_results is not None:     metrics_df = signature_results['metrics']      print(\"Signature Estimation Metrics:\")     print(\"=\" * 50)     print(metrics_df.to_string(index=False))      # Show some key statistics     print(\"\\nKey Results:\")     print(f\"- Tested k values: {metrics_df['k'].min()} to {metrics_df['k'].max()}\")     print(f\"- Optimal k: {signature_results['optimal_k']}\")     print(f\"- Total successful models: {len(signature_results['models'])}\")      # Show best metrics for optimal k     optimal_row = metrics_df[metrics_df['k'] == signature_results['optimal_k']]     if not optimal_row.empty:         row = optimal_row.iloc[0]         print(f\"\\nMetrics for optimal k={signature_results['optimal_k']}:\")         print(f\"- Mean RSS: {row['mean_rss']:.4f}\")         print(f\"- Cophenetic correlation: {row['cophenetic_corr']:.4f}\")         print(f\"- Dispersion: {row['dispersion']:.4f}\")         print(f\"- Successful runs: {row['successful_runs']}/{row['total_runs']}\")  <pre>Signature Estimation Metrics:\n==================================================\n k  mean_rss      std_rss  cophenetic_corr   dispersion  successful_runs  total_runs\n 2 25.144720 1.234834e-08         0.989031 4.910909e-10                3           3\n 3 22.761190 2.217358e-08         0.758932 9.741839e-10                3           3\n 4 20.952688 2.317392e-02         0.755090 1.106012e-03                3           3\n\nKey Results:\n- Tested k values: 2 to 4\n- Optimal k: 3\n- Total successful models: 9\n\nMetrics for optimal k=3:\n- Mean RSS: 22.7612\n- Cophenetic correlation: 0.7589\n- Dispersion: 0.0000\n- Successful runs: 3.0/3.0\n</pre> In\u00a0[14]: Copied! <pre>if 'signature_results' in locals() and signature_results is not None:\n    metrics_df = signature_results['metrics']\n\n    # Create subplots for different metrics\n    fig, axes = plt.subplots(2, 2, figsize=(15, 10))\n\n    # Plot 1: RSS vs k\n    axes[0, 0].plot(metrics_df['k'], metrics_df['mean_rss'], 'bo-', linewidth=2, markersize=8)\n    axes[0, 0].fill_between(metrics_df['k'], \n                           metrics_df['mean_rss'] - metrics_df['std_rss'],\n                           metrics_df['mean_rss'] + metrics_df['std_rss'], \n                           alpha=0.3)\n    axes[0, 0].set_xlabel('Number of Signatures (k)')\n    axes[0, 0].set_ylabel('Mean RSS')\n    axes[0, 0].set_title('Reconstruction Error vs Number of Signatures')\n    axes[0, 0].grid(True, alpha=0.3)\n\n    # Highlight optimal k\n    optimal_k = signature_results['optimal_k']\n    optimal_rss = metrics_df[metrics_df['k'] == optimal_k]['mean_rss'].iloc[0]\n    axes[0, 0].axvline(optimal_k, color='red', linestyle='--', alpha=0.7, label=f'Optimal k={optimal_k}')\n    axes[0, 0].legend()\n\n    # Plot 2: Cophenetic correlation vs k\n    axes[0, 1].plot(metrics_df['k'], metrics_df['cophenetic_corr'], 'go-', linewidth=2, markersize=8)\n    axes[0, 1].set_xlabel('Number of Signatures (k)')\n    axes[0, 1].set_ylabel('Cophenetic Correlation')\n    axes[0, 1].set_title('Stability (Cophenetic Correlation) vs Number of Signatures')\n    axes[0, 1].grid(True, alpha=0.3)\n    axes[0, 1].axvline(optimal_k, color='red', linestyle='--', alpha=0.7, label=f'Optimal k={optimal_k}')\n    axes[0, 1].legend()\n\n    # Plot 3: Dispersion vs k\n    axes[1, 0].plot(metrics_df['k'], metrics_df['dispersion'], 'mo-', linewidth=2, markersize=8)\n    axes[1, 0].set_xlabel('Number of Signatures (k)')\n    axes[1, 0].set_ylabel('Dispersion (CV of RSS)')\n    axes[1, 0].set_title('Dispersion vs Number of Signatures')\n    axes[1, 0].grid(True, alpha=0.3)\n    axes[1, 0].axvline(optimal_k, color='red', linestyle='--', alpha=0.7, label=f'Optimal k={optimal_k}')\n    axes[1, 0].legend()\n\n    # Plot 4: Success rate\n    success_rate = metrics_df['successful_runs'] / metrics_df['total_runs']\n    axes[1, 1].bar(metrics_df['k'], success_rate, color='orange', alpha=0.7)\n    axes[1, 1].set_xlabel('Number of Signatures (k)')\n    axes[1, 1].set_ylabel('Success Rate')\n    axes[1, 1].set_title('NMF Success Rate vs Number of Signatures')\n    axes[1, 1].set_ylim(0, 1.1)\n    axes[1, 1].grid(True, alpha=0.3)\n\n    plt.tight_layout()\n    plt.show()\n\nelse:\n    print(\"Signature estimation results not available for visualization\")\n    print(\"This section requires successful completion of the signature estimation step\")\n</pre> if 'signature_results' in locals() and signature_results is not None:     metrics_df = signature_results['metrics']      # Create subplots for different metrics     fig, axes = plt.subplots(2, 2, figsize=(15, 10))      # Plot 1: RSS vs k     axes[0, 0].plot(metrics_df['k'], metrics_df['mean_rss'], 'bo-', linewidth=2, markersize=8)     axes[0, 0].fill_between(metrics_df['k'],                             metrics_df['mean_rss'] - metrics_df['std_rss'],                            metrics_df['mean_rss'] + metrics_df['std_rss'],                             alpha=0.3)     axes[0, 0].set_xlabel('Number of Signatures (k)')     axes[0, 0].set_ylabel('Mean RSS')     axes[0, 0].set_title('Reconstruction Error vs Number of Signatures')     axes[0, 0].grid(True, alpha=0.3)      # Highlight optimal k     optimal_k = signature_results['optimal_k']     optimal_rss = metrics_df[metrics_df['k'] == optimal_k]['mean_rss'].iloc[0]     axes[0, 0].axvline(optimal_k, color='red', linestyle='--', alpha=0.7, label=f'Optimal k={optimal_k}')     axes[0, 0].legend()      # Plot 2: Cophenetic correlation vs k     axes[0, 1].plot(metrics_df['k'], metrics_df['cophenetic_corr'], 'go-', linewidth=2, markersize=8)     axes[0, 1].set_xlabel('Number of Signatures (k)')     axes[0, 1].set_ylabel('Cophenetic Correlation')     axes[0, 1].set_title('Stability (Cophenetic Correlation) vs Number of Signatures')     axes[0, 1].grid(True, alpha=0.3)     axes[0, 1].axvline(optimal_k, color='red', linestyle='--', alpha=0.7, label=f'Optimal k={optimal_k}')     axes[0, 1].legend()      # Plot 3: Dispersion vs k     axes[1, 0].plot(metrics_df['k'], metrics_df['dispersion'], 'mo-', linewidth=2, markersize=8)     axes[1, 0].set_xlabel('Number of Signatures (k)')     axes[1, 0].set_ylabel('Dispersion (CV of RSS)')     axes[1, 0].set_title('Dispersion vs Number of Signatures')     axes[1, 0].grid(True, alpha=0.3)     axes[1, 0].axvline(optimal_k, color='red', linestyle='--', alpha=0.7, label=f'Optimal k={optimal_k}')     axes[1, 0].legend()      # Plot 4: Success rate     success_rate = metrics_df['successful_runs'] / metrics_df['total_runs']     axes[1, 1].bar(metrics_df['k'], success_rate, color='orange', alpha=0.7)     axes[1, 1].set_xlabel('Number of Signatures (k)')     axes[1, 1].set_ylabel('Success Rate')     axes[1, 1].set_title('NMF Success Rate vs Number of Signatures')     axes[1, 1].set_ylim(0, 1.1)     axes[1, 1].grid(True, alpha=0.3)      plt.tight_layout()     plt.show()  else:     print(\"Signature estimation results not available for visualization\")     print(\"This section requires successful completion of the signature estimation step\")  In\u00a0[15]: Copied! <pre>if 'signature_results' in locals() and signature_results is not None:\n    print(\"Testing signature estimation with different parameters...\")\n\n    # Test with pConstant for sparse matrices\n    print(\"\\n1. Testing with pConstant (for handling sparse matrices):\")\n    try:\n        # Use estimateSignatures as standalone function (Option 1 approach)\n        sparse_results = estimateSignatures(\n            contexts_df,\n            nMin=2,\n            nTry=4,\n            nrun=2,\n            parallel=2,\n            pConstant=0.01  # Small constant to handle zeros\n        )\n\n        print(f\"   \u2713 With pConstant: Optimal k = {sparse_results['optimal_k']}\")\n\n        # Compare metrics\n        original_metrics = signature_results['metrics']\n        sparse_metrics = sparse_results['metrics']\n\n        print(\"\\n   Comparison of results:\")\n        print(\"   k | Original RSS | With pConstant RSS\")\n        print(\"   --|--------------|------------------\")\n        for k in range(2, 5):\n            orig_rss = original_metrics[original_metrics['k'] == k]['mean_rss']\n            sparse_rss = sparse_metrics[sparse_metrics['k'] == k]['mean_rss']\n            if not orig_rss.empty and not sparse_rss.empty:\n                print(f\"   {k} | {orig_rss.iloc[0]:.4f}      | {sparse_rss.iloc[0]:.4f}\")\n\n    except Exception as e:\n        print(f\"   \u274c Error with pConstant: {e}\")\n\n    # Test with different run counts\n    print(\"\\n2. Testing with more runs for better stability:\")\n    try:\n        # Use estimateSignatures as standalone function (Option 1 approach)\n        stable_results = estimateSignatures(\n            contexts_df,\n            nMin=2,\n            nTry=4,\n            nrun=5,  # More runs for better stability\n            parallel=2\n        )\n\n        print(f\"   \u2713 With more runs: Optimal k = {stable_results['optimal_k']}\")\n\n        # Compare stability metrics\n        orig_coph = signature_results['metrics']['cophenetic_corr'].mean()\n        stable_coph = stable_results['metrics']['cophenetic_corr'].mean()\n        print(\"   Average cophenetic correlation:\")\n        print(f\"   - Original (3 runs): {orig_coph:.4f}\")\n        print(f\"   - Stable (5 runs): {stable_coph:.4f}\")\n\n    except Exception as e:\n        print(f\"   \u274c Error with more runs: {e}\")\n\nelse:\n    print(\"Skipping parameter testing - signature estimation not completed\")\n</pre> if 'signature_results' in locals() and signature_results is not None:     print(\"Testing signature estimation with different parameters...\")      # Test with pConstant for sparse matrices     print(\"\\n1. Testing with pConstant (for handling sparse matrices):\")     try:         # Use estimateSignatures as standalone function (Option 1 approach)         sparse_results = estimateSignatures(             contexts_df,             nMin=2,             nTry=4,             nrun=2,             parallel=2,             pConstant=0.01  # Small constant to handle zeros         )          print(f\"   \u2713 With pConstant: Optimal k = {sparse_results['optimal_k']}\")          # Compare metrics         original_metrics = signature_results['metrics']         sparse_metrics = sparse_results['metrics']          print(\"\\n   Comparison of results:\")         print(\"   k | Original RSS | With pConstant RSS\")         print(\"   --|--------------|------------------\")         for k in range(2, 5):             orig_rss = original_metrics[original_metrics['k'] == k]['mean_rss']             sparse_rss = sparse_metrics[sparse_metrics['k'] == k]['mean_rss']             if not orig_rss.empty and not sparse_rss.empty:                 print(f\"   {k} | {orig_rss.iloc[0]:.4f}      | {sparse_rss.iloc[0]:.4f}\")      except Exception as e:         print(f\"   \u274c Error with pConstant: {e}\")      # Test with different run counts     print(\"\\n2. Testing with more runs for better stability:\")     try:         # Use estimateSignatures as standalone function (Option 1 approach)         stable_results = estimateSignatures(             contexts_df,             nMin=2,             nTry=4,             nrun=5,  # More runs for better stability             parallel=2         )          print(f\"   \u2713 With more runs: Optimal k = {stable_results['optimal_k']}\")          # Compare stability metrics         orig_coph = signature_results['metrics']['cophenetic_corr'].mean()         stable_coph = stable_results['metrics']['cophenetic_corr'].mean()         print(\"   Average cophenetic correlation:\")         print(f\"   - Original (3 runs): {orig_coph:.4f}\")         print(f\"   - Stable (5 runs): {stable_coph:.4f}\")      except Exception as e:         print(f\"   \u274c Error with more runs: {e}\")  else:     print(\"Skipping parameter testing - signature estimation not completed\")  <pre>2025-08-01 00:50:25,159 | INFO | pyMut.analysis.mutational_signature | Starting signature estimation for k=2 to k=4 with 2 runs each\n2025-08-01 00:50:25,160 | INFO | pyMut.analysis.mutational_signature | Normalized matrix shape: (96, 180)\n2025-08-01 00:50:25,160 | WARNING | pyMut.analysis.mutational_signature | Matrix has 91.18% zeros, adding pConstant=0.01\n2025-08-01 00:50:25,209 | INFO | pyMut.analysis.mutational_signature | Signature estimation completed. Suggested optimal k: 3\n2025-08-01 00:50:25,216 | INFO | pyMut.analysis.mutational_signature | Starting signature estimation for k=2 to k=4 with 5 runs each\n2025-08-01 00:50:25,218 | INFO | pyMut.analysis.mutational_signature | Normalized matrix shape: (96, 180)\n</pre> <pre>Testing signature estimation with different parameters...\n\n1. Testing with pConstant (for handling sparse matrices):\n   \u2713 With pConstant: Optimal k = 3\n\n   Comparison of results:\n   k | Original RSS | With pConstant RSS\n   --|--------------|------------------\n   2 | 25.1447      | 6.6628\n   3 | 22.7612      | 6.0348\n   4 | 20.9527      | 5.5707\n\n2. Testing with more runs for better stability:\n</pre> <pre>2025-08-01 00:50:25,299 | INFO | pyMut.analysis.mutational_signature | Signature estimation completed. Suggested optimal k: 3\n</pre> <pre>   \u2713 With more runs: Optimal k = 3\n   Average cophenetic correlation:\n   - Original (3 runs): 0.8344\n   - Stable (5 runs): 0.8068\n</pre> In\u00a0[16]: Copied! <pre>if 'signature_results' in locals() and signature_results is not None:\n    print(\"Matrix Normalization Analysis:\")\n    print(\"=\" * 40)\n\n    # Show original vs normalized matrix statistics\n    original_matrix = signature_results['original_matrix']\n    normalized_matrix = signature_results['normalized_matrix']\n\n    print(\"Original Matrix:\")\n    print(f\"- Shape: {original_matrix.shape}\")\n    print(f\"- Sum: {original_matrix.sum():.0f}\")\n    print(f\"- Mean: {original_matrix.mean():.4f}\")\n    print(f\"- Std: {original_matrix.std():.4f}\")\n    print(f\"- Zero fraction: {(original_matrix == 0).sum() / original_matrix.size:.2%}\")\n\n    print(\"\\nNormalized Matrix (row-wise frequencies):\")\n    print(f\"- Shape: {normalized_matrix.shape}\")\n    print(f\"- Sum: {normalized_matrix.sum():.4f}\")\n    print(f\"- Mean: {normalized_matrix.mean():.4f}\")\n    print(f\"- Std: {normalized_matrix.std():.4f}\")\n    print(f\"- Zero fraction: {(normalized_matrix == 0).sum() / normalized_matrix.size:.2%}\")\n\n    # Visualize the normalization effect\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))\n\n    # Original matrix distribution\n    ax1.hist(original_matrix.flatten(), bins=50, alpha=0.7, color='blue', edgecolor='black')\n    ax1.set_xlabel('Mutation Count')\n    ax1.set_ylabel('Frequency')\n    ax1.set_title('Original Matrix Value Distribution')\n    ax1.set_yscale('log')\n\n    # Normalized matrix distribution\n    ax2.hist(normalized_matrix.flatten(), bins=50, alpha=0.7, color='green', edgecolor='black')\n    ax2.set_xlabel('Normalized Frequency')\n    ax2.set_ylabel('Frequency')\n    ax2.set_title('Normalized Matrix Value Distribution')\n    ax2.set_yscale('log')\n\n    plt.tight_layout()\n    plt.show()\n</pre> if 'signature_results' in locals() and signature_results is not None:     print(\"Matrix Normalization Analysis:\")     print(\"=\" * 40)      # Show original vs normalized matrix statistics     original_matrix = signature_results['original_matrix']     normalized_matrix = signature_results['normalized_matrix']      print(\"Original Matrix:\")     print(f\"- Shape: {original_matrix.shape}\")     print(f\"- Sum: {original_matrix.sum():.0f}\")     print(f\"- Mean: {original_matrix.mean():.4f}\")     print(f\"- Std: {original_matrix.std():.4f}\")     print(f\"- Zero fraction: {(original_matrix == 0).sum() / original_matrix.size:.2%}\")      print(\"\\nNormalized Matrix (row-wise frequencies):\")     print(f\"- Shape: {normalized_matrix.shape}\")     print(f\"- Sum: {normalized_matrix.sum():.4f}\")     print(f\"- Mean: {normalized_matrix.mean():.4f}\")     print(f\"- Std: {normalized_matrix.std():.4f}\")     print(f\"- Zero fraction: {(normalized_matrix == 0).sum() / normalized_matrix.size:.2%}\")      # Visualize the normalization effect     fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))      # Original matrix distribution     ax1.hist(original_matrix.flatten(), bins=50, alpha=0.7, color='blue', edgecolor='black')     ax1.set_xlabel('Mutation Count')     ax1.set_ylabel('Frequency')     ax1.set_title('Original Matrix Value Distribution')     ax1.set_yscale('log')      # Normalized matrix distribution     ax2.hist(normalized_matrix.flatten(), bins=50, alpha=0.7, color='green', edgecolor='black')     ax2.set_xlabel('Normalized Frequency')     ax2.set_ylabel('Frequency')     ax2.set_title('Normalized Matrix Value Distribution')     ax2.set_yscale('log')      plt.tight_layout()     plt.show()  <pre>Matrix Normalization Analysis:\n========================================\nOriginal Matrix:\n- Shape: (96, 180)\n- Sum: 1911\n- Mean: 0.1106\n- Std: 0.4067\n- Zero fraction: 91.18%\n\nNormalized Matrix (row-wise frequencies):\n- Shape: (96, 180)\n- Sum: 180.0000\n- Mean: 0.0104\n- Std: 0.0454\n- Zero fraction: 91.18%\n</pre> In\u00a0[17]: Copied! <pre># Import the extract_signatures function\nfrom pyMut.analysis.mutational_signature import extract_signatures\n\nprint(\"\u2713 extract_signatures function imported\")\n</pre> # Import the extract_signatures function from pyMut.analysis.mutational_signature import extract_signatures  print(\"\u2713 extract_signatures function imported\")  <pre>\u2713 extract_signatures function imported\n</pre> In\u00a0[18]: Copied! <pre># Extract signatures using the optimal k from estimation\nif 'signature_results' in locals() and signature_results is not None:\n    optimal_k = signature_results['optimal_k']\n\n    print(f\"Extracting {optimal_k} signatures...\")\n\n    try:\n        # Extract signatures with reduced runs for demo\n        extraction_results = extract_signatures(\n            contexts_df, \n            k=optimal_k, \n            nrun=10,  # Reduced for faster demo\n            random_seed=42  # For reproducibility\n        )\n\n        print(\"\u2713 Signature extraction completed\")\n        print(f\"\u2713 W matrix shape: {extraction_results['W'].shape}\")\n        print(f\"\u2713 H matrix shape: {extraction_results['H'].shape}\")\n        print(f\"\u2713 Best run: {extraction_results['best_run']}\")\n        print(f\"\u2713 Successful runs: {extraction_results['successful_runs']}/{extraction_results['total_runs']}\")\n\n    except Exception as e:\n        print(f\"\u274c Error during signature extraction: {e}\")\n        extraction_results = None\n\nelse:\n    print(\"\u274c Signature estimation results not available\")\n    print(\"Skipping signature extraction - requires completed signature estimation\")\n    extraction_results = None\n</pre> # Extract signatures using the optimal k from estimation if 'signature_results' in locals() and signature_results is not None:     optimal_k = signature_results['optimal_k']      print(f\"Extracting {optimal_k} signatures...\")      try:         # Extract signatures with reduced runs for demo         extraction_results = extract_signatures(             contexts_df,              k=optimal_k,              nrun=10,  # Reduced for faster demo             random_seed=42  # For reproducibility         )          print(\"\u2713 Signature extraction completed\")         print(f\"\u2713 W matrix shape: {extraction_results['W'].shape}\")         print(f\"\u2713 H matrix shape: {extraction_results['H'].shape}\")         print(f\"\u2713 Best run: {extraction_results['best_run']}\")         print(f\"\u2713 Successful runs: {extraction_results['successful_runs']}/{extraction_results['total_runs']}\")      except Exception as e:         print(f\"\u274c Error during signature extraction: {e}\")         extraction_results = None  else:     print(\"\u274c Signature estimation results not available\")     print(\"Skipping signature extraction - requires completed signature estimation\")     extraction_results = None  <pre>2025-08-01 00:50:26,060 | INFO | pyMut.analysis.mutational_signature | Extracting 3 signatures with 10 runs using NMF with KL divergence\n2025-08-01 00:50:26,060 | INFO | pyMut.analysis.mutational_signature | Matrix normalized to frequencies with pseudocount 0.0001\n</pre> <pre>Extracting 3 signatures...\n</pre> <pre>2025-08-01 00:50:26,427 | INFO | pyMut.analysis.mutational_signature | Best result from run 3 with error 279.324511\n2025-08-01 00:50:26,428 | INFO | pyMut.analysis.mutational_signature | Successful runs: 10/10\n2025-08-01 00:50:26,429 | INFO | pyMut.analysis.mutational_signature | Signatures extracted and normalized successfully\n</pre> <pre>\u2713 Signature extraction completed\n\u2713 W matrix shape: (96, 3)\n\u2713 H matrix shape: (3, 180)\n\u2713 Best run: 3\n\u2713 Successful runs: 10/10\n</pre> In\u00a0[19]: Copied! <pre>if extraction_results is not None:\n    W_matrix = extraction_results['W']\n    H_matrix = extraction_results['H']\n\n    # Create signature profile heatmap\n    plt.figure(figsize=(12, 8))\n\n    # Create a heatmap of signature profiles\n    sns.heatmap(W_matrix, \n                cmap='YlOrRd',\n                cbar_kws={'label': 'Mutation Probability'},\n                yticklabels=contexts_df.index,\n                xticklabels=[f'Sig_{i+1}' for i in range(W_matrix.shape[1])])\n\n    plt.title(f'Mutational Signature Profiles (W Matrix)\\n{W_matrix.shape[1]} Signatures \u00d7 96 Trinucleotide Contexts')\n    plt.xlabel('Signatures')\n    plt.ylabel('Trinucleotide Contexts')\n    plt.tight_layout()\n    plt.show()\n\n    # Show signature contributions across samples\n    plt.figure(figsize=(15, 6))\n\n    # Plot signature contributions for top samples\n    top_samples = contexts_df.sum(axis=0).nlargest(20).index\n    H_subset = pd.DataFrame(H_matrix, \n                           columns=contexts_df.columns,\n                           index=[f'Sig_{i+1}' for i in range(H_matrix.shape[0])])\n\n    sns.heatmap(H_subset[top_samples], \n                cmap='Blues',\n                cbar_kws={'label': 'Signature Contribution'},\n                xticklabels=False)  # Hide sample names for clarity\n\n    plt.title(f'Signature Contributions (H Matrix)\\n{H_matrix.shape[0]} Signatures \u00d7 Top 20 Samples')\n    plt.xlabel('Samples (Top 20 by mutation count)')\n    plt.ylabel('Signatures')\n    plt.tight_layout()\n    plt.show()\n\nelse:\n    print(\"Signature extraction results not available for visualization\")\n</pre> if extraction_results is not None:     W_matrix = extraction_results['W']     H_matrix = extraction_results['H']      # Create signature profile heatmap     plt.figure(figsize=(12, 8))      # Create a heatmap of signature profiles     sns.heatmap(W_matrix,                  cmap='YlOrRd',                 cbar_kws={'label': 'Mutation Probability'},                 yticklabels=contexts_df.index,                 xticklabels=[f'Sig_{i+1}' for i in range(W_matrix.shape[1])])      plt.title(f'Mutational Signature Profiles (W Matrix)\\n{W_matrix.shape[1]} Signatures \u00d7 96 Trinucleotide Contexts')     plt.xlabel('Signatures')     plt.ylabel('Trinucleotide Contexts')     plt.tight_layout()     plt.show()      # Show signature contributions across samples     plt.figure(figsize=(15, 6))      # Plot signature contributions for top samples     top_samples = contexts_df.sum(axis=0).nlargest(20).index     H_subset = pd.DataFrame(H_matrix,                             columns=contexts_df.columns,                            index=[f'Sig_{i+1}' for i in range(H_matrix.shape[0])])      sns.heatmap(H_subset[top_samples],                  cmap='Blues',                 cbar_kws={'label': 'Signature Contribution'},                 xticklabels=False)  # Hide sample names for clarity      plt.title(f'Signature Contributions (H Matrix)\\n{H_matrix.shape[0]} Signatures \u00d7 Top 20 Samples')     plt.xlabel('Samples (Top 20 by mutation count)')     plt.ylabel('Signatures')     plt.tight_layout()     plt.show()  else:     print(\"Signature extraction results not available for visualization\")  In\u00a0[20]: Copied! <pre>if extraction_results is not None:\n    W_matrix = extraction_results['W']\n\n    print(\"Signature Quality Assessment:\")\n    print(\"=\" * 40)\n\n    # Verify W columns sum to 1 (signature normalization)\n    column_sums = W_matrix.sum(axis=0)\n    print(f\"\u2713 W matrix columns sum to 1: {np.allclose(column_sums, 1.0)}\")\n    print(f\"Column sums: {column_sums}\")\n\n    # Show reconstruction error\n    print(f\"\u2713 Reconstruction error: {extraction_results['reconstruction_error']:.6f}\")\n\n    # Show error distribution across runs\n    all_errors = extraction_results['all_errors']\n    finite_errors = [e for e in all_errors if np.isfinite(e)]\n\n    if finite_errors:\n        print(\"\u2713 Error statistics across runs:\")\n        print(f\"  - Mean: {np.mean(finite_errors):.6f}\")\n        print(f\"  - Std: {np.std(finite_errors):.6f}\")\n        print(f\"  - Min: {np.min(finite_errors):.6f}\")\n        print(f\"  - Max: {np.max(finite_errors):.6f}\")\n\nelse:\n    print(\"Signature extraction results not available for quality assessment\")\n</pre> if extraction_results is not None:     W_matrix = extraction_results['W']      print(\"Signature Quality Assessment:\")     print(\"=\" * 40)      # Verify W columns sum to 1 (signature normalization)     column_sums = W_matrix.sum(axis=0)     print(f\"\u2713 W matrix columns sum to 1: {np.allclose(column_sums, 1.0)}\")     print(f\"Column sums: {column_sums}\")      # Show reconstruction error     print(f\"\u2713 Reconstruction error: {extraction_results['reconstruction_error']:.6f}\")      # Show error distribution across runs     all_errors = extraction_results['all_errors']     finite_errors = [e for e in all_errors if np.isfinite(e)]      if finite_errors:         print(\"\u2713 Error statistics across runs:\")         print(f\"  - Mean: {np.mean(finite_errors):.6f}\")         print(f\"  - Std: {np.std(finite_errors):.6f}\")         print(f\"  - Min: {np.min(finite_errors):.6f}\")         print(f\"  - Max: {np.max(finite_errors):.6f}\")  else:     print(\"Signature extraction results not available for quality assessment\")  <pre>Signature Quality Assessment:\n========================================\n\u2713 W matrix columns sum to 1: True\nColumn sums: [1. 1. 1.]\n\u2713 Reconstruction error: 279.324511\n\u2713 Error statistics across runs:\n  - Mean: 279.324534\n  - Std: 0.000014\n  - Min: 279.324511\n  - Max: 279.324564\n</pre> In\u00a0[21]: Copied! <pre># Compare extracted signatures with COSMIC catalog\nif extraction_results is not None:\n    from pyMut.analysis.mutational_signature import compare_signatures\n\n    # Path to COSMIC catalog\n    cosmic_path = \"../../../src/pyMut/data/examples/COSMIC_catalogue-signatures_SBS96_v3.4/COSMIC_v3.4_SBS_GRCh37.txt\"\n\n    if os.path.exists(cosmic_path):\n        # Compare signatures with COSMIC catalog\n        comparison_results = compare_signatures(\n\n            W=extraction_results['W'],\n            cosmic_path=cosmic_path,\n            min_cosine=0.6,\n            return_matrix=True\n        )\n\n        # Display results\n        summary_df = comparison_results['summary_df']\n        print(\"COSMIC Signature Comparison Results:\")\n        print(\"=\" * 50)\n        print(summary_df.to_string(index=False))\n\n        # Show cosine similarity statistics\n        cosine_matrix = comparison_results['cosine_matrix']\n        max_similarities = cosine_matrix.max(axis=1)\n\n        print(\"\\nSimilarity Statistics:\")\n        print(f\"- Signatures with matches (\u22650.6): {(max_similarities &gt;= 0.6).sum()}/{len(max_similarities)}\")\n        print(f\"- Average max similarity: {max_similarities.mean():.3f}\")\n        print(f\"- Best similarity: {max_similarities.max():.3f}\")\n\n    else:\n        print(f\"COSMIC catalog not found at: {cosmic_path}\")\n\nelse:\n    print(\"Signature extraction results required for COSMIC comparison\")\n</pre> # Compare extracted signatures with COSMIC catalog if extraction_results is not None:     from pyMut.analysis.mutational_signature import compare_signatures      # Path to COSMIC catalog     cosmic_path = \"../../../src/pyMut/data/examples/COSMIC_catalogue-signatures_SBS96_v3.4/COSMIC_v3.4_SBS_GRCh37.txt\"      if os.path.exists(cosmic_path):         # Compare signatures with COSMIC catalog         comparison_results = compare_signatures(              W=extraction_results['W'],             cosmic_path=cosmic_path,             min_cosine=0.6,             return_matrix=True         )          # Display results         summary_df = comparison_results['summary_df']         print(\"COSMIC Signature Comparison Results:\")         print(\"=\" * 50)         print(summary_df.to_string(index=False))          # Show cosine similarity statistics         cosine_matrix = comparison_results['cosine_matrix']         max_similarities = cosine_matrix.max(axis=1)          print(\"\\nSimilarity Statistics:\")         print(f\"- Signatures with matches (\u22650.6): {(max_similarities &gt;= 0.6).sum()}/{len(max_similarities)}\")         print(f\"- Average max similarity: {max_similarities.mean():.3f}\")         print(f\"- Best similarity: {max_similarities.max():.3f}\")      else:         print(f\"COSMIC catalog not found at: {cosmic_path}\")  else:     print(\"Signature extraction results required for COSMIC comparison\")  <pre>2025-08-01 00:50:27,327 | INFO | pyMut.analysis.mutational_signature | Comparing 3 signatures with COSMIC catalog\n2025-08-01 00:50:27,330 | INFO | pyMut.analysis.mutational_signature | Loaded COSMIC catalog with shape (96, 87)\n2025-08-01 00:50:27,331 | INFO | pyMut.analysis.mutational_signature | Aligning COSMIC catalog with standard trinucleotide context order...\n2025-08-01 00:50:27,331 | INFO | pyMut.analysis.mutational_signature | COSMIC catalog successfully aligned to standard context order\n2025-08-01 00:50:27,332 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS7c (ends with 'c')\n2025-08-01 00:50:27,332 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS10c (ends with 'c')\n2025-08-01 00:50:27,332 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS27 (specified artifact)\n2025-08-01 00:50:27,332 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS40c (ends with 'c')\n2025-08-01 00:50:27,333 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS43 (specified artifact)\n2025-08-01 00:50:27,333 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS45 (specified artifact)\n2025-08-01 00:50:27,334 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS46 (specified artifact)\n2025-08-01 00:50:27,334 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS47 (specified artifact)\n2025-08-01 00:50:27,334 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS48 (specified artifact)\n2025-08-01 00:50:27,335 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS49 (specified artifact)\n2025-08-01 00:50:27,335 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS50 (specified artifact)\n2025-08-01 00:50:27,335 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS51 (specified artifact)\n2025-08-01 00:50:27,335 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS52 (specified artifact)\n2025-08-01 00:50:27,336 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS53 (specified artifact)\n2025-08-01 00:50:27,336 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS54 (specified artifact)\n2025-08-01 00:50:27,336 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS55 (specified artifact)\n2025-08-01 00:50:27,337 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS56 (specified artifact)\n2025-08-01 00:50:27,337 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS57 (specified artifact)\n2025-08-01 00:50:27,337 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS58 (specified artifact)\n2025-08-01 00:50:27,338 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS59 (specified artifact)\n2025-08-01 00:50:27,338 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS60 (specified artifact)\n2025-08-01 00:50:27,338 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS95 (specified artifact)\n2025-08-01 00:50:27,339 | INFO | pyMut.analysis.mutational_signature | Found 64 valid COSMIC signatures after filtering\n2025-08-01 00:50:27,339 | INFO | pyMut.analysis.mutational_signature | COSMIC signatures normalized\n2025-08-01 00:50:27,340 | INFO | pyMut.analysis.mutational_signature | Calculated cosine similarity matrix: (3, 64)\n2025-08-01 00:50:27,340 | INFO | pyMut.analysis.mutational_signature | Created summary with 3 signature comparisons\n</pre> <pre>COSMIC Signature Comparison Results:\n==================================================\nSignature_W Best_COSMIC   Cosine Aetiology\nSignature_1        SBS1 0.701528   Unknown\nSignature_2       SBS15 0.769173   Unknown\nSignature_3       SBS87 0.725083   Unknown\n\nSimilarity Statistics:\n- Signatures with matches (\u22650.6): 3/3\n- Average max similarity: 0.732\n- Best similarity: 0.769\n</pre>"},{"location":"examples/analysis/mutational_signatures/#trinucleotide-matrix-analysis-demo","title":"Trinucleotide Matrix Analysis Demo\u00b6","text":"<p>This notebook demonstrates the <code>trinucleotideMatrix()</code> method for mutational signature analysis in pyMut.</p> <p>The method generates a 96 x samples matrix representing trinucleotide contexts for all SNVs in the dataset.</p>"},{"location":"examples/analysis/mutational_signatures/#setup-and-imports","title":"Setup and Imports\u00b6","text":""},{"location":"examples/analysis/mutational_signatures/#data-loading","title":"Data Loading\u00b6","text":""},{"location":"examples/analysis/mutational_signatures/#trinucleotide-matrix-generation","title":"Trinucleotide Matrix Generation\u00b6","text":""},{"location":"examples/analysis/mutational_signatures/#matrix-overview","title":"Matrix Overview\u00b6","text":""},{"location":"examples/analysis/mutational_signatures/#top-trinucleotide-contexts","title":"Top Trinucleotide Contexts\u00b6","text":""},{"location":"examples/analysis/mutational_signatures/#sample-distribution","title":"Sample Distribution\u00b6","text":""},{"location":"examples/analysis/mutational_signatures/#mutation-type-distribution","title":"Mutation Type Distribution\u00b6","text":""},{"location":"examples/analysis/mutational_signatures/#trinucleotide-context-heatmap","title":"Trinucleotide Context Heatmap\u00b6","text":""},{"location":"examples/analysis/mutational_signatures/#context-enrichment-analysis","title":"Context Enrichment Analysis\u00b6","text":""},{"location":"examples/analysis/mutational_signatures/#summary","title":"Summary\u00b6","text":"<p>The trinucleotide matrix analysis has been successfully completed:</p> <ul> <li>Matrix Generated: 96 trinucleotide contexts \u00d7 samples</li> <li>SNVs Processed: All valid single nucleotide variants with trinucleotide context</li> <li>Mutation Types: Distribution shows typical cancer mutation patterns</li> <li>Sample Variation: Clear differences in mutation burden across samples</li> </ul> <p>This matrix can be used for:</p> <ul> <li>Mutational signature analysis</li> <li>Sample clustering based on mutation patterns</li> <li>Comparison with known mutational signatures (COSMIC)</li> <li>Identification of mutational processes</li> </ul>"},{"location":"examples/analysis/mutational_signatures/#signature-estimation-testing","title":"Signature Estimation Testing\u00b6","text":"<p>Now we'll test the <code>estimateSignatures</code> function using the trinucleotide context matrix we generated above.</p>"},{"location":"examples/analysis/mutational_signatures/#basic-signature-estimation","title":"Basic Signature Estimation\u00b6","text":"<p>Let's run signature estimation with default parameters to find the optimal number of signatures.</p>"},{"location":"examples/analysis/mutational_signatures/#signature-estimation-results","title":"Signature Estimation Results\u00b6","text":"<p>Let's examine the metrics and results from the signature estimation.</p>"},{"location":"examples/analysis/mutational_signatures/#visualization-of-signature-estimation-results","title":"Visualization of Signature Estimation Results\u00b6","text":"<p>Let's create visualizations to better understand the signature estimation results.</p>"},{"location":"examples/analysis/mutational_signatures/#testing-with-different-parameters","title":"Testing with Different Parameters\u00b6","text":"<p>Let's test the signature estimation with different parameters to see how they affect the results.</p>"},{"location":"examples/analysis/mutational_signatures/#matrix-normalization-analysis","title":"Matrix Normalization Analysis\u00b6","text":"<p>Let's examine how the matrix normalization affects the signature estimation process.</p>"},{"location":"examples/analysis/mutational_signatures/#summary-of-signature-estimation-testing","title":"Summary of Signature Estimation Testing\u00b6","text":"<p>The signature estimation testing has been completed with the following key findings:</p>"},{"location":"examples/analysis/mutational_signatures/#results-summary","title":"Results Summary\u00b6","text":"<ul> <li>Optimal Number of Signatures: The analysis suggests an optimal number of signatures based on cophenetic correlation analysis</li> <li>Stability Assessment: Multiple NMF runs provide stability metrics to ensure robust results</li> <li>Parameter Sensitivity: Different parameters (pConstant, number of runs) can affect the results</li> </ul>"},{"location":"examples/analysis/mutational_signatures/#key-metrics-explained","title":"Key Metrics Explained\u00b6","text":"<ul> <li>RSS (Residual Sum of Squares): Measures reconstruction error - lower is better</li> <li>Cophenetic Correlation: Measures clustering stability - higher is better</li> <li>Dispersion: Coefficient of variation of RSS across runs - lower indicates more stable results</li> </ul>"},{"location":"examples/analysis/mutational_signatures/#practical-applications","title":"Practical Applications\u00b6","text":"<p>This signature estimation can be used for:</p> <ul> <li>Identifying the optimal number of mutational signatures in the dataset</li> <li>Understanding mutational processes active in the samples</li> <li>Comparing with known COSMIC signatures</li> <li>Quality control for mutational signature analysis</li> </ul>"},{"location":"examples/analysis/mutational_signatures/#next-steps","title":"Next Steps\u00b6","text":"<p>The estimated signatures can be further analyzed using:</p> <ul> <li>Signature extraction methods</li> <li>Comparison with reference signatures</li> <li>Biological interpretation of signature patterns</li> <li>Sample-specific signature activity analysis</li> </ul>"},{"location":"examples/analysis/mutational_signatures/#signature-extraction","title":"Signature Extraction\u00b6","text":"<p>Now that we have estimated the optimal number of signatures, let's extract the actual signature profiles using the <code>extract_signatures</code> function.</p>"},{"location":"examples/analysis/mutational_signatures/#extract-mutational-signatures","title":"Extract Mutational Signatures\u00b6","text":"<p>Using the optimal k value from signature estimation, we'll extract the signature profiles (W matrix) and their contributions (H matrix).</p>"},{"location":"examples/analysis/mutational_signatures/#signature-profiles-visualization","title":"Signature Profiles Visualization\u00b6","text":"<p>Let's visualize the extracted signature profiles to understand the mutational patterns.</p>"},{"location":"examples/analysis/mutational_signatures/#signature-quality-assessment","title":"Signature Quality Assessment\u00b6","text":"<p>Let's assess the quality of the extracted signatures.</p>"},{"location":"examples/analysis/mutational_signatures/#summary-of-signature-extraction","title":"Summary of Signature Extraction\u00b6","text":"<p>The signature extraction analysis has been completed with the following results:</p>"},{"location":"examples/analysis/mutational_signatures/#extraction-results","title":"Extraction Results\u00b6","text":"<ul> <li>Signature Profiles (W Matrix): Each column represents a mutational signature with probabilities across 96 trinucleotide contexts</li> <li>Signature Contributions (H Matrix): Shows how much each signature contributes to each sample</li> <li>Quality Metrics: Reconstruction error and stability across multiple runs</li> </ul>"},{"location":"examples/analysis/mutational_signatures/#key-features","title":"Key Features\u00b6","text":"<ul> <li>Normalization: Signature profiles are normalized so each sums to 1</li> <li>Stability: Multiple NMF runs ensure robust results</li> <li>Interpretability: Results ready for biological interpretation and comparison with known signatures</li> </ul>"},{"location":"examples/analysis/mutational_signatures/#applications","title":"Applications\u00b6","text":"<p>The extracted signatures can be used for:</p> <ul> <li>Comparison with COSMIC mutational signatures</li> <li>Identification of mutational processes</li> <li>Sample clustering based on signature activity</li> <li>Clinical interpretation of mutation patterns</li> </ul>"},{"location":"examples/analysis/mutational_signatures/#cosmic-signature-comparison","title":"COSMIC Signature Comparison\u00b6","text":"<p>Now let's compare our extracted signatures with the COSMIC mutational signature catalog to identify known mutational processes.</p>"},{"location":"examples/analysis/mutational_signatures_VCF/","title":"Trinucleotide Matrix Analysis Demo - VCF","text":"In\u00a0[1]: Copied! <pre>import sys\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom pyMut.input import read_vcf\n</pre> import sys import os import pandas as pd import matplotlib.pyplot as plt import seaborn as sns  from pyMut.input import read_vcf In\u00a0[2]: Copied! <pre># Define file paths\nvcf_file = \"../../../src/pyMut/data/examples/VCF/subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased_vep_protein_gene_variant_class.vcf\"\nfasta_file = \"../../../src/pyMut/data/resources/genome/GRCh38/GRCh38.p14.genome.fa\"\n\n# Check if files exist\nif not os.path.exists(vcf_file):\n    print(f\"\u274c VCF file not found: {vcf_file}\")\nelse:\n    print(\"\u2713 VCF file found\")\n\nif not os.path.exists(fasta_file):\n    print(f\"\u274c FASTA file not found: {fasta_file}\")\nelse:\n    print(\"\u2713 FASTA file found\")\n</pre> # Define file paths vcf_file = \"../../../src/pyMut/data/examples/VCF/subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased_vep_protein_gene_variant_class.vcf\" fasta_file = \"../../../src/pyMut/data/resources/genome/GRCh38/GRCh38.p14.genome.fa\"  # Check if files exist if not os.path.exists(vcf_file):     print(f\"\u274c VCF file not found: {vcf_file}\") else:     print(\"\u2713 VCF file found\")  if not os.path.exists(fasta_file):     print(f\"\u274c FASTA file not found: {fasta_file}\") else:     print(\"\u2713 FASTA file found\")  <pre>\u2713 VCF file found\n\u2713 FASTA file found\n</pre> In\u00a0[3]: Copied! <pre># Load the VCF file\npymut = read_vcf(vcf_file,assembly=\"38\")\n\nprint(f\"\u2713 Loaded {len(pymut.data):,} mutations\")\nprint(f\"\u2713 Data shape: {pymut.data.shape}\")\n\n# Show basic information about the VCF data\nprint(f\"\u2713 Number of samples: {len(pymut.samples)}\")\nprint(f\"\u2713 Available columns: {len(pymut.data.columns)}\")\n</pre> # Load the VCF file pymut = read_vcf(vcf_file,assembly=\"38\")  print(f\"\u2713 Loaded {len(pymut.data):,} mutations\") print(f\"\u2713 Data shape: {pymut.data.shape}\")  # Show basic information about the VCF data print(f\"\u2713 Number of samples: {len(pymut.samples)}\") print(f\"\u2713 Available columns: {len(pymut.data.columns)}\")  <pre>2025-08-01 00:53:27,242 | INFO | pyMut.input | Starting optimized VCF reading: ../../../src/pyMut/data/examples/VCF/subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased_vep_protein_gene_variant_class.vcf\n2025-08-01 00:53:27,243 | INFO | pyMut.input | Reading VCF with pandas + pyarrow optimization...\n2025-08-01 00:53:27,623 | INFO | pyMut.input | Pandas reading completed.\n2025-08-01 00:53:27,634 | INFO | pyMut.input | Starting vectorized genotype conversion before INFO expansion...\n2025-08-01 00:53:31,187 | INFO | pyMut.input | GT conversion completed: 3.55 s\n2025-08-01 00:53:31,187 | INFO | pyMut.input | Expanding INFO column with vectorized operations...\n2025-08-01 00:53:31,405 | INFO | pyMut.input | Expanding VEP CSQ annotations into individual columns...\n2025-08-01 00:53:31,547 | INFO | pyMut.input | CSQ expanded into 31 VEP annotation columns in 0.14 s\n2025-08-01 00:53:31,548 | INFO | pyMut.input | Generating Hugo_Symbol column from VEP_SYMBOL and VEP_NEAREST...\n2025-08-01 00:53:31,551 | INFO | pyMut.input | Hugo_Symbol column generated in 0.00 s\n2025-08-01 00:53:31,551 | INFO | pyMut.input | Generating Variant_Classification from VEP_Consequence and VEP_VARIANT_CLASS...\n2025-08-01 00:53:31,640 | INFO | pyMut.input | Variant_Classification generated in 0.09 s\n2025-08-01 00:53:31,641 | INFO | pyMut.input | Generating Variant_Type from VEP_VARIANT_CLASS...\n2025-08-01 00:53:31,698 | INFO | pyMut.input | Variant_Type generated in 0.06 s\n2025-08-01 00:53:31,720 | INFO | pyMut.input | Using 2548 sample columns for output organization\n2025-08-01 00:53:31,797 | INFO | pyMut.input | Saving to cache: ../../../src/pyMut/data/examples/VCF/.pymut_cache/subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased_vep_protein_gene_variant_class_e646b1f7d5dca1c4.parquet\n2025-08-01 00:53:32,139 | INFO | pyMut.input | VCF processed successfully: 1000 rows, 2601 columns in 4.90 seconds\n</pre> <pre>\u2713 Loaded 1,000 mutations\n\u2713 Data shape: (1000, 2601)\n\u2713 Number of samples: 2548\n\u2713 Available columns: 2601\n</pre> In\u00a0[4]: Copied! <pre># Display basic statistics about the VCF data\nprint(\"VCF Data Overview:\")\nprint(\"=\" * 50)\n\n# Show variant types if available\nif 'Variant_Type' in pymut.data.columns:\n    variant_types = pymut.data['Variant_Type'].value_counts()\n    print(\"Variant Types:\")\n    print(variant_types)\n    print()\n\n# Show variant classifications if available\nif 'Variant_Classification' in pymut.data.columns:\n    variant_classes = pymut.data['Variant_Classification'].value_counts().head(10)\n    print(\"Top 10 Variant Classifications:\")\n    print(variant_classes)\n    print()\n\n# Show chromosome distribution\nif 'Chromosome' in pymut.data.columns:\n    chrom_counts = pymut.data['Chromosome'].value_counts().head(10)\n    print(\"Top 10 Chromosomes by variant count:\")\n    print(chrom_counts)\n</pre> # Display basic statistics about the VCF data print(\"VCF Data Overview:\") print(\"=\" * 50)  # Show variant types if available if 'Variant_Type' in pymut.data.columns:     variant_types = pymut.data['Variant_Type'].value_counts()     print(\"Variant Types:\")     print(variant_types)     print()  # Show variant classifications if available if 'Variant_Classification' in pymut.data.columns:     variant_classes = pymut.data['Variant_Classification'].value_counts().head(10)     print(\"Top 10 Variant Classifications:\")     print(variant_classes)     print()  # Show chromosome distribution if 'Chromosome' in pymut.data.columns:     chrom_counts = pymut.data['Chromosome'].value_counts().head(10)     print(\"Top 10 Chromosomes by variant count:\")     print(chrom_counts)  <pre>VCF Data Overview:\n==================================================\nVariant Types:\nVariant_Type\nSNP        947\nDEL         42\nINS         11\nDNP          0\nTNP          0\nONP          0\nIND          0\nINV          0\nCNV          0\nUNKNOWN      0\nName: count, dtype: int64\n\nTop 10 Variant Classifications:\nVariant_Classification\nINTRON               513\n5'FLANK              164\n3'FLANK              145\nRNA                   61\n5'UTR                 24\nSILENT                16\nINTRON_DEL            16\n5'FLANK_DEL           14\nMISSENSE_MUTATION     13\nSPLICE_REGION         10\nName: count, dtype: int64\n\n</pre> In\u00a0[5]: Copied! <pre># Generate trinucleotide context matrix\ncontexts_df, enriched_data = pymut.trinucleotideMatrix(fasta_file)\n\nprint(f\"\u2713 Generated {contexts_df.shape[0]} x {contexts_df.shape[1]} trinucleotide matrix\")\nprint(f\"\u2713 Processed {len(enriched_data):,} SNVs with valid contexts\")\nprint(f\"\u2713 Total mutations in matrix: {contexts_df.sum().sum():,}\")\n</pre> # Generate trinucleotide context matrix contexts_df, enriched_data = pymut.trinucleotideMatrix(fasta_file)  print(f\"\u2713 Generated {contexts_df.shape[0]} x {contexts_df.shape[1]} trinucleotide matrix\") print(f\"\u2713 Processed {len(enriched_data):,} SNVs with valid contexts\") print(f\"\u2713 Total mutations in matrix: {contexts_df.sum().sum():,}\")  <pre>2025-08-01 00:53:32,228 | INFO | pyMut.analysis.mutational_signature | Detected wide format with 2591 sample columns\n2025-08-01 00:53:32,329 | INFO | pyMut.analysis.mutational_signature | Processing 947 SNVs from 1000 total mutations\n2025-08-01 00:53:32,332 | INFO | pyMut.analysis.mutational_signature | Loaded FASTA file: ../../../src/pyMut/data/resources/genome/GRCh38/GRCh38.p14.genome.fa\n2025-08-01 00:53:32,518 | INFO | pyMut.analysis.mutational_signature | Successfully processed 947 SNVs with valid trinucleotide contexts\n2025-08-01 00:53:43,019 | INFO | pyMut.analysis.mutational_signature | Generated 96 x 2591 trinucleotide context matrix\n</pre> <pre>\u2713 Generated 96 x 2591 trinucleotide matrix\n\u2713 Processed 947 SNVs with valid contexts\n\u2713 Total mutations in matrix: 210,305\n</pre> In\u00a0[6]: Copied! <pre># Basic statistics\ntotal_mutations = contexts_df.sum().sum()\nnon_zero_contexts = (contexts_df &gt; 0).sum().sum()\navg_mutations_per_sample = total_mutations / contexts_df.shape[1]\n\n# Create summary statistics\nsummary_stats = pd.DataFrame({\n    'Metric': ['Total Contexts', 'Total Samples', 'Total Mutations', \n               'Non-zero Contexts', 'Avg Mutations/Sample'],\n    'Value': [contexts_df.shape[0], contexts_df.shape[1], total_mutations,\n              non_zero_contexts, f\"{avg_mutations_per_sample:.1f}\"]\n})\n\nprint(\"Matrix Summary:\")\nprint(summary_stats.to_string(index=False))\n</pre> # Basic statistics total_mutations = contexts_df.sum().sum() non_zero_contexts = (contexts_df &gt; 0).sum().sum() avg_mutations_per_sample = total_mutations / contexts_df.shape[1]  # Create summary statistics summary_stats = pd.DataFrame({     'Metric': ['Total Contexts', 'Total Samples', 'Total Mutations',                 'Non-zero Contexts', 'Avg Mutations/Sample'],     'Value': [contexts_df.shape[0], contexts_df.shape[1], total_mutations,               non_zero_contexts, f\"{avg_mutations_per_sample:.1f}\"] })  print(\"Matrix Summary:\") print(summary_stats.to_string(index=False))  <pre>Matrix Summary:\n              Metric  Value\n      Total Contexts     96\n       Total Samples   2591\n     Total Mutations 210305\n   Non-zero Contexts 100050\nAvg Mutations/Sample   81.2\n</pre> In\u00a0[7]: Copied! <pre># Calculate context totals and plot top 15\ncontext_totals = contexts_df.sum(axis=1).sort_values(ascending=False)\n\nplt.figure(figsize=(12, 6))\ntop_contexts = context_totals.head(15)\nbars = plt.bar(range(len(top_contexts)), top_contexts.values, \n               color=sns.color_palette(\"viridis\", len(top_contexts)))\nplt.xlabel('Trinucleotide Context')\nplt.ylabel('Total Mutations')\nplt.title('Top 15 Most Frequent Trinucleotide Contexts')\nplt.xticks(range(len(top_contexts)), top_contexts.index, rotation=45, ha='right')\n\n# Add value labels on bars\nfor i, bar in enumerate(bars):\n    height = bar.get_height()\n    plt.text(bar.get_x() + bar.get_width()/2., height + 5,\n             f'{int(height)}', ha='center', va='bottom', fontsize=9)\n\nplt.tight_layout()\nplt.show()\n</pre> # Calculate context totals and plot top 15 context_totals = contexts_df.sum(axis=1).sort_values(ascending=False)  plt.figure(figsize=(12, 6)) top_contexts = context_totals.head(15) bars = plt.bar(range(len(top_contexts)), top_contexts.values,                 color=sns.color_palette(\"viridis\", len(top_contexts))) plt.xlabel('Trinucleotide Context') plt.ylabel('Total Mutations') plt.title('Top 15 Most Frequent Trinucleotide Contexts') plt.xticks(range(len(top_contexts)), top_contexts.index, rotation=45, ha='right')  # Add value labels on bars for i, bar in enumerate(bars):     height = bar.get_height()     plt.text(bar.get_x() + bar.get_width()/2., height + 5,              f'{int(height)}', ha='center', va='bottom', fontsize=9)  plt.tight_layout() plt.show()  In\u00a0[8]: Copied! <pre># Sample mutation counts\nsample_totals = contexts_df.sum(axis=0).sort_values(ascending=False)\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))\n\n# Top 20 samples\ntop_samples = sample_totals.head(20)\nax1.bar(range(len(top_samples)), top_samples.values, color='skyblue')\nax1.set_xlabel('Sample Rank')\nax1.set_ylabel('Total Mutations')\nax1.set_title('Top 20 Samples by Mutation Count')\nax1.set_xticks(range(0, len(top_samples), 5))\n\n# Distribution histogram\nax2.hist(sample_totals.values, bins=30, color='lightcoral', alpha=0.7, edgecolor='black')\nax2.set_xlabel('Mutations per Sample')\nax2.set_ylabel('Number of Samples')\nax2.set_title('Distribution of Mutations per Sample')\nax2.axvline(sample_totals.mean(), color='red', linestyle='--', \n            label=f'Mean: {sample_totals.mean():.1f}')\nax2.legend()\n\nplt.tight_layout()\nplt.show()\n</pre> # Sample mutation counts sample_totals = contexts_df.sum(axis=0).sort_values(ascending=False) fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))  # Top 20 samples top_samples = sample_totals.head(20) ax1.bar(range(len(top_samples)), top_samples.values, color='skyblue') ax1.set_xlabel('Sample Rank') ax1.set_ylabel('Total Mutations') ax1.set_title('Top 20 Samples by Mutation Count') ax1.set_xticks(range(0, len(top_samples), 5))  # Distribution histogram ax2.hist(sample_totals.values, bins=30, color='lightcoral', alpha=0.7, edgecolor='black') ax2.set_xlabel('Mutations per Sample') ax2.set_ylabel('Number of Samples') ax2.set_title('Distribution of Mutations per Sample') ax2.axvline(sample_totals.mean(), color='red', linestyle='--',              label=f'Mean: {sample_totals.mean():.1f}') ax2.legend()  plt.tight_layout() plt.show()  In\u00a0[9]: Copied! <pre># Extract mutation types from context labels\nmutation_types = []\nfor context in contexts_df.index:\n    # Extract the mutation type from format \"X[REF&gt;ALT]Z\"\n    mutation_type = context.split('[')[1].split(']')[0]\n    mutation_types.append(mutation_type)\n\n# Group by mutation type\nmutation_type_counts = {}\nfor i, mut_type in enumerate(mutation_types):\n    if mut_type not in mutation_type_counts:\n        mutation_type_counts[mut_type] = 0\n    mutation_type_counts[mut_type] += contexts_df.iloc[i].sum()\n\n# Create pie chart\nplt.figure(figsize=(10, 8))\ncolors = sns.color_palette(\"Set3\", len(mutation_type_counts))\nwedges, texts, autotexts = plt.pie(mutation_type_counts.values(), \n                                   labels=mutation_type_counts.keys(),\n                                   autopct='%1.1f%%',\n                                   colors=colors,\n                                   startangle=90)\n\nplt.title('Distribution of Mutation Types', fontsize=14, fontweight='bold')\n\n# Add counts to labels\nfor i, (label, count) in enumerate(mutation_type_counts.items()):\n    texts[i].set_text(f'{label}\\n({count:,})')\n\nplt.axis('equal')\nplt.show()\n</pre> # Extract mutation types from context labels mutation_types = [] for context in contexts_df.index:     # Extract the mutation type from format \"X[REF&gt;ALT]Z\"     mutation_type = context.split('[')[1].split(']')[0]     mutation_types.append(mutation_type)  # Group by mutation type mutation_type_counts = {} for i, mut_type in enumerate(mutation_types):     if mut_type not in mutation_type_counts:         mutation_type_counts[mut_type] = 0     mutation_type_counts[mut_type] += contexts_df.iloc[i].sum()  # Create pie chart plt.figure(figsize=(10, 8)) colors = sns.color_palette(\"Set3\", len(mutation_type_counts)) wedges, texts, autotexts = plt.pie(mutation_type_counts.values(),                                     labels=mutation_type_counts.keys(),                                    autopct='%1.1f%%',                                    colors=colors,                                    startangle=90)  plt.title('Distribution of Mutation Types', fontsize=14, fontweight='bold')  # Add counts to labels for i, (label, count) in enumerate(mutation_type_counts.items()):     texts[i].set_text(f'{label}\\n({count:,})')  plt.axis('equal') plt.show()  In\u00a0[10]: Copied! <pre># Create a heatmap of the top contexts across top samples\ntop_20_contexts = context_totals.head(20).index\ntop_20_samples = sample_totals.head(20).index\n\n# Subset the matrix\nheatmap_data = contexts_df.loc[top_20_contexts, top_20_samples]\n\nplt.figure(figsize=(15, 10))\nsns.heatmap(heatmap_data, \n            cmap='YlOrRd',\n            cbar_kws={'label': 'Mutation Count'},\n            xticklabels=False,  # Hide sample names for clarity\n            yticklabels=True)\n\nplt.title('Trinucleotide Context Heatmap\\n(Top 20 Contexts \u00d7 Top 20 Samples)', \n          fontsize=14, fontweight='bold')\nplt.xlabel('Samples (Top 20 by mutation count)')\nplt.ylabel('Trinucleotide Contexts (Top 20 by frequency)')\nplt.tight_layout()\nplt.show()\n</pre> # Create a heatmap of the top contexts across top samples top_20_contexts = context_totals.head(20).index top_20_samples = sample_totals.head(20).index  # Subset the matrix heatmap_data = contexts_df.loc[top_20_contexts, top_20_samples]  plt.figure(figsize=(15, 10)) sns.heatmap(heatmap_data,              cmap='YlOrRd',             cbar_kws={'label': 'Mutation Count'},             xticklabels=False,  # Hide sample names for clarity             yticklabels=True)  plt.title('Trinucleotide Context Heatmap\\n(Top 20 Contexts \u00d7 Top 20 Samples)',            fontsize=14, fontweight='bold') plt.xlabel('Samples (Top 20 by mutation count)') plt.ylabel('Trinucleotide Contexts (Top 20 by frequency)') plt.tight_layout() plt.show()  In\u00a0[11]: Copied! <pre># Analyze enriched data columns\nprint(\"Enriched Data Columns:\")\nnew_columns = ['trinuc', 'class96', 'idx96']\nfor col in new_columns:\n    if col in enriched_data.columns:\n        print(f\"\u2713 {col}: {enriched_data[col].notna().sum():,} valid entries\")\n\n# Show sample of enriched data\nprint(\"\\nSample of Enriched Data:\")\nsample_cols = ['Hugo_Symbol', 'Chromosome', 'Start_Position', \n               'Reference_Allele', 'Tumor_Seq_Allele2', 'trinuc', 'class96']\navailable_cols = [col for col in sample_cols if col in enriched_data.columns]\nprint(enriched_data[available_cols].head(10).to_string(index=False))\n</pre> # Analyze enriched data columns print(\"Enriched Data Columns:\") new_columns = ['trinuc', 'class96', 'idx96'] for col in new_columns:     if col in enriched_data.columns:         print(f\"\u2713 {col}: {enriched_data[col].notna().sum():,} valid entries\")  # Show sample of enriched data print(\"\\nSample of Enriched Data:\") sample_cols = ['Hugo_Symbol', 'Chromosome', 'Start_Position',                 'Reference_Allele', 'Tumor_Seq_Allele2', 'trinuc', 'class96'] available_cols = [col for col in sample_cols if col in enriched_data.columns] print(enriched_data[available_cols].head(10).to_string(index=False))  <pre>Enriched Data Columns:\n\u2713 trinuc: 947 valid entries\n\u2713 class96: 947 valid entries\n\u2713 idx96: 947 valid entries\n\nSample of Enriched Data:\nHugo_Symbol trinuc class96\n      TUBB8    GCG G[C&gt;A]G\n      TUBB8    ACG A[C&gt;T]G\n      TUBB8    CCG C[C&gt;T]G\n      TUBB8    TTA T[T&gt;C]A\n      TUBB8    GTA G[T&gt;C]A\n      TUBB8    CCG C[C&gt;T]G\n      TUBB8    ACG A[C&gt;T]G\n      TUBB8    GTT G[T&gt;C]T\n      TUBB8    CCA C[C&gt;T]A\n      TUBB8    ACG A[C&gt;T]G\n</pre> In\u00a0[12]: Copied! <pre># Show VCF-specific information if available\nprint(\"VCF-Specific Information:\")\nprint(\"=\" * 30)\n\n# Check for VEP annotations\nvep_columns = ['VEP_SYMBOL', 'VEP_Consequence', 'VEP_VARIANT_CLASS']\navailable_vep = [col for col in vep_columns if col in enriched_data.columns]\n\nif available_vep:\n    print(\"Available VEP annotations:\")\n    for col in available_vep:\n        unique_count = enriched_data[col].nunique()\n        print(f\"\u2713 {col}: {unique_count} unique values\")\n    \n    # Show VEP consequence distribution\n    if 'VEP_Consequence' in enriched_data.columns:\n        vep_consequences = enriched_data['VEP_Consequence'].value_counts().head(10)\n        print(\"\\nTop 10 VEP Consequences:\")\n        print(vep_consequences)\n\n# Show sample information\nif hasattr(pymut, 'samples') and pymut.samples:\n    print(\"\\nSample Information:\")\n    print(f\"\u2713 Total samples: {len(pymut.samples)}\")\n    print(f\"\u2713 Sample names: {pymut.samples[:5]}...\" if len(pymut.samples) &gt; 5 else f\"\u2713 Sample names: {pymut.samples}\")\n</pre> # Show VCF-specific information if available print(\"VCF-Specific Information:\") print(\"=\" * 30)  # Check for VEP annotations vep_columns = ['VEP_SYMBOL', 'VEP_Consequence', 'VEP_VARIANT_CLASS'] available_vep = [col for col in vep_columns if col in enriched_data.columns]  if available_vep:     print(\"Available VEP annotations:\")     for col in available_vep:         unique_count = enriched_data[col].nunique()         print(f\"\u2713 {col}: {unique_count} unique values\")          # Show VEP consequence distribution     if 'VEP_Consequence' in enriched_data.columns:         vep_consequences = enriched_data['VEP_Consequence'].value_counts().head(10)         print(\"\\nTop 10 VEP Consequences:\")         print(vep_consequences)  # Show sample information if hasattr(pymut, 'samples') and pymut.samples:     print(\"\\nSample Information:\")     print(f\"\u2713 Total samples: {len(pymut.samples)}\")     print(f\"\u2713 Sample names: {pymut.samples[:5]}...\" if len(pymut.samples) &gt; 5 else f\"\u2713 Sample names: {pymut.samples}\")  <pre>VCF-Specific Information:\n==============================\nAvailable VEP annotations:\n\u2713 VEP_SYMBOL: 3 unique values\n\u2713 VEP_Consequence: 13 unique values\n\u2713 VEP_VARIANT_CLASS: 1 unique values\n\nTop 10 VEP Consequences:\nVEP_Consequence\nintron_variant                                                                      393\nupstream_gene_variant                                                               164\ndownstream_gene_variant                                                             145\nintron_variant&amp;non_coding_transcript_variant                                        120\nnon_coding_transcript_exon_variant                                                   61\n5_prime_UTR_variant                                                                  24\nsynonymous_variant                                                                   16\nmissense_variant                                                                     13\nsplice_polypyrimidine_tract_variant&amp;intron_variant&amp;non_coding_transcript_variant      5\nsplice_region_variant&amp;non_coding_transcript_exon_variant                              3\nName: count, dtype: int64\n\nSample Information:\n\u2713 Total samples: 2548\n\u2713 Sample names: ['HG00096', 'HG00097', 'HG00099', 'HG00100', 'HG00101']...\n</pre> In\u00a0[13]: Copied! <pre># Import signature estimation functionality\nfrom pyMut.analysis.mutational_signature import estimateSignatures\n\nprint(\"\u2713 Signature estimation function imported\")\n</pre> # Import signature estimation functionality from pyMut.analysis.mutational_signature import estimateSignatures  print(\"\u2713 Signature estimation function imported\")  <pre>\u2713 Signature estimation function imported\n</pre> In\u00a0[14]: Copied! <pre># Run signature estimation with default parameters\nprint(\"Running signature estimation...\")\nprint(\"This may take a few moments as it performs multiple NMF decompositions...\")\n\ntry:\n    # Test with a smaller range first for demonstration\n    signature_results = estimateSignatures(\n        contexts_df, \n        nMin=2,  # Minimum number of signatures to test\n        nTry=4,  # Number of different k values to try\n        nrun=3,  # Number of NMF runs per k\n        parallel=2,  # Number of parallel processes (if available)\n    )\n\n    print(\"\u2713 Signature estimation completed successfully!\")\n    print(f\"\u2713 Suggested optimal number of signatures: {signature_results['optimal_k']}\")\n\nexcept Exception as e:\n    print(f\"\u274c Error during signature estimation: {e}\")\n    # If sklearn/scipy not available, show what would happen\n    print(\"Note: This requires scikit-learn and scipy packages\")\n    print(\"Install with: pip install scikit-learn scipy\")\n</pre> # Run signature estimation with default parameters print(\"Running signature estimation...\") print(\"This may take a few moments as it performs multiple NMF decompositions...\")  try:     # Test with a smaller range first for demonstration     signature_results = estimateSignatures(         contexts_df,          nMin=2,  # Minimum number of signatures to test         nTry=4,  # Number of different k values to try         nrun=3,  # Number of NMF runs per k         parallel=2,  # Number of parallel processes (if available)     )      print(\"\u2713 Signature estimation completed successfully!\")     print(f\"\u2713 Suggested optimal number of signatures: {signature_results['optimal_k']}\")  except Exception as e:     print(f\"\u274c Error during signature estimation: {e}\")     # If sklearn/scipy not available, show what would happen     print(\"Note: This requires scikit-learn and scipy packages\")     print(\"Install with: pip install scikit-learn scipy\")  <pre>Running signature estimation...\nThis may take a few moments as it performs multiple NMF decompositions...\n</pre> <pre>2025-08-01 00:53:44,356 | INFO | pyMut.analysis.mutational_signature | Starting signature estimation for k=2 to k=4 with 3 runs each\n2025-08-01 00:53:44,357 | INFO | pyMut.analysis.mutational_signature | Normalized matrix shape: (96, 2591)\n/home/luisruimore/anaconda3/envs/PyMutTFG/lib/python3.10/site-packages/numpy/lib/function_base.py:2897: RuntimeWarning: invalid value encountered in divide\n  c /= stddev[:, None]\n/home/luisruimore/anaconda3/envs/PyMutTFG/lib/python3.10/site-packages/numpy/lib/function_base.py:2898: RuntimeWarning: invalid value encountered in divide\n  c /= stddev[None, :]\n2025-08-01 00:53:52,683 | INFO | pyMut.analysis.mutational_signature | Signature estimation completed. Suggested optimal k: 2\n</pre> <pre>\u2713 Signature estimation completed successfully!\n\u2713 Suggested optimal number of signatures: 2\n</pre> In\u00a0[15]: Copied! <pre># Display the metrics DataFrame\nif 'signature_results' in locals() and signature_results is not None:\n    metrics_df = signature_results['metrics']\n\n    print(\"Signature Estimation Metrics:\")\n    print(\"=\" * 50)\n    print(metrics_df.to_string(index=False))\n\n    # Show some key statistics\n    print(\"\\nKey Results:\")\n    print(f\"- Tested k values: {metrics_df['k'].min()} to {metrics_df['k'].max()}\")\n    print(f\"- Optimal k: {signature_results['optimal_k']}\")\n    print(f\"- Total successful models: {len(signature_results['models'])}\")\n\n    # Show best metrics for optimal k\n    optimal_row = metrics_df[metrics_df['k'] == signature_results['optimal_k']]\n    if not optimal_row.empty:\n        row = optimal_row.iloc[0]\n        print(f\"\\nMetrics for optimal k={signature_results['optimal_k']}:\")\n        print(f\"- Mean RSS: {row['mean_rss']:.4f}\")\n        print(f\"- Cophenetic correlation: {row['cophenetic_corr']:.4f}\")\n        print(f\"- Dispersion: {row['dispersion']:.4f}\")\n        print(f\"- Successful runs: {row['successful_runs']}/{row['total_runs']}\")\n</pre> # Display the metrics DataFrame if 'signature_results' in locals() and signature_results is not None:     metrics_df = signature_results['metrics']      print(\"Signature Estimation Metrics:\")     print(\"=\" * 50)     print(metrics_df.to_string(index=False))      # Show some key statistics     print(\"\\nKey Results:\")     print(f\"- Tested k values: {metrics_df['k'].min()} to {metrics_df['k'].max()}\")     print(f\"- Optimal k: {signature_results['optimal_k']}\")     print(f\"- Total successful models: {len(signature_results['models'])}\")      # Show best metrics for optimal k     optimal_row = metrics_df[metrics_df['k'] == signature_results['optimal_k']]     if not optimal_row.empty:         row = optimal_row.iloc[0]         print(f\"\\nMetrics for optimal k={signature_results['optimal_k']}:\")         print(f\"- Mean RSS: {row['mean_rss']:.4f}\")         print(f\"- Cophenetic correlation: {row['cophenetic_corr']:.4f}\")         print(f\"- Dispersion: {row['dispersion']:.4f}\")         print(f\"- Successful runs: {row['successful_runs']}/{row['total_runs']}\")  <pre>Signature Estimation Metrics:\n==================================================\n k  mean_rss      std_rss  cophenetic_corr   dispersion  successful_runs  total_runs\n 2 19.946935 2.112495e-08              NaN 1.059057e-09                3           3\n 3 15.810030 2.166175e-01              NaN 1.370127e-02                3           3\n 4 11.558179 5.327798e-06              NaN 4.609548e-07                3           3\n\nKey Results:\n- Tested k values: 2 to 4\n- Optimal k: 2\n- Total successful models: 9\n\nMetrics for optimal k=2:\n- Mean RSS: 19.9469\n- Cophenetic correlation: nan\n- Dispersion: 0.0000\n- Successful runs: 3.0/3.0\n</pre> In\u00a0[16]: Copied! <pre>if 'signature_results' in locals() and signature_results is not None:\n    metrics_df = signature_results['metrics']\n\n    # Create subplots for different metrics\n    fig, axes = plt.subplots(2, 2, figsize=(15, 10))\n\n    # Plot 1: RSS vs k\n    axes[0, 0].plot(metrics_df['k'], metrics_df['mean_rss'], 'bo-', linewidth=2, markersize=8)\n    axes[0, 0].fill_between(metrics_df['k'], \n                           metrics_df['mean_rss'] - metrics_df['std_rss'],\n                           metrics_df['mean_rss'] + metrics_df['std_rss'], \n                           alpha=0.3)\n    axes[0, 0].set_xlabel('Number of Signatures (k)')\n    axes[0, 0].set_ylabel('Mean RSS')\n    axes[0, 0].set_title('Reconstruction Error vs Number of Signatures')\n    axes[0, 0].grid(True, alpha=0.3)\n\n    # Highlight optimal k\n    optimal_k = signature_results['optimal_k']\n    optimal_rss = metrics_df[metrics_df['k'] == optimal_k]['mean_rss'].iloc[0]\n    axes[0, 0].axvline(optimal_k, color='red', linestyle='--', alpha=0.7, label=f'Optimal k={optimal_k}')\n    axes[0, 0].legend()\n\n    # Plot 2: Cophenetic correlation vs k\n    axes[0, 1].plot(metrics_df['k'], metrics_df['cophenetic_corr'], 'go-', linewidth=2, markersize=8)\n    axes[0, 1].set_xlabel('Number of Signatures (k)')\n    axes[0, 1].set_ylabel('Cophenetic Correlation')\n    axes[0, 1].set_title('Stability (Cophenetic Correlation) vs Number of Signatures')\n    axes[0, 1].grid(True, alpha=0.3)\n    axes[0, 1].axvline(optimal_k, color='red', linestyle='--', alpha=0.7, label=f'Optimal k={optimal_k}')\n    axes[0, 1].legend()\n\n    # Plot 3: Dispersion vs k\n    axes[1, 0].plot(metrics_df['k'], metrics_df['dispersion'], 'mo-', linewidth=2, markersize=8)\n    axes[1, 0].set_xlabel('Number of Signatures (k)')\n    axes[1, 0].set_ylabel('Dispersion (CV of RSS)')\n    axes[1, 0].set_title('Dispersion vs Number of Signatures')\n    axes[1, 0].grid(True, alpha=0.3)\n    axes[1, 0].axvline(optimal_k, color='red', linestyle='--', alpha=0.7, label=f'Optimal k={optimal_k}')\n    axes[1, 0].legend()\n\n    # Plot 4: Success rate\n    success_rate = metrics_df['successful_runs'] / metrics_df['total_runs']\n    axes[1, 1].bar(metrics_df['k'], success_rate, color='orange', alpha=0.7)\n    axes[1, 1].set_xlabel('Number of Signatures (k)')\n    axes[1, 1].set_ylabel('Success Rate')\n    axes[1, 1].set_title('NMF Success Rate vs Number of Signatures')\n    axes[1, 1].set_ylim(0, 1.1)\n    axes[1, 1].grid(True, alpha=0.3)\n\n    plt.tight_layout()\n    plt.show()\n\nelse:\n    print(\"Signature estimation results not available for visualization\")\n    print(\"This section requires successful completion of the signature estimation step\")\n</pre> if 'signature_results' in locals() and signature_results is not None:     metrics_df = signature_results['metrics']      # Create subplots for different metrics     fig, axes = plt.subplots(2, 2, figsize=(15, 10))      # Plot 1: RSS vs k     axes[0, 0].plot(metrics_df['k'], metrics_df['mean_rss'], 'bo-', linewidth=2, markersize=8)     axes[0, 0].fill_between(metrics_df['k'],                             metrics_df['mean_rss'] - metrics_df['std_rss'],                            metrics_df['mean_rss'] + metrics_df['std_rss'],                             alpha=0.3)     axes[0, 0].set_xlabel('Number of Signatures (k)')     axes[0, 0].set_ylabel('Mean RSS')     axes[0, 0].set_title('Reconstruction Error vs Number of Signatures')     axes[0, 0].grid(True, alpha=0.3)      # Highlight optimal k     optimal_k = signature_results['optimal_k']     optimal_rss = metrics_df[metrics_df['k'] == optimal_k]['mean_rss'].iloc[0]     axes[0, 0].axvline(optimal_k, color='red', linestyle='--', alpha=0.7, label=f'Optimal k={optimal_k}')     axes[0, 0].legend()      # Plot 2: Cophenetic correlation vs k     axes[0, 1].plot(metrics_df['k'], metrics_df['cophenetic_corr'], 'go-', linewidth=2, markersize=8)     axes[0, 1].set_xlabel('Number of Signatures (k)')     axes[0, 1].set_ylabel('Cophenetic Correlation')     axes[0, 1].set_title('Stability (Cophenetic Correlation) vs Number of Signatures')     axes[0, 1].grid(True, alpha=0.3)     axes[0, 1].axvline(optimal_k, color='red', linestyle='--', alpha=0.7, label=f'Optimal k={optimal_k}')     axes[0, 1].legend()      # Plot 3: Dispersion vs k     axes[1, 0].plot(metrics_df['k'], metrics_df['dispersion'], 'mo-', linewidth=2, markersize=8)     axes[1, 0].set_xlabel('Number of Signatures (k)')     axes[1, 0].set_ylabel('Dispersion (CV of RSS)')     axes[1, 0].set_title('Dispersion vs Number of Signatures')     axes[1, 0].grid(True, alpha=0.3)     axes[1, 0].axvline(optimal_k, color='red', linestyle='--', alpha=0.7, label=f'Optimal k={optimal_k}')     axes[1, 0].legend()      # Plot 4: Success rate     success_rate = metrics_df['successful_runs'] / metrics_df['total_runs']     axes[1, 1].bar(metrics_df['k'], success_rate, color='orange', alpha=0.7)     axes[1, 1].set_xlabel('Number of Signatures (k)')     axes[1, 1].set_ylabel('Success Rate')     axes[1, 1].set_title('NMF Success Rate vs Number of Signatures')     axes[1, 1].set_ylim(0, 1.1)     axes[1, 1].grid(True, alpha=0.3)      plt.tight_layout()     plt.show()  else:     print(\"Signature estimation results not available for visualization\")     print(\"This section requires successful completion of the signature estimation step\")  In\u00a0[17]: Copied! <pre># Import the extract_signatures function\nfrom pyMut.analysis.mutational_signature import extract_signatures\n\nprint(\"\u2713 extract_signatures function imported\")\n</pre> # Import the extract_signatures function from pyMut.analysis.mutational_signature import extract_signatures  print(\"\u2713 extract_signatures function imported\")  <pre>\u2713 extract_signatures function imported\n</pre> In\u00a0[18]: Copied! <pre># Extract signatures using the optimal k from estimation\nif 'signature_results' in locals() and signature_results is not None:\n    optimal_k = signature_results['optimal_k']\n\n    print(f\"Extracting {optimal_k} signatures...\")\n\n    try:\n        # Extract signatures with reduced runs for demo\n        extraction_results = extract_signatures(\n            contexts_df, \n            k=optimal_k, \n            nrun=10,  # Reduced for faster demo\n            random_seed=42  # For reproducibility\n        )\n\n        print(\"\u2713 Signature extraction completed\")\n        print(f\"\u2713 W matrix shape: {extraction_results['W'].shape}\")\n        print(f\"\u2713 H matrix shape: {extraction_results['H'].shape}\")\n        print(f\"\u2713 Best run: {extraction_results['best_run']}\")\n        print(f\"\u2713 Successful runs: {extraction_results['successful_runs']}/{extraction_results['total_runs']}\")\n\n    except Exception as e:\n        print(f\"\u274c Error during signature extraction: {e}\")\n        extraction_results = None\n\nelse:\n    print(\"\u274c Signature estimation results not available\")\n    print(\"Skipping signature extraction - requires completed signature estimation\")\n    extraction_results = None\n</pre> # Extract signatures using the optimal k from estimation if 'signature_results' in locals() and signature_results is not None:     optimal_k = signature_results['optimal_k']      print(f\"Extracting {optimal_k} signatures...\")      try:         # Extract signatures with reduced runs for demo         extraction_results = extract_signatures(             contexts_df,              k=optimal_k,              nrun=10,  # Reduced for faster demo             random_seed=42  # For reproducibility         )          print(\"\u2713 Signature extraction completed\")         print(f\"\u2713 W matrix shape: {extraction_results['W'].shape}\")         print(f\"\u2713 H matrix shape: {extraction_results['H'].shape}\")         print(f\"\u2713 Best run: {extraction_results['best_run']}\")         print(f\"\u2713 Successful runs: {extraction_results['successful_runs']}/{extraction_results['total_runs']}\")      except Exception as e:         print(f\"\u274c Error during signature extraction: {e}\")         extraction_results = None  else:     print(\"\u274c Signature estimation results not available\")     print(\"Skipping signature extraction - requires completed signature estimation\")     extraction_results = None  <pre>2025-08-01 00:53:53,322 | INFO | pyMut.analysis.mutational_signature | Extracting 2 signatures with 10 runs using NMF with KL divergence\n2025-08-01 00:53:53,323 | INFO | pyMut.analysis.mutational_signature | Matrix normalized to frequencies with pseudocount 0.0001\n</pre> <pre>Extracting 2 signatures...\n</pre> <pre>2025-08-01 00:53:57,242 | INFO | pyMut.analysis.mutational_signature | Best result from run 0 with error 873.068988\n2025-08-01 00:53:57,242 | INFO | pyMut.analysis.mutational_signature | Successful runs: 10/10\n2025-08-01 00:53:57,243 | INFO | pyMut.analysis.mutational_signature | Signatures extracted and normalized successfully\n</pre> <pre>\u2713 Signature extraction completed\n\u2713 W matrix shape: (96, 2)\n\u2713 H matrix shape: (2, 2591)\n\u2713 Best run: 0\n\u2713 Successful runs: 10/10\n</pre> In\u00a0[19]: Copied! <pre>if extraction_results is not None:\n    W_matrix = extraction_results['W']\n    H_matrix = extraction_results['H']\n\n    # Create signature profile heatmap\n    plt.figure(figsize=(12, 8))\n\n    # Create a heatmap of signature profiles\n    sns.heatmap(W_matrix, \n                cmap='YlOrRd',\n                cbar_kws={'label': 'Mutation Probability'},\n                yticklabels=contexts_df.index,\n                xticklabels=[f'Sig_{i+1}' for i in range(W_matrix.shape[1])])\n\n    plt.title(f'Mutational Signature Profiles (W Matrix)\\n{W_matrix.shape[1]} Signatures \u00d7 96 Trinucleotide Contexts')\n    plt.xlabel('Signatures')\n    plt.ylabel('Trinucleotide Contexts')\n    plt.tight_layout()\n    plt.show()\n\n    # Show signature contributions across samples\n    plt.figure(figsize=(15, 6))\n\n    # Plot signature contributions for top samples\n    top_samples = contexts_df.sum(axis=0).nlargest(20).index\n    H_subset = pd.DataFrame(H_matrix, \n                           columns=contexts_df.columns,\n                           index=[f'Sig_{i+1}' for i in range(H_matrix.shape[0])])\n\n    sns.heatmap(H_subset[top_samples], \n                cmap='Blues',\n                cbar_kws={'label': 'Signature Contribution'},\n                xticklabels=False)  # Hide sample names for clarity\n\n    plt.title(f'Signature Contributions (H Matrix)\\n{H_matrix.shape[0]} Signatures \u00d7 Top 20 Samples')\n    plt.xlabel('Samples (Top 20 by mutation count)')\n    plt.ylabel('Signatures')\n    plt.tight_layout()\n    plt.show()\n\nelse:\n    print(\"Signature extraction results not available for visualization\")\n</pre> if extraction_results is not None:     W_matrix = extraction_results['W']     H_matrix = extraction_results['H']      # Create signature profile heatmap     plt.figure(figsize=(12, 8))      # Create a heatmap of signature profiles     sns.heatmap(W_matrix,                  cmap='YlOrRd',                 cbar_kws={'label': 'Mutation Probability'},                 yticklabels=contexts_df.index,                 xticklabels=[f'Sig_{i+1}' for i in range(W_matrix.shape[1])])      plt.title(f'Mutational Signature Profiles (W Matrix)\\n{W_matrix.shape[1]} Signatures \u00d7 96 Trinucleotide Contexts')     plt.xlabel('Signatures')     plt.ylabel('Trinucleotide Contexts')     plt.tight_layout()     plt.show()      # Show signature contributions across samples     plt.figure(figsize=(15, 6))      # Plot signature contributions for top samples     top_samples = contexts_df.sum(axis=0).nlargest(20).index     H_subset = pd.DataFrame(H_matrix,                             columns=contexts_df.columns,                            index=[f'Sig_{i+1}' for i in range(H_matrix.shape[0])])      sns.heatmap(H_subset[top_samples],                  cmap='Blues',                 cbar_kws={'label': 'Signature Contribution'},                 xticklabels=False)  # Hide sample names for clarity      plt.title(f'Signature Contributions (H Matrix)\\n{H_matrix.shape[0]} Signatures \u00d7 Top 20 Samples')     plt.xlabel('Samples (Top 20 by mutation count)')     plt.ylabel('Signatures')     plt.tight_layout()     plt.show()  else:     print(\"Signature extraction results not available for visualization\")  In\u00a0[20]: Copied! <pre># Compare extracted signatures with COSMIC catalog\nif extraction_results is not None:\n    from pyMut.analysis.mutational_signature import compare_signatures\n\n    # Path to COSMIC catalog\n    cosmic_path = \"../../../src/pyMut/data/examples/COSMIC_catalogue-signatures_SBS96_v3.4/COSMIC_v3.4_SBS_GRCh38.txt\"\n\n    if os.path.exists(cosmic_path):\n        # Compare signatures with COSMIC catalog\n        comparison_results = compare_signatures(\n            W=extraction_results['W'],\n            cosmic_path=cosmic_path,\n            min_cosine=0.6,\n            return_matrix=True\n        )\n\n        # Display results\n        summary_df = comparison_results['summary_df']\n        print(\"COSMIC Signature Comparison Results:\")\n        print(\"=\" * 50)\n        print(summary_df.to_string(index=False))\n\n        # Show cosine similarity statistics\n        cosine_matrix = comparison_results['cosine_matrix']\n        max_similarities = cosine_matrix.max(axis=1)\n\n        print(\"\\nSimilarity Statistics:\")\n        print(f\"- Signatures with matches (\u22650.6): {(max_similarities &gt;= 0.6).sum()}/{len(max_similarities)}\")\n        print(f\"- Average max similarity: {max_similarities.mean():.3f}\")\n        print(f\"- Best similarity: {max_similarities.max():.3f}\")\n\n    else:\n        print(f\"COSMIC catalog not found at: {cosmic_path}\")\n\nelse:\n    print(\"Signature extraction results required for COSMIC comparison\")\n</pre> # Compare extracted signatures with COSMIC catalog if extraction_results is not None:     from pyMut.analysis.mutational_signature import compare_signatures      # Path to COSMIC catalog     cosmic_path = \"../../../src/pyMut/data/examples/COSMIC_catalogue-signatures_SBS96_v3.4/COSMIC_v3.4_SBS_GRCh38.txt\"      if os.path.exists(cosmic_path):         # Compare signatures with COSMIC catalog         comparison_results = compare_signatures(             W=extraction_results['W'],             cosmic_path=cosmic_path,             min_cosine=0.6,             return_matrix=True         )          # Display results         summary_df = comparison_results['summary_df']         print(\"COSMIC Signature Comparison Results:\")         print(\"=\" * 50)         print(summary_df.to_string(index=False))          # Show cosine similarity statistics         cosine_matrix = comparison_results['cosine_matrix']         max_similarities = cosine_matrix.max(axis=1)          print(\"\\nSimilarity Statistics:\")         print(f\"- Signatures with matches (\u22650.6): {(max_similarities &gt;= 0.6).sum()}/{len(max_similarities)}\")         print(f\"- Average max similarity: {max_similarities.mean():.3f}\")         print(f\"- Best similarity: {max_similarities.max():.3f}\")      else:         print(f\"COSMIC catalog not found at: {cosmic_path}\")  else:     print(\"Signature extraction results required for COSMIC comparison\")  <pre>2025-08-01 00:53:57,892 | INFO | pyMut.analysis.mutational_signature | Comparing 2 signatures with COSMIC catalog\n2025-08-01 00:53:57,895 | INFO | pyMut.analysis.mutational_signature | Loaded COSMIC catalog with shape (96, 87)\n2025-08-01 00:53:57,895 | INFO | pyMut.analysis.mutational_signature | Aligning COSMIC catalog with standard trinucleotide context order...\n2025-08-01 00:53:57,896 | INFO | pyMut.analysis.mutational_signature | COSMIC catalog successfully aligned to standard context order\n2025-08-01 00:53:57,896 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS7c (ends with 'c')\n2025-08-01 00:53:57,896 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS10c (ends with 'c')\n2025-08-01 00:53:57,897 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS27 (specified artifact)\n2025-08-01 00:53:57,897 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS40c (ends with 'c')\n2025-08-01 00:53:57,897 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS43 (specified artifact)\n2025-08-01 00:53:57,897 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS45 (specified artifact)\n2025-08-01 00:53:57,898 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS46 (specified artifact)\n2025-08-01 00:53:57,898 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS47 (specified artifact)\n2025-08-01 00:53:57,898 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS48 (specified artifact)\n2025-08-01 00:53:57,898 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS49 (specified artifact)\n2025-08-01 00:53:57,899 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS50 (specified artifact)\n2025-08-01 00:53:57,899 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS51 (specified artifact)\n2025-08-01 00:53:57,899 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS52 (specified artifact)\n2025-08-01 00:53:57,900 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS53 (specified artifact)\n2025-08-01 00:53:57,900 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS54 (specified artifact)\n2025-08-01 00:53:57,900 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS55 (specified artifact)\n2025-08-01 00:53:57,901 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS56 (specified artifact)\n2025-08-01 00:53:57,901 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS57 (specified artifact)\n2025-08-01 00:53:57,901 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS58 (specified artifact)\n2025-08-01 00:53:57,902 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS59 (specified artifact)\n2025-08-01 00:53:57,902 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS60 (specified artifact)\n2025-08-01 00:53:57,902 | INFO | pyMut.analysis.mutational_signature | Removing artifact signature SBS95 (specified artifact)\n2025-08-01 00:53:57,903 | INFO | pyMut.analysis.mutational_signature | Found 64 valid COSMIC signatures after filtering\n2025-08-01 00:53:57,903 | INFO | pyMut.analysis.mutational_signature | COSMIC signatures normalized\n2025-08-01 00:53:57,904 | INFO | pyMut.analysis.mutational_signature | Calculated cosine similarity matrix: (2, 64)\n2025-08-01 00:53:57,905 | INFO | pyMut.analysis.mutational_signature | Created summary with 2 signature comparisons\n</pre> <pre>COSMIC Signature Comparison Results:\n==================================================\nSignature_W Best_COSMIC   Cosine Aetiology\nSignature_1        SBS5 0.772483   Unknown\nSignature_2    No match 0.492920   Unknown\n\nSimilarity Statistics:\n- Signatures with matches (\u22650.6): 1/2\n- Average max similarity: 0.633\n- Best similarity: 0.772\n</pre>"},{"location":"examples/analysis/mutational_signatures_VCF/#trinucleotide-matrix-analysis-demo-vcf","title":"Trinucleotide Matrix Analysis Demo - VCF\u00b6","text":"<p>This notebook demonstrates the <code>trinucleotideMatrix()</code> method for mutational signature analysis in pyMut using VCF files as input.</p> <p>The method generates a 96 x samples matrix representing trinucleotide contexts for all SNVs in the dataset.</p>"},{"location":"examples/analysis/mutational_signatures_VCF/#setup-and-imports","title":"Setup and Imports\u00b6","text":""},{"location":"examples/analysis/mutational_signatures_VCF/#data-loading","title":"Data Loading\u00b6","text":""},{"location":"examples/analysis/mutational_signatures_VCF/#vcf-data-overview","title":"VCF Data Overview\u00b6","text":""},{"location":"examples/analysis/mutational_signatures_VCF/#trinucleotide-matrix-generation","title":"Trinucleotide Matrix Generation\u00b6","text":""},{"location":"examples/analysis/mutational_signatures_VCF/#matrix-overview","title":"Matrix Overview\u00b6","text":""},{"location":"examples/analysis/mutational_signatures_VCF/#top-trinucleotide-contexts","title":"Top Trinucleotide Contexts\u00b6","text":""},{"location":"examples/analysis/mutational_signatures_VCF/#sample-distribution","title":"Sample Distribution\u00b6","text":""},{"location":"examples/analysis/mutational_signatures_VCF/#mutation-type-distribution","title":"Mutation Type Distribution\u00b6","text":""},{"location":"examples/analysis/mutational_signatures_VCF/#trinucleotide-context-heatmap","title":"Trinucleotide Context Heatmap\u00b6","text":""},{"location":"examples/analysis/mutational_signatures_VCF/#context-enrichment-analysis","title":"Context Enrichment Analysis\u00b6","text":""},{"location":"examples/analysis/mutational_signatures_VCF/#vcf-specific-analysis","title":"VCF-Specific Analysis\u00b6","text":""},{"location":"examples/analysis/mutational_signatures_VCF/#summary","title":"Summary\u00b6","text":"<p>The trinucleotide matrix analysis from VCF data has been successfully completed:</p> <ul> <li>Matrix Generated: 96 trinucleotide contexts \u00d7 samples</li> <li>SNVs Processed: All valid single nucleotide variants with trinucleotide context</li> <li>Mutation Types: Distribution shows typical cancer mutation patterns</li> <li>Sample Variation: Clear differences in mutation burden across samples</li> <li>VCF Integration: Successfully processed VCF data with VEP annotations</li> </ul> <p>This matrix can be used for:</p> <ul> <li>Mutational signature analysis</li> <li>Sample clustering based on mutation patterns</li> <li>Comparison with known mutational signatures (COSMIC)</li> <li>Identification of mutational processes</li> </ul>"},{"location":"examples/analysis/mutational_signatures_VCF/#signature-estimation-testing","title":"Signature Estimation Testing\u00b6","text":"<p>Now we'll test the <code>estimateSignatures</code> method using the trinucleotide context matrix we generated from VCF data.</p>"},{"location":"examples/analysis/mutational_signatures_VCF/#basic-signature-estimation","title":"Basic Signature Estimation\u00b6","text":"<p>Let's run signature estimation with default parameters to find the optimal number of signatures.</p>"},{"location":"examples/analysis/mutational_signatures_VCF/#signature-estimation-results","title":"Signature Estimation Results\u00b6","text":"<p>Let's examine the metrics and results from the signature estimation.</p>"},{"location":"examples/analysis/mutational_signatures_VCF/#visualization-of-signature-estimation-results","title":"Visualization of Signature Estimation Results\u00b6","text":"<p>Let's create visualizations to better understand the signature estimation results.</p>"},{"location":"examples/analysis/mutational_signatures_VCF/#signature-extraction","title":"Signature Extraction\u00b6","text":"<p>Now that we have estimated the optimal number of signatures, let's extract the actual signature profiles using the <code>extract_signatures</code> function.</p>"},{"location":"examples/analysis/mutational_signatures_VCF/#extract-mutational-signatures","title":"Extract Mutational Signatures\u00b6","text":"<p>Using the optimal k value from signature estimation, we'll extract the signature profiles (W matrix) and their contributions (H matrix).</p>"},{"location":"examples/analysis/mutational_signatures_VCF/#signature-profiles-visualization","title":"Signature Profiles Visualization\u00b6","text":"<p>Let's visualize the extracted signature profiles to understand the mutational patterns.</p>"},{"location":"examples/analysis/mutational_signatures_VCF/#cosmic-signature-comparison","title":"COSMIC Signature Comparison\u00b6","text":"<p>Now let's compare our extracted signatures with the COSMIC mutational signature catalog to identify known mutational processes.</p>"},{"location":"examples/analysis/mutational_signatures_VCF/#summary-of-vcf-trinucleotide-matrix-analysis","title":"Summary of VCF Trinucleotide Matrix Analysis\u00b6","text":"<p>The complete trinucleotide matrix analysis from VCF data has been successfully demonstrated:</p>"},{"location":"examples/analysis/mutational_signatures_VCF/#data-processing","title":"Data Processing\u00b6","text":"<ul> <li>VCF Loading: Successfully loaded VCF data with VEP annotations</li> <li>Matrix Generation: Created 96 \u00d7 samples trinucleotide context matrix</li> <li>Quality Control: Validated data integrity and context assignment</li> </ul>"},{"location":"examples/analysis/mutational_signatures_VCF/#analysis-results","title":"Analysis Results\u00b6","text":"<ul> <li>Signature Estimation: Identified optimal number of mutational signatures</li> <li>Signature Extraction: Extracted signature profiles and sample contributions</li> <li>COSMIC Comparison: Compared signatures with known mutational processes</li> </ul>"},{"location":"examples/analysis/mutational_signatures_VCF/#key-features","title":"Key Features\u00b6","text":"<ul> <li>VCF Integration: Native support for VCF files with VEP annotations</li> <li>Comprehensive Analysis: Full pipeline from raw VCF to signature analysis</li> <li>Visualization: Rich plots for data exploration and result interpretation</li> </ul>"},{"location":"examples/analysis/mutational_signatures_VCF/#applications","title":"Applications\u00b6","text":"<p>This VCF-based analysis enables:</p> <ul> <li>Direct analysis of variant calling results</li> <li>Integration with standard genomics workflows</li> <li>Comparison with reference mutational signatures</li> <li>Clinical interpretation of mutation patterns</li> </ul> <p>The workflow demonstrates that pyMut can seamlessly handle both MAF and VCF formats for mutational signature analysis, providing flexibility for different data sources and analysis needs.</p>"},{"location":"examples/annotation/actionable_mutation_annotation/","title":"OncoKB Annotation Demo","text":"In\u00a0[1]: Copied! <pre>import pandas as pd\nimport matplotlib.pyplot as plt\nfrom pathlib import Path\nimport logging\nimport requests\n\n\n# Import necessary functions\nfrom pyMut.input import read_maf, read_vcf\n</pre> import pandas as pd import matplotlib.pyplot as plt from pathlib import Path import logging import requests   # Import necessary functions from pyMut.input import read_maf, read_vcf  In\u00a0[2]: Copied! <pre># Get the OncoKB API token\nimport os\n\ndef read_oncokb_token(env_path):\n    \"\"\"Read OncoKB API token from .env file\"\"\"\n    try:\n        # Try using python-dotenv if available\n        from dotenv import load_dotenv\n        load_dotenv(env_path)\n        return os.getenv('ONCOKB_API')\n    except ImportError:\n        # Manual parsing if python-dotenv is not available\n        if env_path.exists():\n            with open(env_path, 'r') as f:\n                for line in f:\n                    if line.startswith('ONCOKB_API='):\n                        return line.split('=', 1)[1].strip()\n        return None\n\nenv_path = Path(\"../../../.env\")\noncokb_token = read_oncokb_token(env_path)\n\nif not oncokb_token:\n    logging.warning(\"OncoKB API token not found. Please create a .env file with ONCOKB_API=your_token\")\n    # For demonstration purposes, you can enter your token manually:\n    oncokb_token = input(\"Enter your OncoKB token: \")\nelse:\n    logging.info(\"OncoKB API token loaded successfully\")\n</pre> # Get the OncoKB API token import os  def read_oncokb_token(env_path):     \"\"\"Read OncoKB API token from .env file\"\"\"     try:         # Try using python-dotenv if available         from dotenv import load_dotenv         load_dotenv(env_path)         return os.getenv('ONCOKB_API')     except ImportError:         # Manual parsing if python-dotenv is not available         if env_path.exists():             with open(env_path, 'r') as f:                 for line in f:                     if line.startswith('ONCOKB_API='):                         return line.split('=', 1)[1].strip()         return None  env_path = Path(\"../../../.env\") oncokb_token = read_oncokb_token(env_path)  if not oncokb_token:     logging.warning(\"OncoKB API token not found. Please create a .env file with ONCOKB_API=your_token\")     # For demonstration purposes, you can enter your token manually:     oncokb_token = input(\"Enter your OncoKB token: \") else:     logging.info(\"OncoKB API token loaded successfully\")  <pre>2025-08-01 01:31:07,607 | INFO | root | OncoKB API token loaded successfully\n</pre> In\u00a0[3]: Copied! <pre># Add a monkey patch to log API requests and responses\noriginal_post = requests.Session.post\n\ndef logging_post(*args, **kwargs):\n    logging.info(f\"API Request URL: {args[1]}\")\n    response = original_post(*args, **kwargs)\n    logging.info(f\"API Response Status Code: {response.status_code}\")\n    return response\n</pre> # Add a monkey patch to log API requests and responses original_post = requests.Session.post  def logging_post(*args, **kwargs):     logging.info(f\"API Request URL: {args[1]}\")     response = original_post(*args, **kwargs)     logging.info(f\"API Response Status Code: {response.status_code}\")     return response  In\u00a0[4]: Copied! <pre># Define the path to the MAF file\nmaf_path = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\"\n\n# Load the MAF file with assembly 37\nlogging.info(f\"Loading MAF file: {maf_path}\")\nmaf_py_mut = read_maf(maf_path, assembly=\"37\")\n\n# Display basic information about the loaded data\nlogging.info(f\"Loaded {len(maf_py_mut.data)} variants from MAF file\")\nlogging.info(f\"Assembly: {maf_py_mut.metadata.assembly}\")\n\n# Show the first few rows of the data\nprint(\"\\nSample of MAF data before annotation:\")\ndisplay(maf_py_mut.data.head())\n</pre> # Define the path to the MAF file maf_path = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\"  # Load the MAF file with assembly 37 logging.info(f\"Loading MAF file: {maf_path}\") maf_py_mut = read_maf(maf_path, assembly=\"37\")  # Display basic information about the loaded data logging.info(f\"Loaded {len(maf_py_mut.data)} variants from MAF file\") logging.info(f\"Assembly: {maf_py_mut.metadata.assembly}\")  # Show the first few rows of the data print(\"\\nSample of MAF data before annotation:\") display(maf_py_mut.data.head())  <pre>2025-08-01 01:31:07,705 | INFO | root | Loading MAF file: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n2025-08-01 01:31:07,705 | INFO | pyMut.input | Starting MAF reading: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n2025-08-01 01:31:07,706 | INFO | pyMut.input | Loading from cache: ../../../src/pyMut/data/examples/MAF/.pymut_cache/tcga_laml.maf_8bfbda65c4b23428.parquet\n2025-08-01 01:31:07,760 | INFO | pyMut.input | Cache loaded successfully in 0.05 seconds\n2025-08-01 01:31:07,760 | INFO | root | Loaded 2091 variants from MAF file\n2025-08-01 01:31:07,761 | INFO | root | Assembly: 37\n</pre> <pre>\nSample of MAF data before annotation:\n</pre> CHROM POS ID REF ALT QUAL FILTER TCGA-AB-2988 TCGA-AB-2869 TCGA-AB-3009 ... Strand Variant_Classification Variant_Type Reference_Allele Tumor_Seq_Allele1 Tumor_Seq_Allele2 Tumor_Sample_Barcode Protein_Change i_TumorVAF_WU i_transcript_name 0 chr9 100077177 . T C . . T|T T|T T|T ... + SILENT SNP T T C TCGA-AB-2886 p.T431T 9.76 NM_020893.1 1 chr9 100085148 . G A . . G|G G|G G|G ... + MISSENSE_MUTATION SNP G G A TCGA-AB-2917 p.R581H 18.4 NM_020893.1 2 chr9 100971322 . A C . . A|A A|A A|A ... + MISSENSE_MUTATION SNP A A C TCGA-AB-2841 p.L593R 45.83 NM_018421.3 3 chr9 104086335 . C T . . C|C C|C C|C ... + MISSENSE_MUTATION SNP C C T TCGA-AB-2877 p.T325I 37.12 NM_017753.2 4 chr9 104124840 . G A . . G|A G|G G|G ... + MISSENSE_MUTATION SNP G G A TCGA-AB-2988 p.T376M 48.35 NM_001701.1 <p>5 rows \u00d7 216 columns</p> In\u00a0[5]: Copied! <pre># Annotate the MAF data with OncoKB\nif oncokb_token:\n    logging.info(\"Annotating MAF data with OncoKB...\")\n    try:\n        # Apply the monitoring patch\n        requests.Session.post = logging_post\n        \n        # Perform the annotation\n        maf_annotated_data = maf_py_mut.actionable_mutations_oncokb(\n            token=oncokb_token,\n            batch_size=1000,\n            timeout=30,\n            max_retries=3,\n            retry_backoff=1.0\n        )\n        \n        # Restore the original post method\n        requests.Session.post = original_post\n        \n        # Show the first few rows of the annotated data\n        print(\"\\nSample of MAF data after annotation:\")\n        display(maf_py_mut.data.head())\n        \n        # Show annotation statistics\n        def show_annotation_stats(py_mut_obj, dataset_name):\n            \"\"\"Show basic annotation statistics\"\"\"\n            oncokb_columns = [col for col in py_mut_obj.data.columns if col.startswith('oncokb_')]\n            if oncokb_columns:\n                print(f\"\\n{dataset_name} - OncoKB annotation statistics:\")\n                for col in oncokb_columns:\n                    non_null_count = py_mut_obj.data[col].notna().sum()\n                    print(f\"  {col}: {non_null_count} variants\")\n            else:\n                print(f\"\\n{dataset_name} - No OncoKB annotations found\")\n        \n        show_annotation_stats(maf_py_mut, \"MAF File (GRCh37)\")\n        \n    except Exception as e:\n        logging.error(f\"Error during OncoKB annotation for MAF: {e}\")\n        # Restore the original post method\n        requests.Session.post = original_post\nelse:\n    logging.error(\"Cannot perform annotation without a valid OncoKB token\")\n</pre> # Annotate the MAF data with OncoKB if oncokb_token:     logging.info(\"Annotating MAF data with OncoKB...\")     try:         # Apply the monitoring patch         requests.Session.post = logging_post                  # Perform the annotation         maf_annotated_data = maf_py_mut.actionable_mutations_oncokb(             token=oncokb_token,             batch_size=1000,             timeout=30,             max_retries=3,             retry_backoff=1.0         )                  # Restore the original post method         requests.Session.post = original_post                  # Show the first few rows of the annotated data         print(\"\\nSample of MAF data after annotation:\")         display(maf_py_mut.data.head())                  # Show annotation statistics         def show_annotation_stats(py_mut_obj, dataset_name):             \"\"\"Show basic annotation statistics\"\"\"             oncokb_columns = [col for col in py_mut_obj.data.columns if col.startswith('oncokb_')]             if oncokb_columns:                 print(f\"\\n{dataset_name} - OncoKB annotation statistics:\")                 for col in oncokb_columns:                     non_null_count = py_mut_obj.data[col].notna().sum()                     print(f\"  {col}: {non_null_count} variants\")             else:                 print(f\"\\n{dataset_name} - No OncoKB annotations found\")                  show_annotation_stats(maf_py_mut, \"MAF File (GRCh37)\")              except Exception as e:         logging.error(f\"Error during OncoKB annotation for MAF: {e}\")         # Restore the original post method         requests.Session.post = original_post else:     logging.error(\"Cannot perform annotation without a valid OncoKB token\")  <pre>2025-08-01 01:31:07,799 | INFO | root | Annotating MAF data with OncoKB...\n2025-08-01 01:31:07,800 | INFO | pyMut.annotate.actionable_mutation | Using reference genome: GRCh37\n2025-08-01 01:31:07,804 | INFO | pyMut.annotate.actionable_mutation | Splitting 2091 variants into 3 batches of max 1000 variants each\n/home/luisruimore/anaconda3/envs/PyMutTFG/lib/python3.10/site-packages/numpy/core/fromnumeric.py:59: FutureWarning: 'DataFrame.swapaxes' is deprecated and will be removed in a future version. Please use 'DataFrame.transpose' instead.\n  return bound(*args, **kwds)\n2025-08-01 01:31:07,809 | INFO | pyMut.annotate.actionable_mutation | Processing batch 1/3 with 697 variants\n2025-08-01 01:31:07,845 | INFO | pyMut.annotate.actionable_mutation | Sending batch 1/3 to OncoKB API\n2025-08-01 01:31:07,846 | INFO | root | API Request URL: https://www.oncokb.org/api/v1/annotate/mutations/byGenomicChange\n2025-08-01 01:31:11,811 | INFO | root | API Response Status Code: 200\n2025-08-01 01:31:11,819 | INFO | pyMut.annotate.actionable_mutation | Batch 1/3 processed successfully\n2025-08-01 01:31:11,820 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 0 in batch 1\n2025-08-01 01:31:11,820 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 0 in batch 1\n2025-08-01 01:31:11,821 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 1 in batch 1\n2025-08-01 01:31:11,821 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 1 in batch 1\n2025-08-01 01:31:11,821 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 2 in batch 1\n2025-08-01 01:31:11,821 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 2 in batch 1\n2025-08-01 01:31:11,822 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 3 in batch 1\n2025-08-01 01:31:11,822 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 3 in batch 1\n2025-08-01 01:31:11,822 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 4 in batch 1\n2025-08-01 01:31:11,822 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 4 in batch 1\n2025-08-01 01:31:11,823 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 5 in batch 1\n2025-08-01 01:31:11,823 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 5 in batch 1\n2025-08-01 01:31:11,824 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 6 in batch 1\n2025-08-01 01:31:11,824 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 6 in batch 1\n2025-08-01 01:31:11,824 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 7 in batch 1\n2025-08-01 01:31:11,824 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 7 in batch 1\n2025-08-01 01:31:11,824 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 8 in batch 1\n2025-08-01 01:31:11,825 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 8 in batch 1\n2025-08-01 01:31:11,825 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 9 in batch 1\n2025-08-01 01:31:11,825 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 9 in batch 1\n2025-08-01 01:31:11,825 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 10 in batch 1\n2025-08-01 01:31:11,826 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 10 in batch 1\n2025-08-01 01:31:11,826 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 11 in batch 1\n2025-08-01 01:31:11,826 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 11 in batch 1\n2025-08-01 01:31:11,826 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 12 in batch 1\n2025-08-01 01:31:11,826 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 12 in batch 1\n2025-08-01 01:31:11,828 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 13 in batch 1\n2025-08-01 01:31:11,828 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 13 in batch 1\n2025-08-01 01:31:11,828 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 14 in batch 1\n2025-08-01 01:31:11,828 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 14 in batch 1\n2025-08-01 01:31:11,829 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 15 in batch 1\n2025-08-01 01:31:11,829 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 15 in batch 1\n2025-08-01 01:31:11,829 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 16 in batch 1\n2025-08-01 01:31:11,830 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 16 in batch 1\n2025-08-01 01:31:11,830 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 17 in batch 1\n2025-08-01 01:31:11,830 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 17 in batch 1\n2025-08-01 01:31:11,831 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 18 in batch 1\n2025-08-01 01:31:11,831 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 18 in batch 1\n2025-08-01 01:31:11,831 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 19 in batch 1\n2025-08-01 01:31:11,831 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 19 in batch 1\n2025-08-01 01:31:11,832 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 20 in batch 1\n2025-08-01 01:31:11,832 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 20 in batch 1\n2025-08-01 01:31:11,833 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 21 in batch 1\n2025-08-01 01:31:11,833 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 22 in batch 1\n2025-08-01 01:31:11,834 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 22 in batch 1\n2025-08-01 01:31:11,834 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 23 in batch 1\n2025-08-01 01:31:11,834 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 23 in batch 1\n2025-08-01 01:31:11,835 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 24 in batch 1\n2025-08-01 01:31:11,835 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 24 in batch 1\n2025-08-01 01:31:11,835 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 25 in batch 1\n2025-08-01 01:31:11,836 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 25 in batch 1\n2025-08-01 01:31:11,836 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 26 in batch 1\n2025-08-01 01:31:11,836 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 27 in batch 1\n2025-08-01 01:31:11,837 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 27 in batch 1\n2025-08-01 01:31:11,837 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 28 in batch 1\n2025-08-01 01:31:11,837 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 28 in batch 1\n2025-08-01 01:31:11,838 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 29 in batch 1\n2025-08-01 01:31:11,838 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 29 in batch 1\n2025-08-01 01:31:11,838 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 30 in batch 1\n2025-08-01 01:31:11,838 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 30 in batch 1\n2025-08-01 01:31:11,839 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 31 in batch 1\n2025-08-01 01:31:11,839 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 31 in batch 1\n2025-08-01 01:31:11,839 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 32 in batch 1\n2025-08-01 01:31:11,840 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 32 in batch 1\n2025-08-01 01:31:11,840 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 33 in batch 1\n2025-08-01 01:31:11,841 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 33 in batch 1\n2025-08-01 01:31:11,841 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 34 in batch 1\n2025-08-01 01:31:11,841 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 34 in batch 1\n2025-08-01 01:31:11,841 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 35 in batch 1\n2025-08-01 01:31:11,842 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 36 in batch 1\n2025-08-01 01:31:11,842 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 36 in batch 1\n2025-08-01 01:31:11,842 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 37 in batch 1\n2025-08-01 01:31:11,842 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 38 in batch 1\n2025-08-01 01:31:11,842 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 38 in batch 1\n2025-08-01 01:31:11,843 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 39 in batch 1\n2025-08-01 01:31:11,845 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 39 in batch 1\n2025-08-01 01:31:11,847 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 40 in batch 1\n2025-08-01 01:31:11,848 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 40 in batch 1\n2025-08-01 01:31:11,848 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 41 in batch 1\n2025-08-01 01:31:11,849 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 41 in batch 1\n2025-08-01 01:31:11,849 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 42 in batch 1\n2025-08-01 01:31:11,849 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 42 in batch 1\n2025-08-01 01:31:11,849 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 43 in batch 1\n2025-08-01 01:31:11,850 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 43 in batch 1\n2025-08-01 01:31:11,850 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 44 in batch 1\n2025-08-01 01:31:11,850 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 44 in batch 1\n2025-08-01 01:31:11,851 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 45 in batch 1\n2025-08-01 01:31:11,851 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 45 in batch 1\n2025-08-01 01:31:11,852 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 46 in batch 1\n2025-08-01 01:31:11,852 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 46 in batch 1\n2025-08-01 01:31:11,853 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 47 in batch 1\n2025-08-01 01:31:11,853 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 47 in batch 1\n2025-08-01 01:31:11,854 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 48 in batch 1\n2025-08-01 01:31:11,854 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 48 in batch 1\n2025-08-01 01:31:11,854 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 49 in batch 1\n2025-08-01 01:31:11,855 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 49 in batch 1\n2025-08-01 01:31:11,855 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 50 in batch 1\n2025-08-01 01:31:11,855 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 50 in batch 1\n2025-08-01 01:31:11,856 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 51 in batch 1\n2025-08-01 01:31:11,857 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 51 in batch 1\n2025-08-01 01:31:11,857 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 52 in batch 1\n2025-08-01 01:31:11,857 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 52 in batch 1\n2025-08-01 01:31:11,857 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 53 in batch 1\n2025-08-01 01:31:11,858 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 54 in batch 1\n2025-08-01 01:31:11,858 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 54 in batch 1\n2025-08-01 01:31:11,859 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 55 in batch 1\n2025-08-01 01:31:11,859 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 55 in batch 1\n2025-08-01 01:31:11,859 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 56 in batch 1\n2025-08-01 01:31:11,859 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 56 in batch 1\n2025-08-01 01:31:11,859 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 57 in batch 1\n2025-08-01 01:31:11,860 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 57 in batch 1\n2025-08-01 01:31:11,861 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 58 in batch 1\n2025-08-01 01:31:11,861 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 58 in batch 1\n2025-08-01 01:31:11,861 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 59 in batch 1\n2025-08-01 01:31:11,861 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 60 in batch 1\n2025-08-01 01:31:11,862 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 61 in batch 1\n2025-08-01 01:31:11,862 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 61 in batch 1\n2025-08-01 01:31:11,862 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 62 in batch 1\n2025-08-01 01:31:11,862 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 62 in batch 1\n2025-08-01 01:31:11,863 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 63 in batch 1\n2025-08-01 01:31:11,863 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 63 in batch 1\n2025-08-01 01:31:11,863 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 64 in batch 1\n2025-08-01 01:31:11,863 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 64 in batch 1\n2025-08-01 01:31:11,864 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 65 in batch 1\n2025-08-01 01:31:11,864 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 65 in batch 1\n2025-08-01 01:31:11,864 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 66 in batch 1\n2025-08-01 01:31:11,864 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 66 in batch 1\n2025-08-01 01:31:11,865 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 67 in batch 1\n2025-08-01 01:31:11,865 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 67 in batch 1\n2025-08-01 01:31:11,865 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 68 in batch 1\n2025-08-01 01:31:11,865 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 68 in batch 1\n2025-08-01 01:31:11,866 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 69 in batch 1\n2025-08-01 01:31:11,866 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 69 in batch 1\n2025-08-01 01:31:11,866 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 70 in batch 1\n2025-08-01 01:31:11,866 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 70 in batch 1\n2025-08-01 01:31:11,867 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 71 in batch 1\n2025-08-01 01:31:11,867 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 71 in batch 1\n2025-08-01 01:31:11,869 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 72 in batch 1\n2025-08-01 01:31:11,870 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 72 in batch 1\n2025-08-01 01:31:11,870 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 73 in batch 1\n2025-08-01 01:31:11,870 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 73 in batch 1\n2025-08-01 01:31:11,870 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 74 in batch 1\n2025-08-01 01:31:11,871 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 74 in batch 1\n2025-08-01 01:31:11,871 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 75 in batch 1\n2025-08-01 01:31:11,871 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 75 in batch 1\n2025-08-01 01:31:11,872 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 76 in batch 1\n2025-08-01 01:31:11,872 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 76 in batch 1\n2025-08-01 01:31:11,873 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 77 in batch 1\n2025-08-01 01:31:11,873 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 77 in batch 1\n2025-08-01 01:31:11,873 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 78 in batch 1\n2025-08-01 01:31:11,874 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 78 in batch 1\n2025-08-01 01:31:11,874 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 79 in batch 1\n2025-08-01 01:31:11,874 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 79 in batch 1\n2025-08-01 01:31:11,875 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 87 in batch 1\n2025-08-01 01:31:11,875 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 88 in batch 1\n2025-08-01 01:31:11,875 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 88 in batch 1\n2025-08-01 01:31:11,876 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 89 in batch 1\n2025-08-01 01:31:11,876 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 89 in batch 1\n2025-08-01 01:31:11,876 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 90 in batch 1\n2025-08-01 01:31:11,877 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 90 in batch 1\n2025-08-01 01:31:11,877 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 91 in batch 1\n2025-08-01 01:31:11,878 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 91 in batch 1\n2025-08-01 01:31:11,878 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 96 in batch 1\n2025-08-01 01:31:11,878 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 97 in batch 1\n2025-08-01 01:31:11,879 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 98 in batch 1\n2025-08-01 01:31:11,879 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 98 in batch 1\n2025-08-01 01:31:11,879 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 99 in batch 1\n2025-08-01 01:31:11,879 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 99 in batch 1\n2025-08-01 01:31:11,880 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 100 in batch 1\n2025-08-01 01:31:11,880 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 101 in batch 1\n2025-08-01 01:31:11,881 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 102 in batch 1\n2025-08-01 01:31:11,881 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 102 in batch 1\n2025-08-01 01:31:11,882 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 103 in batch 1\n2025-08-01 01:31:11,882 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 103 in batch 1\n2025-08-01 01:31:11,883 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 104 in batch 1\n2025-08-01 01:31:11,883 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 104 in batch 1\n2025-08-01 01:31:11,883 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 105 in batch 1\n2025-08-01 01:31:11,883 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 105 in batch 1\n2025-08-01 01:31:11,884 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 106 in batch 1\n2025-08-01 01:31:11,884 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 106 in batch 1\n2025-08-01 01:31:11,884 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 107 in batch 1\n2025-08-01 01:31:11,884 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 107 in batch 1\n2025-08-01 01:31:11,885 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 108 in batch 1\n2025-08-01 01:31:11,885 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 108 in batch 1\n2025-08-01 01:31:11,886 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 109 in batch 1\n2025-08-01 01:31:11,887 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 109 in batch 1\n2025-08-01 01:31:11,887 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 110 in batch 1\n2025-08-01 01:31:11,887 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 110 in batch 1\n2025-08-01 01:31:11,888 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 111 in batch 1\n2025-08-01 01:31:11,888 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 111 in batch 1\n2025-08-01 01:31:11,888 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 112 in batch 1\n2025-08-01 01:31:11,888 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 112 in batch 1\n2025-08-01 01:31:11,889 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 113 in batch 1\n2025-08-01 01:31:11,889 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 113 in batch 1\n2025-08-01 01:31:11,889 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 114 in batch 1\n2025-08-01 01:31:11,889 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 114 in batch 1\n2025-08-01 01:31:11,890 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 115 in batch 1\n2025-08-01 01:31:11,890 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 115 in batch 1\n2025-08-01 01:31:11,891 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 116 in batch 1\n2025-08-01 01:31:11,892 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 116 in batch 1\n2025-08-01 01:31:11,892 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 117 in batch 1\n2025-08-01 01:31:11,892 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 117 in batch 1\n2025-08-01 01:31:11,893 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 118 in batch 1\n2025-08-01 01:31:11,893 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 118 in batch 1\n2025-08-01 01:31:11,893 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 119 in batch 1\n2025-08-01 01:31:11,893 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 119 in batch 1\n2025-08-01 01:31:11,894 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 120 in batch 1\n2025-08-01 01:31:11,894 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 120 in batch 1\n2025-08-01 01:31:11,894 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 121 in batch 1\n2025-08-01 01:31:11,895 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 121 in batch 1\n2025-08-01 01:31:11,895 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 122 in batch 1\n2025-08-01 01:31:11,895 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 122 in batch 1\n2025-08-01 01:31:11,896 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 123 in batch 1\n2025-08-01 01:31:11,896 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 123 in batch 1\n2025-08-01 01:31:11,897 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 124 in batch 1\n2025-08-01 01:31:11,898 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 124 in batch 1\n2025-08-01 01:31:11,898 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 125 in batch 1\n2025-08-01 01:31:11,898 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 125 in batch 1\n2025-08-01 01:31:11,899 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 126 in batch 1\n2025-08-01 01:31:11,899 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 126 in batch 1\n2025-08-01 01:31:11,900 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 127 in batch 1\n2025-08-01 01:31:11,900 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 127 in batch 1\n2025-08-01 01:31:11,900 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 128 in batch 1\n2025-08-01 01:31:11,900 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 128 in batch 1\n2025-08-01 01:31:11,901 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 129 in batch 1\n2025-08-01 01:31:11,901 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 129 in batch 1\n2025-08-01 01:31:11,901 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 130 in batch 1\n2025-08-01 01:31:11,901 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 130 in batch 1\n2025-08-01 01:31:11,902 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 131 in batch 1\n2025-08-01 01:31:11,902 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 131 in batch 1\n2025-08-01 01:31:11,902 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 132 in batch 1\n2025-08-01 01:31:11,902 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 132 in batch 1\n2025-08-01 01:31:11,903 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 135 in batch 1\n2025-08-01 01:31:11,903 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 135 in batch 1\n2025-08-01 01:31:11,903 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 136 in batch 1\n2025-08-01 01:31:11,904 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 136 in batch 1\n2025-08-01 01:31:11,905 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 137 in batch 1\n2025-08-01 01:31:11,905 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 137 in batch 1\n2025-08-01 01:31:11,905 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 138 in batch 1\n2025-08-01 01:31:11,906 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 138 in batch 1\n2025-08-01 01:31:11,906 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 139 in batch 1\n2025-08-01 01:31:11,906 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 139 in batch 1\n2025-08-01 01:31:11,906 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 140 in batch 1\n2025-08-01 01:31:11,908 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 141 in batch 1\n2025-08-01 01:31:11,909 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 143 in batch 1\n2025-08-01 01:31:11,911 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 143 in batch 1\n2025-08-01 01:31:11,911 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 144 in batch 1\n2025-08-01 01:31:11,912 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 145 in batch 1\n2025-08-01 01:31:11,912 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 146 in batch 1\n2025-08-01 01:31:11,912 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 147 in batch 1\n2025-08-01 01:31:11,913 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 148 in batch 1\n2025-08-01 01:31:11,913 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 149 in batch 1\n2025-08-01 01:31:11,913 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 150 in batch 1\n2025-08-01 01:31:11,914 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 150 in batch 1\n2025-08-01 01:31:11,914 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 151 in batch 1\n2025-08-01 01:31:11,914 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 151 in batch 1\n2025-08-01 01:31:11,915 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 152 in batch 1\n2025-08-01 01:31:11,915 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 152 in batch 1\n2025-08-01 01:31:11,915 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 153 in batch 1\n2025-08-01 01:31:11,916 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 153 in batch 1\n2025-08-01 01:31:11,916 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 154 in batch 1\n2025-08-01 01:31:11,916 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 154 in batch 1\n2025-08-01 01:31:11,916 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 155 in batch 1\n2025-08-01 01:31:11,917 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 157 in batch 1\n2025-08-01 01:31:11,917 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 157 in batch 1\n2025-08-01 01:31:11,917 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 158 in batch 1\n2025-08-01 01:31:11,917 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 158 in batch 1\n2025-08-01 01:31:11,918 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 159 in batch 1\n2025-08-01 01:31:11,918 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 159 in batch 1\n2025-08-01 01:31:11,918 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 160 in batch 1\n2025-08-01 01:31:11,919 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 160 in batch 1\n2025-08-01 01:31:11,920 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 161 in batch 1\n2025-08-01 01:31:11,920 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 161 in batch 1\n2025-08-01 01:31:11,920 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 162 in batch 1\n2025-08-01 01:31:11,921 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 162 in batch 1\n2025-08-01 01:31:11,922 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 163 in batch 1\n2025-08-01 01:31:11,922 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 163 in batch 1\n2025-08-01 01:31:11,923 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 164 in batch 1\n2025-08-01 01:31:11,924 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 164 in batch 1\n2025-08-01 01:31:11,924 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 165 in batch 1\n2025-08-01 01:31:11,924 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 165 in batch 1\n2025-08-01 01:31:11,925 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 166 in batch 1\n2025-08-01 01:31:11,925 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 166 in batch 1\n2025-08-01 01:31:11,926 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 167 in batch 1\n2025-08-01 01:31:11,926 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 167 in batch 1\n2025-08-01 01:31:11,926 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 168 in batch 1\n2025-08-01 01:31:11,927 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 168 in batch 1\n2025-08-01 01:31:11,927 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 169 in batch 1\n2025-08-01 01:31:11,927 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 169 in batch 1\n2025-08-01 01:31:11,928 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 170 in batch 1\n2025-08-01 01:31:11,928 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 170 in batch 1\n2025-08-01 01:31:11,928 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 171 in batch 1\n2025-08-01 01:31:11,929 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 171 in batch 1\n2025-08-01 01:31:11,929 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 172 in batch 1\n2025-08-01 01:31:11,929 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 172 in batch 1\n2025-08-01 01:31:11,930 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 173 in batch 1\n2025-08-01 01:31:11,930 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 173 in batch 1\n2025-08-01 01:31:11,930 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 174 in batch 1\n2025-08-01 01:31:11,931 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 174 in batch 1\n2025-08-01 01:31:11,931 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 175 in batch 1\n2025-08-01 01:31:11,931 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 175 in batch 1\n2025-08-01 01:31:11,932 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 176 in batch 1\n2025-08-01 01:31:11,932 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 176 in batch 1\n2025-08-01 01:31:11,932 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 177 in batch 1\n2025-08-01 01:31:11,932 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 177 in batch 1\n2025-08-01 01:31:11,933 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 178 in batch 1\n2025-08-01 01:31:11,933 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 178 in batch 1\n2025-08-01 01:31:11,933 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 179 in batch 1\n2025-08-01 01:31:11,934 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 179 in batch 1\n2025-08-01 01:31:11,934 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 180 in batch 1\n2025-08-01 01:31:11,934 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 180 in batch 1\n2025-08-01 01:31:11,935 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 181 in batch 1\n2025-08-01 01:31:11,935 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 181 in batch 1\n2025-08-01 01:31:11,935 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 182 in batch 1\n2025-08-01 01:31:11,935 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 182 in batch 1\n2025-08-01 01:31:11,936 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 183 in batch 1\n2025-08-01 01:31:11,936 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 183 in batch 1\n2025-08-01 01:31:11,936 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 184 in batch 1\n2025-08-01 01:31:11,936 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 184 in batch 1\n2025-08-01 01:31:11,937 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 185 in batch 1\n2025-08-01 01:31:11,937 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 186 in batch 1\n2025-08-01 01:31:11,937 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 186 in batch 1\n2025-08-01 01:31:11,938 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 187 in batch 1\n2025-08-01 01:31:11,938 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 188 in batch 1\n2025-08-01 01:31:11,938 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 188 in batch 1\n2025-08-01 01:31:11,939 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 189 in batch 1\n2025-08-01 01:31:11,939 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 189 in batch 1\n2025-08-01 01:31:11,941 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 190 in batch 1\n2025-08-01 01:31:11,942 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 190 in batch 1\n2025-08-01 01:31:11,942 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 191 in batch 1\n2025-08-01 01:31:11,942 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 191 in batch 1\n2025-08-01 01:31:11,943 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 192 in batch 1\n2025-08-01 01:31:11,943 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 192 in batch 1\n2025-08-01 01:31:11,943 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 193 in batch 1\n2025-08-01 01:31:11,944 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 193 in batch 1\n2025-08-01 01:31:11,944 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 194 in batch 1\n2025-08-01 01:31:11,944 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 194 in batch 1\n2025-08-01 01:31:11,945 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 195 in batch 1\n2025-08-01 01:31:11,945 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 195 in batch 1\n2025-08-01 01:31:11,945 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 196 in batch 1\n2025-08-01 01:31:11,945 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 196 in batch 1\n2025-08-01 01:31:11,946 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 197 in batch 1\n2025-08-01 01:31:11,946 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 197 in batch 1\n2025-08-01 01:31:11,947 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 198 in batch 1\n2025-08-01 01:31:11,947 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 198 in batch 1\n2025-08-01 01:31:11,947 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 199 in batch 1\n2025-08-01 01:31:11,947 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 199 in batch 1\n2025-08-01 01:31:11,947 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 201 in batch 1\n2025-08-01 01:31:11,948 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 201 in batch 1\n2025-08-01 01:31:11,948 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 202 in batch 1\n2025-08-01 01:31:11,949 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 202 in batch 1\n2025-08-01 01:31:11,949 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 203 in batch 1\n2025-08-01 01:31:11,949 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 203 in batch 1\n2025-08-01 01:31:11,950 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 204 in batch 1\n2025-08-01 01:31:11,950 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 204 in batch 1\n2025-08-01 01:31:11,950 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 205 in batch 1\n2025-08-01 01:31:11,950 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 205 in batch 1\n2025-08-01 01:31:11,951 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 206 in batch 1\n2025-08-01 01:31:11,951 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 206 in batch 1\n2025-08-01 01:31:11,952 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 207 in batch 1\n2025-08-01 01:31:11,952 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 207 in batch 1\n2025-08-01 01:31:11,952 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 208 in batch 1\n2025-08-01 01:31:11,953 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 208 in batch 1\n2025-08-01 01:31:11,953 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 209 in batch 1\n2025-08-01 01:31:11,954 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 209 in batch 1\n2025-08-01 01:31:11,954 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 210 in batch 1\n2025-08-01 01:31:11,955 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 210 in batch 1\n2025-08-01 01:31:11,955 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 211 in batch 1\n2025-08-01 01:31:11,955 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 211 in batch 1\n2025-08-01 01:31:11,955 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 212 in batch 1\n2025-08-01 01:31:11,955 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 212 in batch 1\n2025-08-01 01:31:11,956 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 213 in batch 1\n2025-08-01 01:31:11,956 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 213 in batch 1\n2025-08-01 01:31:11,956 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 214 in batch 1\n2025-08-01 01:31:11,957 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 214 in batch 1\n2025-08-01 01:31:11,957 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 215 in batch 1\n2025-08-01 01:31:11,957 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 215 in batch 1\n2025-08-01 01:31:11,957 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 216 in batch 1\n2025-08-01 01:31:11,958 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 216 in batch 1\n2025-08-01 01:31:11,959 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 217 in batch 1\n2025-08-01 01:31:11,959 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 217 in batch 1\n2025-08-01 01:31:11,959 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 218 in batch 1\n2025-08-01 01:31:11,959 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 219 in batch 1\n2025-08-01 01:31:11,960 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 219 in batch 1\n2025-08-01 01:31:11,960 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 220 in batch 1\n2025-08-01 01:31:11,960 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 220 in batch 1\n2025-08-01 01:31:11,961 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 221 in batch 1\n2025-08-01 01:31:11,961 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 221 in batch 1\n2025-08-01 01:31:11,961 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 222 in batch 1\n2025-08-01 01:31:11,961 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 222 in batch 1\n2025-08-01 01:31:11,962 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 223 in batch 1\n2025-08-01 01:31:11,962 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 223 in batch 1\n2025-08-01 01:31:11,963 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 224 in batch 1\n2025-08-01 01:31:11,963 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 224 in batch 1\n2025-08-01 01:31:11,963 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 225 in batch 1\n2025-08-01 01:31:11,964 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 225 in batch 1\n2025-08-01 01:31:11,964 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 226 in batch 1\n2025-08-01 01:31:11,964 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 226 in batch 1\n2025-08-01 01:31:11,965 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 227 in batch 1\n2025-08-01 01:31:11,965 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 227 in batch 1\n2025-08-01 01:31:11,965 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 228 in batch 1\n2025-08-01 01:31:11,965 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 228 in batch 1\n2025-08-01 01:31:11,966 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 229 in batch 1\n2025-08-01 01:31:11,966 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 229 in batch 1\n2025-08-01 01:31:11,966 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 230 in batch 1\n2025-08-01 01:31:11,966 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 230 in batch 1\n2025-08-01 01:31:11,967 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 231 in batch 1\n2025-08-01 01:31:11,967 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 231 in batch 1\n2025-08-01 01:31:11,967 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 232 in batch 1\n2025-08-01 01:31:11,968 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 232 in batch 1\n2025-08-01 01:31:11,968 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 233 in batch 1\n2025-08-01 01:31:11,968 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 233 in batch 1\n2025-08-01 01:31:11,968 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 234 in batch 1\n2025-08-01 01:31:11,969 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 234 in batch 1\n2025-08-01 01:31:11,969 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 235 in batch 1\n2025-08-01 01:31:11,969 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 235 in batch 1\n2025-08-01 01:31:11,970 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 236 in batch 1\n2025-08-01 01:31:11,970 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 236 in batch 1\n2025-08-01 01:31:11,971 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 237 in batch 1\n2025-08-01 01:31:11,971 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 238 in batch 1\n2025-08-01 01:31:11,971 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 239 in batch 1\n2025-08-01 01:31:11,971 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 240 in batch 1\n2025-08-01 01:31:11,972 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 240 in batch 1\n2025-08-01 01:31:11,972 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 241 in batch 1\n2025-08-01 01:31:11,972 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 241 in batch 1\n2025-08-01 01:31:11,972 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 242 in batch 1\n2025-08-01 01:31:11,973 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 242 in batch 1\n2025-08-01 01:31:11,973 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 243 in batch 1\n2025-08-01 01:31:11,973 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 243 in batch 1\n2025-08-01 01:31:11,973 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 244 in batch 1\n2025-08-01 01:31:11,974 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 244 in batch 1\n2025-08-01 01:31:11,974 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 245 in batch 1\n2025-08-01 01:31:11,974 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 245 in batch 1\n2025-08-01 01:31:11,975 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 246 in batch 1\n2025-08-01 01:31:11,975 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 246 in batch 1\n2025-08-01 01:31:11,976 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 247 in batch 1\n2025-08-01 01:31:11,976 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 247 in batch 1\n2025-08-01 01:31:11,976 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 248 in batch 1\n2025-08-01 01:31:11,977 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 248 in batch 1\n2025-08-01 01:31:11,977 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 249 in batch 1\n2025-08-01 01:31:11,977 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 249 in batch 1\n2025-08-01 01:31:11,978 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 250 in batch 1\n2025-08-01 01:31:11,978 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 250 in batch 1\n2025-08-01 01:31:11,978 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 251 in batch 1\n2025-08-01 01:31:11,978 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 251 in batch 1\n2025-08-01 01:31:11,979 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 252 in batch 1\n2025-08-01 01:31:11,979 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 252 in batch 1\n2025-08-01 01:31:11,979 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 253 in batch 1\n2025-08-01 01:31:11,980 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 253 in batch 1\n2025-08-01 01:31:11,980 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 254 in batch 1\n2025-08-01 01:31:11,980 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 254 in batch 1\n2025-08-01 01:31:11,981 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 255 in batch 1\n2025-08-01 01:31:11,981 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 255 in batch 1\n2025-08-01 01:31:11,981 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 256 in batch 1\n2025-08-01 01:31:11,982 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 256 in batch 1\n2025-08-01 01:31:11,982 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 257 in batch 1\n2025-08-01 01:31:11,983 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 257 in batch 1\n2025-08-01 01:31:11,983 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 258 in batch 1\n2025-08-01 01:31:11,983 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 258 in batch 1\n2025-08-01 01:31:11,984 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 259 in batch 1\n2025-08-01 01:31:11,984 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 259 in batch 1\n2025-08-01 01:31:11,985 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 260 in batch 1\n2025-08-01 01:31:11,985 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 260 in batch 1\n2025-08-01 01:31:11,985 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 261 in batch 1\n2025-08-01 01:31:11,986 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 261 in batch 1\n2025-08-01 01:31:11,986 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 262 in batch 1\n2025-08-01 01:31:11,986 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 262 in batch 1\n2025-08-01 01:31:11,986 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 263 in batch 1\n2025-08-01 01:31:11,986 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 263 in batch 1\n2025-08-01 01:31:11,987 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 264 in batch 1\n2025-08-01 01:31:11,987 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 264 in batch 1\n2025-08-01 01:31:11,988 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 265 in batch 1\n2025-08-01 01:31:11,988 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 265 in batch 1\n2025-08-01 01:31:11,988 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 266 in batch 1\n2025-08-01 01:31:11,988 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 266 in batch 1\n2025-08-01 01:31:11,989 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 268 in batch 1\n2025-08-01 01:31:11,989 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 268 in batch 1\n2025-08-01 01:31:11,989 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 269 in batch 1\n2025-08-01 01:31:11,990 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 269 in batch 1\n2025-08-01 01:31:11,990 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 270 in batch 1\n2025-08-01 01:31:11,991 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 270 in batch 1\n2025-08-01 01:31:11,991 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 271 in batch 1\n2025-08-01 01:31:11,991 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 271 in batch 1\n2025-08-01 01:31:11,991 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 272 in batch 1\n2025-08-01 01:31:11,992 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 272 in batch 1\n2025-08-01 01:31:11,992 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 273 in batch 1\n2025-08-01 01:31:11,992 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 273 in batch 1\n2025-08-01 01:31:11,992 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 274 in batch 1\n2025-08-01 01:31:11,992 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 274 in batch 1\n2025-08-01 01:31:11,993 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 279 in batch 1\n2025-08-01 01:31:11,993 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 279 in batch 1\n2025-08-01 01:31:11,993 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 280 in batch 1\n2025-08-01 01:31:11,994 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 280 in batch 1\n2025-08-01 01:31:11,994 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 281 in batch 1\n2025-08-01 01:31:11,994 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 281 in batch 1\n2025-08-01 01:31:11,994 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 282 in batch 1\n2025-08-01 01:31:11,995 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 282 in batch 1\n2025-08-01 01:31:11,995 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 283 in batch 1\n2025-08-01 01:31:11,996 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 283 in batch 1\n2025-08-01 01:31:11,996 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 284 in batch 1\n2025-08-01 01:31:11,996 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 284 in batch 1\n2025-08-01 01:31:11,996 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 285 in batch 1\n2025-08-01 01:31:11,997 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 285 in batch 1\n2025-08-01 01:31:11,997 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 286 in batch 1\n2025-08-01 01:31:11,997 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 286 in batch 1\n2025-08-01 01:31:11,998 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 287 in batch 1\n2025-08-01 01:31:11,998 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 287 in batch 1\n2025-08-01 01:31:11,998 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 288 in batch 1\n2025-08-01 01:31:11,998 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 288 in batch 1\n2025-08-01 01:31:12,000 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 289 in batch 1\n2025-08-01 01:31:12,000 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 289 in batch 1\n2025-08-01 01:31:12,000 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 290 in batch 1\n2025-08-01 01:31:12,000 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 290 in batch 1\n2025-08-01 01:31:12,001 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 291 in batch 1\n2025-08-01 01:31:12,001 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 291 in batch 1\n2025-08-01 01:31:12,001 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 292 in batch 1\n2025-08-01 01:31:12,002 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 292 in batch 1\n2025-08-01 01:31:12,002 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 293 in batch 1\n2025-08-01 01:31:12,002 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 293 in batch 1\n2025-08-01 01:31:12,003 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 294 in batch 1\n2025-08-01 01:31:12,003 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 294 in batch 1\n2025-08-01 01:31:12,003 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 295 in batch 1\n2025-08-01 01:31:12,003 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 296 in batch 1\n2025-08-01 01:31:12,004 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 296 in batch 1\n2025-08-01 01:31:12,004 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 297 in batch 1\n2025-08-01 01:31:12,004 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 298 in batch 1\n2025-08-01 01:31:12,004 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 298 in batch 1\n2025-08-01 01:31:12,005 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 299 in batch 1\n2025-08-01 01:31:12,005 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 299 in batch 1\n2025-08-01 01:31:12,005 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 300 in batch 1\n2025-08-01 01:31:12,005 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 300 in batch 1\n2025-08-01 01:31:12,005 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 301 in batch 1\n2025-08-01 01:31:12,006 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 301 in batch 1\n2025-08-01 01:31:12,006 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 302 in batch 1\n2025-08-01 01:31:12,007 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 302 in batch 1\n2025-08-01 01:31:12,007 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 303 in batch 1\n2025-08-01 01:31:12,007 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 303 in batch 1\n2025-08-01 01:31:12,007 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 304 in batch 1\n2025-08-01 01:31:12,008 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 304 in batch 1\n2025-08-01 01:31:12,008 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 305 in batch 1\n2025-08-01 01:31:12,008 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 305 in batch 1\n2025-08-01 01:31:12,008 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 306 in batch 1\n2025-08-01 01:31:12,009 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 306 in batch 1\n2025-08-01 01:31:12,009 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 307 in batch 1\n2025-08-01 01:31:12,009 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 307 in batch 1\n2025-08-01 01:31:12,009 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 308 in batch 1\n2025-08-01 01:31:12,009 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 308 in batch 1\n2025-08-01 01:31:12,010 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 309 in batch 1\n2025-08-01 01:31:12,011 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 309 in batch 1\n2025-08-01 01:31:12,011 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 310 in batch 1\n2025-08-01 01:31:12,012 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 310 in batch 1\n2025-08-01 01:31:12,012 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 311 in batch 1\n2025-08-01 01:31:12,012 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 311 in batch 1\n2025-08-01 01:31:12,012 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 312 in batch 1\n2025-08-01 01:31:12,013 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 312 in batch 1\n2025-08-01 01:31:12,013 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 313 in batch 1\n2025-08-01 01:31:12,013 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 313 in batch 1\n2025-08-01 01:31:12,013 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 314 in batch 1\n2025-08-01 01:31:12,014 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 314 in batch 1\n2025-08-01 01:31:12,014 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 315 in batch 1\n2025-08-01 01:31:12,014 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 315 in batch 1\n2025-08-01 01:31:12,015 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 316 in batch 1\n2025-08-01 01:31:12,015 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 316 in batch 1\n2025-08-01 01:31:12,015 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 328 in batch 1\n2025-08-01 01:31:12,015 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 331 in batch 1\n2025-08-01 01:31:12,016 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 343 in batch 1\n2025-08-01 01:31:12,017 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 347 in batch 1\n2025-08-01 01:31:12,017 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 348 in batch 1\n2025-08-01 01:31:12,017 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 348 in batch 1\n2025-08-01 01:31:12,018 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 349 in batch 1\n2025-08-01 01:31:12,018 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 349 in batch 1\n2025-08-01 01:31:12,018 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 350 in batch 1\n2025-08-01 01:31:12,019 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 350 in batch 1\n2025-08-01 01:31:12,019 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 351 in batch 1\n2025-08-01 01:31:12,019 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 351 in batch 1\n2025-08-01 01:31:12,019 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 352 in batch 1\n2025-08-01 01:31:12,020 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 352 in batch 1\n2025-08-01 01:31:12,020 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 353 in batch 1\n2025-08-01 01:31:12,020 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 353 in batch 1\n2025-08-01 01:31:12,020 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 354 in batch 1\n2025-08-01 01:31:12,021 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 354 in batch 1\n2025-08-01 01:31:12,021 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 356 in batch 1\n2025-08-01 01:31:12,021 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 356 in batch 1\n2025-08-01 01:31:12,021 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 357 in batch 1\n2025-08-01 01:31:12,022 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 357 in batch 1\n2025-08-01 01:31:12,022 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 358 in batch 1\n2025-08-01 01:31:12,022 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 359 in batch 1\n2025-08-01 01:31:12,024 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 361 in batch 1\n2025-08-01 01:31:12,025 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 361 in batch 1\n2025-08-01 01:31:12,025 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 362 in batch 1\n2025-08-01 01:31:12,025 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 362 in batch 1\n2025-08-01 01:31:12,026 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 363 in batch 1\n2025-08-01 01:31:12,026 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 363 in batch 1\n2025-08-01 01:31:12,026 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 364 in batch 1\n2025-08-01 01:31:12,026 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 364 in batch 1\n2025-08-01 01:31:12,026 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 365 in batch 1\n2025-08-01 01:31:12,027 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 365 in batch 1\n2025-08-01 01:31:12,027 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 366 in batch 1\n2025-08-01 01:31:12,027 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 366 in batch 1\n2025-08-01 01:31:12,027 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 367 in batch 1\n2025-08-01 01:31:12,028 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 367 in batch 1\n2025-08-01 01:31:12,029 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 368 in batch 1\n2025-08-01 01:31:12,029 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 368 in batch 1\n2025-08-01 01:31:12,029 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 369 in batch 1\n2025-08-01 01:31:12,030 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 369 in batch 1\n2025-08-01 01:31:12,030 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 370 in batch 1\n2025-08-01 01:31:12,030 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 370 in batch 1\n2025-08-01 01:31:12,030 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 371 in batch 1\n2025-08-01 01:31:12,030 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 371 in batch 1\n2025-08-01 01:31:12,031 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 372 in batch 1\n2025-08-01 01:31:12,031 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 372 in batch 1\n2025-08-01 01:31:12,031 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 373 in batch 1\n2025-08-01 01:31:12,032 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 373 in batch 1\n2025-08-01 01:31:12,032 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 374 in batch 1\n2025-08-01 01:31:12,032 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 374 in batch 1\n2025-08-01 01:31:12,032 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 375 in batch 1\n2025-08-01 01:31:12,033 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 375 in batch 1\n2025-08-01 01:31:12,033 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 376 in batch 1\n2025-08-01 01:31:12,033 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 376 in batch 1\n2025-08-01 01:31:12,033 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 377 in batch 1\n2025-08-01 01:31:12,033 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 377 in batch 1\n2025-08-01 01:31:12,033 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 378 in batch 1\n2025-08-01 01:31:12,034 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 378 in batch 1\n2025-08-01 01:31:12,034 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 379 in batch 1\n2025-08-01 01:31:12,034 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 379 in batch 1\n2025-08-01 01:31:12,034 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 380 in batch 1\n2025-08-01 01:31:12,035 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 380 in batch 1\n2025-08-01 01:31:12,035 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 381 in batch 1\n2025-08-01 01:31:12,036 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 381 in batch 1\n2025-08-01 01:31:12,037 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 382 in batch 1\n2025-08-01 01:31:12,037 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 382 in batch 1\n2025-08-01 01:31:12,038 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 383 in batch 1\n2025-08-01 01:31:12,038 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 383 in batch 1\n2025-08-01 01:31:12,038 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 384 in batch 1\n2025-08-01 01:31:12,038 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 384 in batch 1\n2025-08-01 01:31:12,038 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 385 in batch 1\n2025-08-01 01:31:12,039 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 385 in batch 1\n2025-08-01 01:31:12,039 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 386 in batch 1\n2025-08-01 01:31:12,039 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 386 in batch 1\n2025-08-01 01:31:12,039 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 387 in batch 1\n2025-08-01 01:31:12,040 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 387 in batch 1\n2025-08-01 01:31:12,041 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 388 in batch 1\n2025-08-01 01:31:12,041 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 388 in batch 1\n2025-08-01 01:31:12,041 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 389 in batch 1\n2025-08-01 01:31:12,042 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 389 in batch 1\n2025-08-01 01:31:12,042 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 390 in batch 1\n2025-08-01 01:31:12,042 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 390 in batch 1\n2025-08-01 01:31:12,042 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 391 in batch 1\n2025-08-01 01:31:12,043 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 391 in batch 1\n2025-08-01 01:31:12,043 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 392 in batch 1\n2025-08-01 01:31:12,044 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 392 in batch 1\n2025-08-01 01:31:12,044 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 393 in batch 1\n2025-08-01 01:31:12,044 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 394 in batch 1\n2025-08-01 01:31:12,045 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 394 in batch 1\n2025-08-01 01:31:12,045 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 395 in batch 1\n2025-08-01 01:31:12,045 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 403 in batch 1\n2025-08-01 01:31:12,045 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 404 in batch 1\n2025-08-01 01:31:12,046 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 404 in batch 1\n2025-08-01 01:31:12,046 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 405 in batch 1\n2025-08-01 01:31:12,046 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 406 in batch 1\n2025-08-01 01:31:12,047 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 406 in batch 1\n2025-08-01 01:31:12,047 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 408 in batch 1\n2025-08-01 01:31:12,047 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 408 in batch 1\n2025-08-01 01:31:12,047 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 410 in batch 1\n2025-08-01 01:31:12,048 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 410 in batch 1\n2025-08-01 01:31:12,048 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 411 in batch 1\n2025-08-01 01:31:12,049 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 411 in batch 1\n2025-08-01 01:31:12,049 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 412 in batch 1\n2025-08-01 01:31:12,049 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 412 in batch 1\n2025-08-01 01:31:12,050 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 413 in batch 1\n2025-08-01 01:31:12,050 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 413 in batch 1\n2025-08-01 01:31:12,050 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 414 in batch 1\n2025-08-01 01:31:12,051 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 414 in batch 1\n2025-08-01 01:31:12,051 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 415 in batch 1\n2025-08-01 01:31:12,052 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 415 in batch 1\n2025-08-01 01:31:12,052 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 416 in batch 1\n2025-08-01 01:31:12,052 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 416 in batch 1\n2025-08-01 01:31:12,053 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 417 in batch 1\n2025-08-01 01:31:12,053 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 418 in batch 1\n2025-08-01 01:31:12,054 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 418 in batch 1\n2025-08-01 01:31:12,054 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 419 in batch 1\n2025-08-01 01:31:12,054 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 419 in batch 1\n2025-08-01 01:31:12,054 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 420 in batch 1\n2025-08-01 01:31:12,054 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 420 in batch 1\n2025-08-01 01:31:12,055 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 421 in batch 1\n2025-08-01 01:31:12,055 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 421 in batch 1\n2025-08-01 01:31:12,055 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 422 in batch 1\n2025-08-01 01:31:12,055 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 422 in batch 1\n2025-08-01 01:31:12,055 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 423 in batch 1\n2025-08-01 01:31:12,056 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 427 in batch 1\n2025-08-01 01:31:12,056 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 431 in batch 1\n2025-08-01 01:31:12,056 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 431 in batch 1\n2025-08-01 01:31:12,057 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 432 in batch 1\n2025-08-01 01:31:12,058 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 432 in batch 1\n2025-08-01 01:31:12,058 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 433 in batch 1\n2025-08-01 01:31:12,058 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 433 in batch 1\n2025-08-01 01:31:12,058 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 434 in batch 1\n2025-08-01 01:31:12,059 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 434 in batch 1\n2025-08-01 01:31:12,059 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 435 in batch 1\n2025-08-01 01:31:12,059 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 435 in batch 1\n2025-08-01 01:31:12,059 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 436 in batch 1\n2025-08-01 01:31:12,059 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 436 in batch 1\n2025-08-01 01:31:12,060 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 437 in batch 1\n2025-08-01 01:31:12,060 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 437 in batch 1\n2025-08-01 01:31:12,061 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 439 in batch 1\n2025-08-01 01:31:12,061 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 439 in batch 1\n2025-08-01 01:31:12,061 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 440 in batch 1\n2025-08-01 01:31:12,061 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 441 in batch 1\n2025-08-01 01:31:12,062 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 441 in batch 1\n2025-08-01 01:31:12,062 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 442 in batch 1\n2025-08-01 01:31:12,062 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 442 in batch 1\n2025-08-01 01:31:12,062 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 443 in batch 1\n2025-08-01 01:31:12,063 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 444 in batch 1\n2025-08-01 01:31:12,063 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 444 in batch 1\n2025-08-01 01:31:12,063 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 445 in batch 1\n2025-08-01 01:31:12,063 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 445 in batch 1\n2025-08-01 01:31:12,063 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 446 in batch 1\n2025-08-01 01:31:12,064 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 446 in batch 1\n2025-08-01 01:31:12,064 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 447 in batch 1\n2025-08-01 01:31:12,065 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 447 in batch 1\n2025-08-01 01:31:12,065 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 448 in batch 1\n2025-08-01 01:31:12,066 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 448 in batch 1\n2025-08-01 01:31:12,067 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 449 in batch 1\n2025-08-01 01:31:12,067 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 449 in batch 1\n2025-08-01 01:31:12,067 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 450 in batch 1\n2025-08-01 01:31:12,067 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 450 in batch 1\n2025-08-01 01:31:12,068 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 451 in batch 1\n2025-08-01 01:31:12,068 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 451 in batch 1\n2025-08-01 01:31:12,068 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 452 in batch 1\n2025-08-01 01:31:12,069 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 452 in batch 1\n2025-08-01 01:31:12,069 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 453 in batch 1\n2025-08-01 01:31:12,070 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 453 in batch 1\n2025-08-01 01:31:12,070 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 454 in batch 1\n2025-08-01 01:31:12,070 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 454 in batch 1\n2025-08-01 01:31:12,071 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 455 in batch 1\n2025-08-01 01:31:12,071 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 455 in batch 1\n2025-08-01 01:31:12,071 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 456 in batch 1\n2025-08-01 01:31:12,071 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 456 in batch 1\n2025-08-01 01:31:12,072 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 457 in batch 1\n2025-08-01 01:31:12,072 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 457 in batch 1\n2025-08-01 01:31:12,073 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 458 in batch 1\n2025-08-01 01:31:12,073 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 458 in batch 1\n2025-08-01 01:31:12,073 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 459 in batch 1\n2025-08-01 01:31:12,073 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 459 in batch 1\n2025-08-01 01:31:12,073 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 460 in batch 1\n2025-08-01 01:31:12,074 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 460 in batch 1\n2025-08-01 01:31:12,074 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 461 in batch 1\n2025-08-01 01:31:12,074 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 461 in batch 1\n2025-08-01 01:31:12,075 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 462 in batch 1\n2025-08-01 01:31:12,075 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 462 in batch 1\n2025-08-01 01:31:12,075 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 463 in batch 1\n2025-08-01 01:31:12,075 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 463 in batch 1\n2025-08-01 01:31:12,076 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 464 in batch 1\n2025-08-01 01:31:12,076 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 464 in batch 1\n2025-08-01 01:31:12,076 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 465 in batch 1\n2025-08-01 01:31:12,077 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 465 in batch 1\n2025-08-01 01:31:12,078 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 466 in batch 1\n2025-08-01 01:31:12,078 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 466 in batch 1\n2025-08-01 01:31:12,078 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 467 in batch 1\n2025-08-01 01:31:12,078 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 468 in batch 1\n2025-08-01 01:31:12,079 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 468 in batch 1\n2025-08-01 01:31:12,079 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 469 in batch 1\n2025-08-01 01:31:12,079 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 469 in batch 1\n2025-08-01 01:31:12,079 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 470 in batch 1\n2025-08-01 01:31:12,080 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 470 in batch 1\n2025-08-01 01:31:12,080 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 471 in batch 1\n2025-08-01 01:31:12,080 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 471 in batch 1\n2025-08-01 01:31:12,080 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 472 in batch 1\n2025-08-01 01:31:12,080 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 472 in batch 1\n2025-08-01 01:31:12,081 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 473 in batch 1\n2025-08-01 01:31:12,081 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 473 in batch 1\n2025-08-01 01:31:12,083 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 474 in batch 1\n2025-08-01 01:31:12,083 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 474 in batch 1\n2025-08-01 01:31:12,083 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 475 in batch 1\n2025-08-01 01:31:12,083 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 475 in batch 1\n2025-08-01 01:31:12,084 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 476 in batch 1\n2025-08-01 01:31:12,085 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 478 in batch 1\n2025-08-01 01:31:12,085 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 478 in batch 1\n2025-08-01 01:31:12,085 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 479 in batch 1\n2025-08-01 01:31:12,086 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 479 in batch 1\n2025-08-01 01:31:12,086 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 480 in batch 1\n2025-08-01 01:31:12,086 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 481 in batch 1\n2025-08-01 01:31:12,086 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 481 in batch 1\n2025-08-01 01:31:12,087 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 482 in batch 1\n2025-08-01 01:31:12,087 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 482 in batch 1\n2025-08-01 01:31:12,087 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 483 in batch 1\n2025-08-01 01:31:12,087 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 483 in batch 1\n2025-08-01 01:31:12,088 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 484 in batch 1\n2025-08-01 01:31:12,088 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 484 in batch 1\n2025-08-01 01:31:12,088 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 485 in batch 1\n2025-08-01 01:31:12,089 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 485 in batch 1\n2025-08-01 01:31:12,089 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 486 in batch 1\n2025-08-01 01:31:12,090 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 486 in batch 1\n2025-08-01 01:31:12,090 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 487 in batch 1\n2025-08-01 01:31:12,090 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 487 in batch 1\n2025-08-01 01:31:12,090 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 488 in batch 1\n2025-08-01 01:31:12,091 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 488 in batch 1\n2025-08-01 01:31:12,091 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 489 in batch 1\n2025-08-01 01:31:12,091 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 489 in batch 1\n2025-08-01 01:31:12,091 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 490 in batch 1\n2025-08-01 01:31:12,092 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 490 in batch 1\n2025-08-01 01:31:12,092 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 491 in batch 1\n2025-08-01 01:31:12,092 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 491 in batch 1\n2025-08-01 01:31:12,093 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 492 in batch 1\n2025-08-01 01:31:12,093 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 492 in batch 1\n2025-08-01 01:31:12,093 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 493 in batch 1\n2025-08-01 01:31:12,094 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 493 in batch 1\n2025-08-01 01:31:12,094 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 494 in batch 1\n2025-08-01 01:31:12,094 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 494 in batch 1\n2025-08-01 01:31:12,095 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 495 in batch 1\n2025-08-01 01:31:12,096 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 495 in batch 1\n2025-08-01 01:31:12,096 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 496 in batch 1\n2025-08-01 01:31:12,096 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 496 in batch 1\n2025-08-01 01:31:12,096 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 497 in batch 1\n2025-08-01 01:31:12,096 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 497 in batch 1\n2025-08-01 01:31:12,097 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 498 in batch 1\n2025-08-01 01:31:12,097 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 498 in batch 1\n2025-08-01 01:31:12,098 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 499 in batch 1\n2025-08-01 01:31:12,098 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 499 in batch 1\n2025-08-01 01:31:12,098 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 500 in batch 1\n2025-08-01 01:31:12,099 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 500 in batch 1\n2025-08-01 01:31:12,099 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 501 in batch 1\n2025-08-01 01:31:12,099 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 501 in batch 1\n2025-08-01 01:31:12,099 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 502 in batch 1\n2025-08-01 01:31:12,100 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 502 in batch 1\n2025-08-01 01:31:12,100 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 503 in batch 1\n2025-08-01 01:31:12,101 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 503 in batch 1\n2025-08-01 01:31:12,101 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 504 in batch 1\n2025-08-01 01:31:12,101 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 505 in batch 1\n2025-08-01 01:31:12,101 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 506 in batch 1\n2025-08-01 01:31:12,102 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 507 in batch 1\n2025-08-01 01:31:12,102 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 508 in batch 1\n2025-08-01 01:31:12,102 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 509 in batch 1\n2025-08-01 01:31:12,103 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 510 in batch 1\n2025-08-01 01:31:12,104 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 511 in batch 1\n2025-08-01 01:31:12,104 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 511 in batch 1\n2025-08-01 01:31:12,104 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 512 in batch 1\n2025-08-01 01:31:12,104 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 512 in batch 1\n2025-08-01 01:31:12,104 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 513 in batch 1\n2025-08-01 01:31:12,105 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 513 in batch 1\n2025-08-01 01:31:12,105 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 514 in batch 1\n2025-08-01 01:31:12,105 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 514 in batch 1\n2025-08-01 01:31:12,105 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 515 in batch 1\n2025-08-01 01:31:12,106 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 515 in batch 1\n2025-08-01 01:31:12,106 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 516 in batch 1\n2025-08-01 01:31:12,107 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 516 in batch 1\n2025-08-01 01:31:12,107 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 517 in batch 1\n2025-08-01 01:31:12,107 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 517 in batch 1\n2025-08-01 01:31:12,107 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 518 in batch 1\n2025-08-01 01:31:12,108 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 518 in batch 1\n2025-08-01 01:31:12,108 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 519 in batch 1\n2025-08-01 01:31:12,108 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 519 in batch 1\n2025-08-01 01:31:12,108 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 520 in batch 1\n2025-08-01 01:31:12,108 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 520 in batch 1\n2025-08-01 01:31:12,109 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 521 in batch 1\n2025-08-01 01:31:12,109 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 521 in batch 1\n2025-08-01 01:31:12,109 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 522 in batch 1\n2025-08-01 01:31:12,109 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 522 in batch 1\n2025-08-01 01:31:12,110 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 523 in batch 1\n2025-08-01 01:31:12,111 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 523 in batch 1\n2025-08-01 01:31:12,111 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 524 in batch 1\n2025-08-01 01:31:12,111 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 524 in batch 1\n2025-08-01 01:31:12,112 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 525 in batch 1\n2025-08-01 01:31:12,112 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 525 in batch 1\n2025-08-01 01:31:12,113 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 526 in batch 1\n2025-08-01 01:31:12,113 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 526 in batch 1\n2025-08-01 01:31:12,113 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 527 in batch 1\n2025-08-01 01:31:12,114 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 527 in batch 1\n2025-08-01 01:31:12,114 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 528 in batch 1\n2025-08-01 01:31:12,114 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 528 in batch 1\n2025-08-01 01:31:12,114 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 529 in batch 1\n2025-08-01 01:31:12,115 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 529 in batch 1\n2025-08-01 01:31:12,115 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 530 in batch 1\n2025-08-01 01:31:12,115 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 530 in batch 1\n2025-08-01 01:31:12,116 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 531 in batch 1\n2025-08-01 01:31:12,116 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 531 in batch 1\n2025-08-01 01:31:12,116 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 532 in batch 1\n2025-08-01 01:31:12,117 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 532 in batch 1\n2025-08-01 01:31:12,117 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 534 in batch 1\n2025-08-01 01:31:12,117 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 534 in batch 1\n2025-08-01 01:31:12,118 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 535 in batch 1\n2025-08-01 01:31:12,118 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 535 in batch 1\n2025-08-01 01:31:12,118 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 536 in batch 1\n2025-08-01 01:31:12,118 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 536 in batch 1\n2025-08-01 01:31:12,118 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 537 in batch 1\n2025-08-01 01:31:12,119 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 537 in batch 1\n2025-08-01 01:31:12,119 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 538 in batch 1\n2025-08-01 01:31:12,119 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 538 in batch 1\n2025-08-01 01:31:12,119 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 539 in batch 1\n2025-08-01 01:31:12,119 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 539 in batch 1\n2025-08-01 01:31:12,120 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 540 in batch 1\n2025-08-01 01:31:12,120 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 540 in batch 1\n2025-08-01 01:31:12,121 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 541 in batch 1\n2025-08-01 01:31:12,121 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 541 in batch 1\n2025-08-01 01:31:12,121 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 542 in batch 1\n2025-08-01 01:31:12,122 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 543 in batch 1\n2025-08-01 01:31:12,122 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 543 in batch 1\n2025-08-01 01:31:12,122 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 544 in batch 1\n2025-08-01 01:31:12,123 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 545 in batch 1\n2025-08-01 01:31:12,123 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 545 in batch 1\n2025-08-01 01:31:12,123 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 546 in batch 1\n2025-08-01 01:31:12,123 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 546 in batch 1\n2025-08-01 01:31:12,126 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 547 in batch 1\n2025-08-01 01:31:12,126 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 547 in batch 1\n2025-08-01 01:31:12,126 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 548 in batch 1\n2025-08-01 01:31:12,126 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 548 in batch 1\n2025-08-01 01:31:12,127 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 549 in batch 1\n2025-08-01 01:31:12,127 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 549 in batch 1\n2025-08-01 01:31:12,127 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 550 in batch 1\n2025-08-01 01:31:12,127 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 550 in batch 1\n2025-08-01 01:31:12,128 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 551 in batch 1\n2025-08-01 01:31:12,128 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 551 in batch 1\n2025-08-01 01:31:12,128 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 552 in batch 1\n2025-08-01 01:31:12,128 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 552 in batch 1\n2025-08-01 01:31:12,128 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 553 in batch 1\n2025-08-01 01:31:12,129 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 553 in batch 1\n2025-08-01 01:31:12,129 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 554 in batch 1\n2025-08-01 01:31:12,129 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 555 in batch 1\n2025-08-01 01:31:12,129 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 556 in batch 1\n2025-08-01 01:31:12,130 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 556 in batch 1\n2025-08-01 01:31:12,130 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 557 in batch 1\n2025-08-01 01:31:12,130 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 557 in batch 1\n2025-08-01 01:31:12,130 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 558 in batch 1\n2025-08-01 01:31:12,130 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 558 in batch 1\n2025-08-01 01:31:12,131 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 559 in batch 1\n2025-08-01 01:31:12,133 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 559 in batch 1\n2025-08-01 01:31:12,133 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 560 in batch 1\n2025-08-01 01:31:12,133 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 560 in batch 1\n2025-08-01 01:31:12,133 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 561 in batch 1\n2025-08-01 01:31:12,134 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 561 in batch 1\n2025-08-01 01:31:12,134 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 562 in batch 1\n2025-08-01 01:31:12,134 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 562 in batch 1\n2025-08-01 01:31:12,134 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 563 in batch 1\n2025-08-01 01:31:12,135 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 563 in batch 1\n2025-08-01 01:31:12,135 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 564 in batch 1\n2025-08-01 01:31:12,135 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 564 in batch 1\n2025-08-01 01:31:12,136 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 565 in batch 1\n2025-08-01 01:31:12,136 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 565 in batch 1\n2025-08-01 01:31:12,136 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 566 in batch 1\n2025-08-01 01:31:12,136 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 566 in batch 1\n2025-08-01 01:31:12,136 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 567 in batch 1\n2025-08-01 01:31:12,137 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 567 in batch 1\n2025-08-01 01:31:12,137 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 568 in batch 1\n2025-08-01 01:31:12,137 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 568 in batch 1\n2025-08-01 01:31:12,137 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 569 in batch 1\n2025-08-01 01:31:12,138 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 569 in batch 1\n2025-08-01 01:31:12,138 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 570 in batch 1\n2025-08-01 01:31:12,138 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 571 in batch 1\n2025-08-01 01:31:12,138 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 571 in batch 1\n2025-08-01 01:31:12,138 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 572 in batch 1\n2025-08-01 01:31:12,139 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 572 in batch 1\n2025-08-01 01:31:12,139 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 573 in batch 1\n2025-08-01 01:31:12,139 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 573 in batch 1\n2025-08-01 01:31:12,139 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 574 in batch 1\n2025-08-01 01:31:12,140 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 574 in batch 1\n2025-08-01 01:31:12,140 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 575 in batch 1\n2025-08-01 01:31:12,140 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 575 in batch 1\n2025-08-01 01:31:12,140 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 576 in batch 1\n2025-08-01 01:31:12,141 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 576 in batch 1\n2025-08-01 01:31:12,141 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 577 in batch 1\n2025-08-01 01:31:12,141 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 577 in batch 1\n2025-08-01 01:31:12,143 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 578 in batch 1\n2025-08-01 01:31:12,143 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 578 in batch 1\n2025-08-01 01:31:12,143 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 579 in batch 1\n2025-08-01 01:31:12,143 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 579 in batch 1\n2025-08-01 01:31:12,144 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 580 in batch 1\n2025-08-01 01:31:12,145 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 580 in batch 1\n2025-08-01 01:31:12,145 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 581 in batch 1\n2025-08-01 01:31:12,145 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 581 in batch 1\n2025-08-01 01:31:12,146 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 582 in batch 1\n2025-08-01 01:31:12,146 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 582 in batch 1\n2025-08-01 01:31:12,146 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 583 in batch 1\n2025-08-01 01:31:12,146 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 583 in batch 1\n2025-08-01 01:31:12,147 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 584 in batch 1\n2025-08-01 01:31:12,147 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 584 in batch 1\n2025-08-01 01:31:12,147 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 585 in batch 1\n2025-08-01 01:31:12,147 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 585 in batch 1\n2025-08-01 01:31:12,147 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 586 in batch 1\n2025-08-01 01:31:12,147 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 586 in batch 1\n2025-08-01 01:31:12,148 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 587 in batch 1\n2025-08-01 01:31:12,148 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 588 in batch 1\n2025-08-01 01:31:12,148 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 588 in batch 1\n2025-08-01 01:31:12,149 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 589 in batch 1\n2025-08-01 01:31:12,149 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 589 in batch 1\n2025-08-01 01:31:12,149 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 590 in batch 1\n2025-08-01 01:31:12,150 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 590 in batch 1\n2025-08-01 01:31:12,150 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 591 in batch 1\n2025-08-01 01:31:12,150 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 591 in batch 1\n2025-08-01 01:31:12,150 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 592 in batch 1\n2025-08-01 01:31:12,150 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 592 in batch 1\n2025-08-01 01:31:12,152 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 593 in batch 1\n2025-08-01 01:31:12,152 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 593 in batch 1\n2025-08-01 01:31:12,152 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 594 in batch 1\n2025-08-01 01:31:12,153 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 594 in batch 1\n2025-08-01 01:31:12,153 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 595 in batch 1\n2025-08-01 01:31:12,155 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 595 in batch 1\n2025-08-01 01:31:12,155 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 596 in batch 1\n2025-08-01 01:31:12,156 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 596 in batch 1\n2025-08-01 01:31:12,156 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 597 in batch 1\n2025-08-01 01:31:12,156 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 597 in batch 1\n2025-08-01 01:31:12,156 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 598 in batch 1\n2025-08-01 01:31:12,157 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 598 in batch 1\n2025-08-01 01:31:12,157 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 599 in batch 1\n2025-08-01 01:31:12,158 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 599 in batch 1\n2025-08-01 01:31:12,158 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 600 in batch 1\n2025-08-01 01:31:12,158 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 600 in batch 1\n2025-08-01 01:31:12,158 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 601 in batch 1\n2025-08-01 01:31:12,158 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 601 in batch 1\n2025-08-01 01:31:12,159 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 602 in batch 1\n2025-08-01 01:31:12,159 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 602 in batch 1\n2025-08-01 01:31:12,159 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 603 in batch 1\n2025-08-01 01:31:12,159 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 603 in batch 1\n2025-08-01 01:31:12,160 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 604 in batch 1\n2025-08-01 01:31:12,160 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 604 in batch 1\n2025-08-01 01:31:12,160 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 605 in batch 1\n2025-08-01 01:31:12,160 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 605 in batch 1\n2025-08-01 01:31:12,161 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 606 in batch 1\n2025-08-01 01:31:12,161 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 606 in batch 1\n2025-08-01 01:31:12,161 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 607 in batch 1\n2025-08-01 01:31:12,161 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 607 in batch 1\n2025-08-01 01:31:12,161 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 608 in batch 1\n2025-08-01 01:31:12,163 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 608 in batch 1\n2025-08-01 01:31:12,163 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 609 in batch 1\n2025-08-01 01:31:12,163 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 609 in batch 1\n2025-08-01 01:31:12,163 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 610 in batch 1\n2025-08-01 01:31:12,164 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 610 in batch 1\n2025-08-01 01:31:12,164 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 611 in batch 1\n2025-08-01 01:31:12,164 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 611 in batch 1\n2025-08-01 01:31:12,165 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 612 in batch 1\n2025-08-01 01:31:12,165 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 612 in batch 1\n2025-08-01 01:31:12,165 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 613 in batch 1\n2025-08-01 01:31:12,165 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 613 in batch 1\n2025-08-01 01:31:12,165 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 614 in batch 1\n2025-08-01 01:31:12,166 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 614 in batch 1\n2025-08-01 01:31:12,166 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 615 in batch 1\n2025-08-01 01:31:12,167 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 615 in batch 1\n2025-08-01 01:31:12,168 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 616 in batch 1\n2025-08-01 01:31:12,169 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 616 in batch 1\n2025-08-01 01:31:12,169 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 617 in batch 1\n2025-08-01 01:31:12,169 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 617 in batch 1\n2025-08-01 01:31:12,169 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 618 in batch 1\n2025-08-01 01:31:12,170 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 618 in batch 1\n2025-08-01 01:31:12,170 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 619 in batch 1\n2025-08-01 01:31:12,171 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 619 in batch 1\n2025-08-01 01:31:12,171 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 620 in batch 1\n2025-08-01 01:31:12,171 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 620 in batch 1\n2025-08-01 01:31:12,171 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 621 in batch 1\n2025-08-01 01:31:12,172 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 621 in batch 1\n2025-08-01 01:31:12,172 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 622 in batch 1\n2025-08-01 01:31:12,172 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 622 in batch 1\n2025-08-01 01:31:12,173 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 623 in batch 1\n2025-08-01 01:31:12,173 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 623 in batch 1\n2025-08-01 01:31:12,173 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 628 in batch 1\n2025-08-01 01:31:12,174 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 628 in batch 1\n2025-08-01 01:31:12,174 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 629 in batch 1\n2025-08-01 01:31:12,174 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 629 in batch 1\n2025-08-01 01:31:12,174 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 630 in batch 1\n2025-08-01 01:31:12,175 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 630 in batch 1\n2025-08-01 01:31:12,175 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 632 in batch 1\n2025-08-01 01:31:12,175 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 632 in batch 1\n2025-08-01 01:31:12,176 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 633 in batch 1\n2025-08-01 01:31:12,176 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 633 in batch 1\n2025-08-01 01:31:12,176 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 634 in batch 1\n2025-08-01 01:31:12,176 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 634 in batch 1\n2025-08-01 01:31:12,177 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 635 in batch 1\n2025-08-01 01:31:12,177 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 635 in batch 1\n2025-08-01 01:31:12,177 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 636 in batch 1\n2025-08-01 01:31:12,177 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 636 in batch 1\n2025-08-01 01:31:12,177 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 637 in batch 1\n2025-08-01 01:31:12,177 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 637 in batch 1\n2025-08-01 01:31:12,178 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 638 in batch 1\n2025-08-01 01:31:12,178 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 638 in batch 1\n2025-08-01 01:31:12,178 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 639 in batch 1\n2025-08-01 01:31:12,179 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 639 in batch 1\n2025-08-01 01:31:12,179 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 640 in batch 1\n2025-08-01 01:31:12,179 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 640 in batch 1\n2025-08-01 01:31:12,180 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 641 in batch 1\n2025-08-01 01:31:12,180 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 641 in batch 1\n2025-08-01 01:31:12,181 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 642 in batch 1\n2025-08-01 01:31:12,181 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 642 in batch 1\n2025-08-01 01:31:12,181 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 643 in batch 1\n2025-08-01 01:31:12,182 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 643 in batch 1\n2025-08-01 01:31:12,182 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 644 in batch 1\n2025-08-01 01:31:12,183 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 645 in batch 1\n2025-08-01 01:31:12,183 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 645 in batch 1\n2025-08-01 01:31:12,183 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 646 in batch 1\n2025-08-01 01:31:12,183 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 646 in batch 1\n2025-08-01 01:31:12,184 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 647 in batch 1\n2025-08-01 01:31:12,184 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 648 in batch 1\n2025-08-01 01:31:12,184 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 649 in batch 1\n2025-08-01 01:31:12,184 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 649 in batch 1\n2025-08-01 01:31:12,185 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 650 in batch 1\n2025-08-01 01:31:12,185 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 650 in batch 1\n2025-08-01 01:31:12,185 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 651 in batch 1\n2025-08-01 01:31:12,186 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 651 in batch 1\n2025-08-01 01:31:12,186 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 652 in batch 1\n2025-08-01 01:31:12,186 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 652 in batch 1\n2025-08-01 01:31:12,186 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 653 in batch 1\n2025-08-01 01:31:12,187 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 653 in batch 1\n2025-08-01 01:31:12,187 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 654 in batch 1\n2025-08-01 01:31:12,188 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 655 in batch 1\n2025-08-01 01:31:12,188 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 655 in batch 1\n2025-08-01 01:31:12,188 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 656 in batch 1\n2025-08-01 01:31:12,188 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 656 in batch 1\n2025-08-01 01:31:12,189 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 657 in batch 1\n2025-08-01 01:31:12,189 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 657 in batch 1\n2025-08-01 01:31:12,189 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 658 in batch 1\n2025-08-01 01:31:12,189 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 658 in batch 1\n2025-08-01 01:31:12,189 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 659 in batch 1\n2025-08-01 01:31:12,190 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 659 in batch 1\n2025-08-01 01:31:12,190 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 660 in batch 1\n2025-08-01 01:31:12,190 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 660 in batch 1\n2025-08-01 01:31:12,190 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 661 in batch 1\n2025-08-01 01:31:12,191 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 661 in batch 1\n2025-08-01 01:31:12,191 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 662 in batch 1\n2025-08-01 01:31:12,191 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 663 in batch 1\n2025-08-01 01:31:12,191 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 664 in batch 1\n2025-08-01 01:31:12,192 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 664 in batch 1\n2025-08-01 01:31:12,192 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 665 in batch 1\n2025-08-01 01:31:12,192 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 665 in batch 1\n2025-08-01 01:31:12,192 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 666 in batch 1\n2025-08-01 01:31:12,193 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 666 in batch 1\n2025-08-01 01:31:12,193 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 667 in batch 1\n2025-08-01 01:31:12,193 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 667 in batch 1\n2025-08-01 01:31:12,193 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 668 in batch 1\n2025-08-01 01:31:12,193 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 668 in batch 1\n2025-08-01 01:31:12,194 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 669 in batch 1\n2025-08-01 01:31:12,194 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 669 in batch 1\n2025-08-01 01:31:12,194 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 670 in batch 1\n2025-08-01 01:31:12,194 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 670 in batch 1\n2025-08-01 01:31:12,194 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 671 in batch 1\n2025-08-01 01:31:12,195 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 671 in batch 1\n2025-08-01 01:31:12,195 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 672 in batch 1\n2025-08-01 01:31:12,195 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 672 in batch 1\n2025-08-01 01:31:12,195 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 673 in batch 1\n2025-08-01 01:31:12,195 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 673 in batch 1\n2025-08-01 01:31:12,196 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 674 in batch 1\n2025-08-01 01:31:12,196 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 674 in batch 1\n2025-08-01 01:31:12,199 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 675 in batch 1\n2025-08-01 01:31:12,199 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 675 in batch 1\n2025-08-01 01:31:12,199 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 676 in batch 1\n2025-08-01 01:31:12,200 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 677 in batch 1\n2025-08-01 01:31:12,200 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 678 in batch 1\n2025-08-01 01:31:12,200 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 679 in batch 1\n2025-08-01 01:31:12,201 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 679 in batch 1\n2025-08-01 01:31:12,201 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 680 in batch 1\n2025-08-01 01:31:12,201 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 680 in batch 1\n2025-08-01 01:31:12,201 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 681 in batch 1\n2025-08-01 01:31:12,202 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 681 in batch 1\n2025-08-01 01:31:12,203 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 682 in batch 1\n2025-08-01 01:31:12,203 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 682 in batch 1\n2025-08-01 01:31:12,203 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 683 in batch 1\n2025-08-01 01:31:12,204 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 683 in batch 1\n2025-08-01 01:31:12,204 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 684 in batch 1\n2025-08-01 01:31:12,204 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 684 in batch 1\n2025-08-01 01:31:12,204 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 685 in batch 1\n2025-08-01 01:31:12,205 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 685 in batch 1\n2025-08-01 01:31:12,205 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 686 in batch 1\n2025-08-01 01:31:12,205 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 686 in batch 1\n2025-08-01 01:31:12,205 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 687 in batch 1\n2025-08-01 01:31:12,206 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 687 in batch 1\n2025-08-01 01:31:12,206 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 688 in batch 1\n2025-08-01 01:31:12,206 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 688 in batch 1\n2025-08-01 01:31:12,206 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 689 in batch 1\n2025-08-01 01:31:12,208 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 689 in batch 1\n2025-08-01 01:31:12,208 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 690 in batch 1\n2025-08-01 01:31:12,209 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 690 in batch 1\n2025-08-01 01:31:12,209 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 691 in batch 1\n2025-08-01 01:31:12,209 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 691 in batch 1\n2025-08-01 01:31:12,209 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 692 in batch 1\n2025-08-01 01:31:12,210 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 692 in batch 1\n2025-08-01 01:31:12,210 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 693 in batch 1\n2025-08-01 01:31:12,210 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 693 in batch 1\n2025-08-01 01:31:12,211 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 694 in batch 1\n2025-08-01 01:31:12,212 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 694 in batch 1\n2025-08-01 01:31:12,212 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 695 in batch 1\n2025-08-01 01:31:12,212 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 695 in batch 1\n2025-08-01 01:31:12,213 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 696 in batch 1\n2025-08-01 01:31:12,213 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 696 in batch 1\n2025-08-01 01:31:12,237 | INFO | pyMut.annotate.actionable_mutation | Sleeping for 1 second before processing next batch\n2025-08-01 01:31:13,239 | INFO | pyMut.annotate.actionable_mutation | Processing batch 2/3 with 697 variants\n2025-08-01 01:31:13,268 | INFO | pyMut.annotate.actionable_mutation | Sending batch 2/3 to OncoKB API\n2025-08-01 01:31:13,268 | INFO | root | API Request URL: https://www.oncokb.org/api/v1/annotate/mutations/byGenomicChange\n2025-08-01 01:31:15,992 | INFO | root | API Response Status Code: 200\n2025-08-01 01:31:16,070 | INFO | pyMut.annotate.actionable_mutation | Batch 2/3 processed successfully\n2025-08-01 01:31:16,070 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 0 in batch 2\n2025-08-01 01:31:16,071 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 0 in batch 2\n2025-08-01 01:31:16,071 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 1 in batch 2\n2025-08-01 01:31:16,072 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 1 in batch 2\n2025-08-01 01:31:16,072 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 2 in batch 2\n2025-08-01 01:31:16,072 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 2 in batch 2\n2025-08-01 01:31:16,073 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 3 in batch 2\n2025-08-01 01:31:16,073 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 3 in batch 2\n2025-08-01 01:31:16,073 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 4 in batch 2\n2025-08-01 01:31:16,074 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 4 in batch 2\n2025-08-01 01:31:16,074 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 5 in batch 2\n2025-08-01 01:31:16,074 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 5 in batch 2\n2025-08-01 01:31:16,074 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 6 in batch 2\n2025-08-01 01:31:16,074 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 6 in batch 2\n2025-08-01 01:31:16,075 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 7 in batch 2\n2025-08-01 01:31:16,075 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 8 in batch 2\n2025-08-01 01:31:16,075 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 8 in batch 2\n2025-08-01 01:31:16,076 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 9 in batch 2\n2025-08-01 01:31:16,076 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 9 in batch 2\n2025-08-01 01:31:16,076 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 10 in batch 2\n2025-08-01 01:31:16,077 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 10 in batch 2\n2025-08-01 01:31:16,077 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 11 in batch 2\n2025-08-01 01:31:16,077 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 11 in batch 2\n2025-08-01 01:31:16,078 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 12 in batch 2\n2025-08-01 01:31:16,078 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 12 in batch 2\n2025-08-01 01:31:16,078 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 15 in batch 2\n2025-08-01 01:31:16,078 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 15 in batch 2\n2025-08-01 01:31:16,079 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 16 in batch 2\n2025-08-01 01:31:16,079 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 16 in batch 2\n2025-08-01 01:31:16,079 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 18 in batch 2\n2025-08-01 01:31:16,080 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 18 in batch 2\n2025-08-01 01:31:16,080 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 19 in batch 2\n2025-08-01 01:31:16,081 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 19 in batch 2\n2025-08-01 01:31:16,081 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 20 in batch 2\n2025-08-01 01:31:16,081 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 20 in batch 2\n2025-08-01 01:31:16,081 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 21 in batch 2\n2025-08-01 01:31:16,082 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 21 in batch 2\n2025-08-01 01:31:16,082 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 22 in batch 2\n2025-08-01 01:31:16,082 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 23 in batch 2\n2025-08-01 01:31:16,083 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 23 in batch 2\n2025-08-01 01:31:16,083 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 24 in batch 2\n2025-08-01 01:31:16,084 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 24 in batch 2\n2025-08-01 01:31:16,084 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 25 in batch 2\n2025-08-01 01:31:16,084 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 25 in batch 2\n2025-08-01 01:31:16,085 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 26 in batch 2\n2025-08-01 01:31:16,085 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 26 in batch 2\n2025-08-01 01:31:16,085 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 27 in batch 2\n2025-08-01 01:31:16,085 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 27 in batch 2\n2025-08-01 01:31:16,085 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 28 in batch 2\n2025-08-01 01:31:16,086 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 28 in batch 2\n2025-08-01 01:31:16,086 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 29 in batch 2\n2025-08-01 01:31:16,086 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 29 in batch 2\n2025-08-01 01:31:16,087 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 30 in batch 2\n2025-08-01 01:31:16,087 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 30 in batch 2\n2025-08-01 01:31:16,087 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 31 in batch 2\n2025-08-01 01:31:16,087 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 31 in batch 2\n2025-08-01 01:31:16,088 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 32 in batch 2\n2025-08-01 01:31:16,088 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 32 in batch 2\n2025-08-01 01:31:16,088 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 33 in batch 2\n2025-08-01 01:31:16,089 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 33 in batch 2\n2025-08-01 01:31:16,089 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 34 in batch 2\n2025-08-01 01:31:16,089 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 34 in batch 2\n2025-08-01 01:31:16,089 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 35 in batch 2\n2025-08-01 01:31:16,090 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 35 in batch 2\n2025-08-01 01:31:16,090 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 36 in batch 2\n2025-08-01 01:31:16,090 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 36 in batch 2\n2025-08-01 01:31:16,090 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 37 in batch 2\n2025-08-01 01:31:16,090 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 37 in batch 2\n2025-08-01 01:31:16,091 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 38 in batch 2\n2025-08-01 01:31:16,091 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 38 in batch 2\n2025-08-01 01:31:16,091 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 39 in batch 2\n2025-08-01 01:31:16,092 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 39 in batch 2\n2025-08-01 01:31:16,092 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 40 in batch 2\n2025-08-01 01:31:16,092 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 40 in batch 2\n2025-08-01 01:31:16,093 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 41 in batch 2\n2025-08-01 01:31:16,093 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 41 in batch 2\n2025-08-01 01:31:16,094 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 42 in batch 2\n2025-08-01 01:31:16,094 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 42 in batch 2\n2025-08-01 01:31:16,094 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 43 in batch 2\n2025-08-01 01:31:16,094 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 43 in batch 2\n2025-08-01 01:31:16,095 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 44 in batch 2\n2025-08-01 01:31:16,095 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 44 in batch 2\n2025-08-01 01:31:16,095 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 45 in batch 2\n2025-08-01 01:31:16,096 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 45 in batch 2\n2025-08-01 01:31:16,096 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 46 in batch 2\n2025-08-01 01:31:16,096 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 46 in batch 2\n2025-08-01 01:31:16,096 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 47 in batch 2\n2025-08-01 01:31:16,096 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 47 in batch 2\n2025-08-01 01:31:16,097 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 48 in batch 2\n2025-08-01 01:31:16,097 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 48 in batch 2\n2025-08-01 01:31:16,097 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 49 in batch 2\n2025-08-01 01:31:16,098 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 49 in batch 2\n2025-08-01 01:31:16,098 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 50 in batch 2\n2025-08-01 01:31:16,099 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 50 in batch 2\n2025-08-01 01:31:16,099 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 51 in batch 2\n2025-08-01 01:31:16,099 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 51 in batch 2\n2025-08-01 01:31:16,100 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 52 in batch 2\n2025-08-01 01:31:16,100 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 52 in batch 2\n2025-08-01 01:31:16,101 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 60 in batch 2\n2025-08-01 01:31:16,101 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 60 in batch 2\n2025-08-01 01:31:16,101 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 61 in batch 2\n2025-08-01 01:31:16,101 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 61 in batch 2\n2025-08-01 01:31:16,102 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 62 in batch 2\n2025-08-01 01:31:16,102 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 62 in batch 2\n2025-08-01 01:31:16,102 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 63 in batch 2\n2025-08-01 01:31:16,102 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 63 in batch 2\n2025-08-01 01:31:16,103 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 64 in batch 2\n2025-08-01 01:31:16,103 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 65 in batch 2\n2025-08-01 01:31:16,103 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 65 in batch 2\n2025-08-01 01:31:16,103 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 66 in batch 2\n2025-08-01 01:31:16,104 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 67 in batch 2\n2025-08-01 01:31:16,104 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 67 in batch 2\n2025-08-01 01:31:16,105 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 68 in batch 2\n2025-08-01 01:31:16,105 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 68 in batch 2\n2025-08-01 01:31:16,105 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 69 in batch 2\n2025-08-01 01:31:16,105 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 69 in batch 2\n2025-08-01 01:31:16,105 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 70 in batch 2\n2025-08-01 01:31:16,106 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 70 in batch 2\n2025-08-01 01:31:16,106 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 71 in batch 2\n2025-08-01 01:31:16,106 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 71 in batch 2\n2025-08-01 01:31:16,107 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 72 in batch 2\n2025-08-01 01:31:16,107 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 72 in batch 2\n2025-08-01 01:31:16,107 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 73 in batch 2\n2025-08-01 01:31:16,108 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 73 in batch 2\n2025-08-01 01:31:16,108 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 74 in batch 2\n2025-08-01 01:31:16,108 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 74 in batch 2\n2025-08-01 01:31:16,108 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 75 in batch 2\n2025-08-01 01:31:16,109 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 75 in batch 2\n2025-08-01 01:31:16,109 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 76 in batch 2\n2025-08-01 01:31:16,110 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 76 in batch 2\n2025-08-01 01:31:16,110 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 77 in batch 2\n2025-08-01 01:31:16,110 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 77 in batch 2\n2025-08-01 01:31:16,110 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 78 in batch 2\n2025-08-01 01:31:16,111 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 78 in batch 2\n2025-08-01 01:31:16,111 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 79 in batch 2\n2025-08-01 01:31:16,111 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 79 in batch 2\n2025-08-01 01:31:16,111 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 80 in batch 2\n2025-08-01 01:31:16,112 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 80 in batch 2\n2025-08-01 01:31:16,112 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 81 in batch 2\n2025-08-01 01:31:16,112 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 81 in batch 2\n2025-08-01 01:31:16,113 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 82 in batch 2\n2025-08-01 01:31:16,113 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 82 in batch 2\n2025-08-01 01:31:16,113 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 83 in batch 2\n2025-08-01 01:31:16,114 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 83 in batch 2\n2025-08-01 01:31:16,114 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 84 in batch 2\n2025-08-01 01:31:16,114 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 84 in batch 2\n2025-08-01 01:31:16,115 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 85 in batch 2\n2025-08-01 01:31:16,115 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 85 in batch 2\n2025-08-01 01:31:16,115 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 86 in batch 2\n2025-08-01 01:31:16,116 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 86 in batch 2\n2025-08-01 01:31:16,116 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 87 in batch 2\n2025-08-01 01:31:16,116 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 87 in batch 2\n2025-08-01 01:31:16,116 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 88 in batch 2\n2025-08-01 01:31:16,117 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 88 in batch 2\n2025-08-01 01:31:16,117 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 89 in batch 2\n2025-08-01 01:31:16,117 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 89 in batch 2\n2025-08-01 01:31:16,118 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 90 in batch 2\n2025-08-01 01:31:16,118 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 90 in batch 2\n2025-08-01 01:31:16,118 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 91 in batch 2\n2025-08-01 01:31:16,119 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 91 in batch 2\n2025-08-01 01:31:16,119 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 92 in batch 2\n2025-08-01 01:31:16,119 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 92 in batch 2\n2025-08-01 01:31:16,119 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 93 in batch 2\n2025-08-01 01:31:16,120 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 93 in batch 2\n2025-08-01 01:31:16,120 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 94 in batch 2\n2025-08-01 01:31:16,120 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 94 in batch 2\n2025-08-01 01:31:16,120 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 95 in batch 2\n2025-08-01 01:31:16,121 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 95 in batch 2\n2025-08-01 01:31:16,121 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 97 in batch 2\n2025-08-01 01:31:16,121 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 97 in batch 2\n2025-08-01 01:31:16,121 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 98 in batch 2\n2025-08-01 01:31:16,122 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 98 in batch 2\n2025-08-01 01:31:16,122 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 99 in batch 2\n2025-08-01 01:31:16,124 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 99 in batch 2\n2025-08-01 01:31:16,124 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 100 in batch 2\n2025-08-01 01:31:16,124 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 100 in batch 2\n2025-08-01 01:31:16,124 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 101 in batch 2\n2025-08-01 01:31:16,125 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 101 in batch 2\n2025-08-01 01:31:16,125 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 102 in batch 2\n2025-08-01 01:31:16,125 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 102 in batch 2\n2025-08-01 01:31:16,125 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 103 in batch 2\n2025-08-01 01:31:16,126 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 103 in batch 2\n2025-08-01 01:31:16,126 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 104 in batch 2\n2025-08-01 01:31:16,126 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 104 in batch 2\n2025-08-01 01:31:16,126 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 105 in batch 2\n2025-08-01 01:31:16,127 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 105 in batch 2\n2025-08-01 01:31:16,127 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 106 in batch 2\n2025-08-01 01:31:16,127 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 106 in batch 2\n2025-08-01 01:31:16,127 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 107 in batch 2\n2025-08-01 01:31:16,128 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 107 in batch 2\n2025-08-01 01:31:16,128 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 108 in batch 2\n2025-08-01 01:31:16,129 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 108 in batch 2\n2025-08-01 01:31:16,129 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 109 in batch 2\n2025-08-01 01:31:16,130 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 109 in batch 2\n2025-08-01 01:31:16,130 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 110 in batch 2\n2025-08-01 01:31:16,130 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 110 in batch 2\n2025-08-01 01:31:16,130 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 111 in batch 2\n2025-08-01 01:31:16,130 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 111 in batch 2\n2025-08-01 01:31:16,131 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 112 in batch 2\n2025-08-01 01:31:16,131 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 112 in batch 2\n2025-08-01 01:31:16,131 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 113 in batch 2\n2025-08-01 01:31:16,132 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 113 in batch 2\n2025-08-01 01:31:16,132 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 114 in batch 2\n2025-08-01 01:31:16,132 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 115 in batch 2\n2025-08-01 01:31:16,133 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 117 in batch 2\n2025-08-01 01:31:16,133 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 118 in batch 2\n2025-08-01 01:31:16,134 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 119 in batch 2\n2025-08-01 01:31:16,134 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 119 in batch 2\n2025-08-01 01:31:16,134 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 120 in batch 2\n2025-08-01 01:31:16,135 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 120 in batch 2\n2025-08-01 01:31:16,135 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 121 in batch 2\n2025-08-01 01:31:16,135 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 121 in batch 2\n2025-08-01 01:31:16,136 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 122 in batch 2\n2025-08-01 01:31:16,136 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 122 in batch 2\n2025-08-01 01:31:16,136 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 123 in batch 2\n2025-08-01 01:31:16,136 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 123 in batch 2\n2025-08-01 01:31:16,137 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 124 in batch 2\n2025-08-01 01:31:16,137 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 124 in batch 2\n2025-08-01 01:31:16,137 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 125 in batch 2\n2025-08-01 01:31:16,137 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 125 in batch 2\n2025-08-01 01:31:16,138 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 126 in batch 2\n2025-08-01 01:31:16,138 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 126 in batch 2\n2025-08-01 01:31:16,139 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 127 in batch 2\n2025-08-01 01:31:16,139 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 127 in batch 2\n2025-08-01 01:31:16,139 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 128 in batch 2\n2025-08-01 01:31:16,140 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 128 in batch 2\n2025-08-01 01:31:16,140 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 129 in batch 2\n2025-08-01 01:31:16,140 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 129 in batch 2\n2025-08-01 01:31:16,141 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 130 in batch 2\n2025-08-01 01:31:16,141 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 130 in batch 2\n2025-08-01 01:31:16,141 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 131 in batch 2\n2025-08-01 01:31:16,141 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 131 in batch 2\n2025-08-01 01:31:16,142 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 133 in batch 2\n2025-08-01 01:31:16,142 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 133 in batch 2\n2025-08-01 01:31:16,142 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 134 in batch 2\n2025-08-01 01:31:16,143 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 134 in batch 2\n2025-08-01 01:31:16,144 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 135 in batch 2\n2025-08-01 01:31:16,144 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 135 in batch 2\n2025-08-01 01:31:16,145 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 136 in batch 2\n2025-08-01 01:31:16,145 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 136 in batch 2\n2025-08-01 01:31:16,145 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 137 in batch 2\n2025-08-01 01:31:16,145 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 137 in batch 2\n2025-08-01 01:31:16,146 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 138 in batch 2\n2025-08-01 01:31:16,146 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 138 in batch 2\n2025-08-01 01:31:16,146 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 139 in batch 2\n2025-08-01 01:31:16,147 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 139 in batch 2\n2025-08-01 01:31:16,147 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 140 in batch 2\n2025-08-01 01:31:16,148 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 140 in batch 2\n2025-08-01 01:31:16,148 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 141 in batch 2\n2025-08-01 01:31:16,148 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 141 in batch 2\n2025-08-01 01:31:16,149 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 142 in batch 2\n2025-08-01 01:31:16,149 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 142 in batch 2\n2025-08-01 01:31:16,149 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 143 in batch 2\n2025-08-01 01:31:16,149 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 143 in batch 2\n2025-08-01 01:31:16,150 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 144 in batch 2\n2025-08-01 01:31:16,150 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 144 in batch 2\n2025-08-01 01:31:16,150 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 145 in batch 2\n2025-08-01 01:31:16,151 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 145 in batch 2\n2025-08-01 01:31:16,152 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 146 in batch 2\n2025-08-01 01:31:16,152 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 146 in batch 2\n2025-08-01 01:31:16,152 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 147 in batch 2\n2025-08-01 01:31:16,152 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 147 in batch 2\n2025-08-01 01:31:16,153 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 148 in batch 2\n2025-08-01 01:31:16,153 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 148 in batch 2\n2025-08-01 01:31:16,153 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 149 in batch 2\n2025-08-01 01:31:16,154 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 149 in batch 2\n2025-08-01 01:31:16,154 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 150 in batch 2\n2025-08-01 01:31:16,154 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 150 in batch 2\n2025-08-01 01:31:16,154 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 151 in batch 2\n2025-08-01 01:31:16,154 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 151 in batch 2\n2025-08-01 01:31:16,155 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 152 in batch 2\n2025-08-01 01:31:16,155 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 152 in batch 2\n2025-08-01 01:31:16,155 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 153 in batch 2\n2025-08-01 01:31:16,155 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 153 in batch 2\n2025-08-01 01:31:16,156 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 154 in batch 2\n2025-08-01 01:31:16,156 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 154 in batch 2\n2025-08-01 01:31:16,156 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 155 in batch 2\n2025-08-01 01:31:16,157 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 155 in batch 2\n2025-08-01 01:31:16,157 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 156 in batch 2\n2025-08-01 01:31:16,157 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 156 in batch 2\n2025-08-01 01:31:16,158 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 157 in batch 2\n2025-08-01 01:31:16,158 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 157 in batch 2\n2025-08-01 01:31:16,158 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 158 in batch 2\n2025-08-01 01:31:16,158 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 158 in batch 2\n2025-08-01 01:31:16,159 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 159 in batch 2\n2025-08-01 01:31:16,159 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 159 in batch 2\n2025-08-01 01:31:16,159 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 160 in batch 2\n2025-08-01 01:31:16,159 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 160 in batch 2\n2025-08-01 01:31:16,160 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 161 in batch 2\n2025-08-01 01:31:16,161 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 161 in batch 2\n2025-08-01 01:31:16,161 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 162 in batch 2\n2025-08-01 01:31:16,161 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 162 in batch 2\n2025-08-01 01:31:16,161 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 163 in batch 2\n2025-08-01 01:31:16,162 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 163 in batch 2\n2025-08-01 01:31:16,162 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 164 in batch 2\n2025-08-01 01:31:16,163 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 164 in batch 2\n2025-08-01 01:31:16,163 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 165 in batch 2\n2025-08-01 01:31:16,163 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 165 in batch 2\n2025-08-01 01:31:16,163 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 166 in batch 2\n2025-08-01 01:31:16,164 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 166 in batch 2\n2025-08-01 01:31:16,164 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 167 in batch 2\n2025-08-01 01:31:16,164 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 167 in batch 2\n2025-08-01 01:31:16,165 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 168 in batch 2\n2025-08-01 01:31:16,165 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 168 in batch 2\n2025-08-01 01:31:16,165 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 169 in batch 2\n2025-08-01 01:31:16,166 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 169 in batch 2\n2025-08-01 01:31:16,166 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 170 in batch 2\n2025-08-01 01:31:16,166 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 170 in batch 2\n2025-08-01 01:31:16,167 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 171 in batch 2\n2025-08-01 01:31:16,167 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 171 in batch 2\n2025-08-01 01:31:16,168 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 172 in batch 2\n2025-08-01 01:31:16,168 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 172 in batch 2\n2025-08-01 01:31:16,168 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 173 in batch 2\n2025-08-01 01:31:16,168 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 173 in batch 2\n2025-08-01 01:31:16,168 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 174 in batch 2\n2025-08-01 01:31:16,169 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 174 in batch 2\n2025-08-01 01:31:16,170 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 175 in batch 2\n2025-08-01 01:31:16,170 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 175 in batch 2\n2025-08-01 01:31:16,170 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 176 in batch 2\n2025-08-01 01:31:16,170 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 177 in batch 2\n2025-08-01 01:31:16,171 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 177 in batch 2\n2025-08-01 01:31:16,172 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 178 in batch 2\n2025-08-01 01:31:16,172 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 178 in batch 2\n2025-08-01 01:31:16,172 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 179 in batch 2\n2025-08-01 01:31:16,173 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 179 in batch 2\n2025-08-01 01:31:16,173 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 180 in batch 2\n2025-08-01 01:31:16,173 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 181 in batch 2\n2025-08-01 01:31:16,173 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 181 in batch 2\n2025-08-01 01:31:16,173 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 182 in batch 2\n2025-08-01 01:31:16,174 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 182 in batch 2\n2025-08-01 01:31:16,174 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 183 in batch 2\n2025-08-01 01:31:16,174 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 184 in batch 2\n2025-08-01 01:31:16,175 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 184 in batch 2\n2025-08-01 01:31:16,175 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 185 in batch 2\n2025-08-01 01:31:16,175 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 185 in batch 2\n2025-08-01 01:31:16,175 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 186 in batch 2\n2025-08-01 01:31:16,176 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 186 in batch 2\n2025-08-01 01:31:16,176 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 187 in batch 2\n2025-08-01 01:31:16,177 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 188 in batch 2\n2025-08-01 01:31:16,177 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 188 in batch 2\n2025-08-01 01:31:16,177 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 189 in batch 2\n2025-08-01 01:31:16,178 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 189 in batch 2\n2025-08-01 01:31:16,178 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 190 in batch 2\n2025-08-01 01:31:16,178 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 190 in batch 2\n2025-08-01 01:31:16,178 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 191 in batch 2\n2025-08-01 01:31:16,179 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 191 in batch 2\n2025-08-01 01:31:16,179 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 192 in batch 2\n2025-08-01 01:31:16,179 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 192 in batch 2\n2025-08-01 01:31:16,179 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 193 in batch 2\n2025-08-01 01:31:16,180 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 193 in batch 2\n2025-08-01 01:31:16,180 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 194 in batch 2\n2025-08-01 01:31:16,180 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 194 in batch 2\n2025-08-01 01:31:16,181 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 195 in batch 2\n2025-08-01 01:31:16,181 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 195 in batch 2\n2025-08-01 01:31:16,181 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 196 in batch 2\n2025-08-01 01:31:16,181 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 196 in batch 2\n2025-08-01 01:31:16,182 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 197 in batch 2\n2025-08-01 01:31:16,182 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 197 in batch 2\n2025-08-01 01:31:16,182 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 198 in batch 2\n2025-08-01 01:31:16,182 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 198 in batch 2\n2025-08-01 01:31:16,183 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 199 in batch 2\n2025-08-01 01:31:16,183 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 199 in batch 2\n2025-08-01 01:31:16,183 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 200 in batch 2\n2025-08-01 01:31:16,184 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 200 in batch 2\n2025-08-01 01:31:16,184 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 201 in batch 2\n2025-08-01 01:31:16,184 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 202 in batch 2\n2025-08-01 01:31:16,184 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 202 in batch 2\n2025-08-01 01:31:16,185 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 203 in batch 2\n2025-08-01 01:31:16,185 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 203 in batch 2\n2025-08-01 01:31:16,186 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 204 in batch 2\n2025-08-01 01:31:16,186 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 204 in batch 2\n2025-08-01 01:31:16,186 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 205 in batch 2\n2025-08-01 01:31:16,186 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 205 in batch 2\n2025-08-01 01:31:16,187 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 206 in batch 2\n2025-08-01 01:31:16,188 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 206 in batch 2\n2025-08-01 01:31:16,188 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 207 in batch 2\n2025-08-01 01:31:16,188 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 207 in batch 2\n2025-08-01 01:31:16,189 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 208 in batch 2\n2025-08-01 01:31:16,189 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 208 in batch 2\n2025-08-01 01:31:16,189 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 209 in batch 2\n2025-08-01 01:31:16,190 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 209 in batch 2\n2025-08-01 01:31:16,190 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 210 in batch 2\n2025-08-01 01:31:16,190 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 210 in batch 2\n2025-08-01 01:31:16,191 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 211 in batch 2\n2025-08-01 01:31:16,191 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 211 in batch 2\n2025-08-01 01:31:16,191 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 212 in batch 2\n2025-08-01 01:31:16,192 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 212 in batch 2\n2025-08-01 01:31:16,192 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 214 in batch 2\n2025-08-01 01:31:16,192 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 214 in batch 2\n2025-08-01 01:31:16,193 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 215 in batch 2\n2025-08-01 01:31:16,193 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 215 in batch 2\n2025-08-01 01:31:16,193 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 216 in batch 2\n2025-08-01 01:31:16,194 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 216 in batch 2\n2025-08-01 01:31:16,194 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 217 in batch 2\n2025-08-01 01:31:16,194 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 217 in batch 2\n2025-08-01 01:31:16,195 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 218 in batch 2\n2025-08-01 01:31:16,195 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 219 in batch 2\n2025-08-01 01:31:16,195 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 219 in batch 2\n2025-08-01 01:31:16,195 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 220 in batch 2\n2025-08-01 01:31:16,196 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 220 in batch 2\n2025-08-01 01:31:16,196 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 221 in batch 2\n2025-08-01 01:31:16,196 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 221 in batch 2\n2025-08-01 01:31:16,197 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 222 in batch 2\n2025-08-01 01:31:16,197 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 223 in batch 2\n2025-08-01 01:31:16,197 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 223 in batch 2\n2025-08-01 01:31:16,198 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 224 in batch 2\n2025-08-01 01:31:16,198 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 224 in batch 2\n2025-08-01 01:31:16,198 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 225 in batch 2\n2025-08-01 01:31:16,198 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 225 in batch 2\n2025-08-01 01:31:16,199 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 226 in batch 2\n2025-08-01 01:31:16,199 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 226 in batch 2\n2025-08-01 01:31:16,199 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 227 in batch 2\n2025-08-01 01:31:16,199 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 227 in batch 2\n2025-08-01 01:31:16,199 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 228 in batch 2\n2025-08-01 01:31:16,200 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 228 in batch 2\n2025-08-01 01:31:16,200 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 229 in batch 2\n2025-08-01 01:31:16,200 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 229 in batch 2\n2025-08-01 01:31:16,200 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 230 in batch 2\n2025-08-01 01:31:16,201 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 230 in batch 2\n2025-08-01 01:31:16,201 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 231 in batch 2\n2025-08-01 01:31:16,201 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 231 in batch 2\n2025-08-01 01:31:16,201 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 232 in batch 2\n2025-08-01 01:31:16,201 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 232 in batch 2\n2025-08-01 01:31:16,202 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 233 in batch 2\n2025-08-01 01:31:16,202 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 233 in batch 2\n2025-08-01 01:31:16,202 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 234 in batch 2\n2025-08-01 01:31:16,202 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 234 in batch 2\n2025-08-01 01:31:16,203 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 235 in batch 2\n2025-08-01 01:31:16,203 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 236 in batch 2\n2025-08-01 01:31:16,203 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 236 in batch 2\n2025-08-01 01:31:16,204 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 237 in batch 2\n2025-08-01 01:31:16,206 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 237 in batch 2\n2025-08-01 01:31:16,206 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 238 in batch 2\n2025-08-01 01:31:16,207 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 238 in batch 2\n2025-08-01 01:31:16,207 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 239 in batch 2\n2025-08-01 01:31:16,207 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 239 in batch 2\n2025-08-01 01:31:16,207 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 240 in batch 2\n2025-08-01 01:31:16,208 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 240 in batch 2\n2025-08-01 01:31:16,208 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 241 in batch 2\n2025-08-01 01:31:16,209 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 241 in batch 2\n2025-08-01 01:31:16,209 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 242 in batch 2\n2025-08-01 01:31:16,209 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 242 in batch 2\n2025-08-01 01:31:16,210 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 243 in batch 2\n2025-08-01 01:31:16,210 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 243 in batch 2\n2025-08-01 01:31:16,211 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 244 in batch 2\n2025-08-01 01:31:16,212 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 245 in batch 2\n2025-08-01 01:31:16,212 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 245 in batch 2\n2025-08-01 01:31:16,212 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 246 in batch 2\n2025-08-01 01:31:16,213 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 246 in batch 2\n2025-08-01 01:31:16,213 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 247 in batch 2\n2025-08-01 01:31:16,213 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 247 in batch 2\n2025-08-01 01:31:16,213 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 248 in batch 2\n2025-08-01 01:31:16,214 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 248 in batch 2\n2025-08-01 01:31:16,214 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 249 in batch 2\n2025-08-01 01:31:16,214 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 249 in batch 2\n2025-08-01 01:31:16,214 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 250 in batch 2\n2025-08-01 01:31:16,214 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 250 in batch 2\n2025-08-01 01:31:16,215 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 251 in batch 2\n2025-08-01 01:31:16,215 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 251 in batch 2\n2025-08-01 01:31:16,215 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 252 in batch 2\n2025-08-01 01:31:16,215 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 252 in batch 2\n2025-08-01 01:31:16,216 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 253 in batch 2\n2025-08-01 01:31:16,216 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 253 in batch 2\n2025-08-01 01:31:16,217 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 254 in batch 2\n2025-08-01 01:31:16,217 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 254 in batch 2\n2025-08-01 01:31:16,217 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 255 in batch 2\n2025-08-01 01:31:16,218 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 255 in batch 2\n2025-08-01 01:31:16,218 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 256 in batch 2\n2025-08-01 01:31:16,218 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 256 in batch 2\n2025-08-01 01:31:16,219 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 257 in batch 2\n2025-08-01 01:31:16,219 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 257 in batch 2\n2025-08-01 01:31:16,219 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 258 in batch 2\n2025-08-01 01:31:16,219 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 258 in batch 2\n2025-08-01 01:31:16,220 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 259 in batch 2\n2025-08-01 01:31:16,220 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 259 in batch 2\n2025-08-01 01:31:16,220 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 260 in batch 2\n2025-08-01 01:31:16,221 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 260 in batch 2\n2025-08-01 01:31:16,221 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 261 in batch 2\n2025-08-01 01:31:16,221 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 261 in batch 2\n2025-08-01 01:31:16,221 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 262 in batch 2\n2025-08-01 01:31:16,222 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 262 in batch 2\n2025-08-01 01:31:16,222 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 264 in batch 2\n2025-08-01 01:31:16,222 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 264 in batch 2\n2025-08-01 01:31:16,222 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 265 in batch 2\n2025-08-01 01:31:16,222 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 265 in batch 2\n2025-08-01 01:31:16,223 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 266 in batch 2\n2025-08-01 01:31:16,223 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 266 in batch 2\n2025-08-01 01:31:16,223 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 267 in batch 2\n2025-08-01 01:31:16,223 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 267 in batch 2\n2025-08-01 01:31:16,224 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 268 in batch 2\n2025-08-01 01:31:16,224 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 268 in batch 2\n2025-08-01 01:31:16,224 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 269 in batch 2\n2025-08-01 01:31:16,224 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 269 in batch 2\n2025-08-01 01:31:16,225 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 270 in batch 2\n2025-08-01 01:31:16,225 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 270 in batch 2\n2025-08-01 01:31:16,225 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 271 in batch 2\n2025-08-01 01:31:16,225 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 271 in batch 2\n2025-08-01 01:31:16,226 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 272 in batch 2\n2025-08-01 01:31:16,226 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 272 in batch 2\n2025-08-01 01:31:16,226 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 273 in batch 2\n2025-08-01 01:31:16,226 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 273 in batch 2\n2025-08-01 01:31:16,226 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 274 in batch 2\n2025-08-01 01:31:16,227 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 274 in batch 2\n2025-08-01 01:31:16,227 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 275 in batch 2\n2025-08-01 01:31:16,227 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 275 in batch 2\n2025-08-01 01:31:16,228 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 276 in batch 2\n2025-08-01 01:31:16,228 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 276 in batch 2\n2025-08-01 01:31:16,228 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 277 in batch 2\n2025-08-01 01:31:16,228 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 277 in batch 2\n2025-08-01 01:31:16,231 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 278 in batch 2\n2025-08-01 01:31:16,231 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 278 in batch 2\n2025-08-01 01:31:16,231 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 279 in batch 2\n2025-08-01 01:31:16,232 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 279 in batch 2\n2025-08-01 01:31:16,232 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 280 in batch 2\n2025-08-01 01:31:16,233 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 280 in batch 2\n2025-08-01 01:31:16,233 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 281 in batch 2\n2025-08-01 01:31:16,233 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 281 in batch 2\n2025-08-01 01:31:16,234 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 282 in batch 2\n2025-08-01 01:31:16,234 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 282 in batch 2\n2025-08-01 01:31:16,235 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 283 in batch 2\n2025-08-01 01:31:16,235 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 283 in batch 2\n2025-08-01 01:31:16,235 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 284 in batch 2\n2025-08-01 01:31:16,236 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 284 in batch 2\n2025-08-01 01:31:16,236 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 285 in batch 2\n2025-08-01 01:31:16,237 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 285 in batch 2\n2025-08-01 01:31:16,237 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 286 in batch 2\n2025-08-01 01:31:16,237 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 286 in batch 2\n2025-08-01 01:31:16,237 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 287 in batch 2\n2025-08-01 01:31:16,238 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 287 in batch 2\n2025-08-01 01:31:16,238 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 288 in batch 2\n2025-08-01 01:31:16,239 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 288 in batch 2\n2025-08-01 01:31:16,239 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 289 in batch 2\n2025-08-01 01:31:16,239 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 289 in batch 2\n2025-08-01 01:31:16,240 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 290 in batch 2\n2025-08-01 01:31:16,240 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 290 in batch 2\n2025-08-01 01:31:16,240 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 291 in batch 2\n2025-08-01 01:31:16,240 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 291 in batch 2\n2025-08-01 01:31:16,241 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 292 in batch 2\n2025-08-01 01:31:16,241 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 292 in batch 2\n2025-08-01 01:31:16,241 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 293 in batch 2\n2025-08-01 01:31:16,241 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 293 in batch 2\n2025-08-01 01:31:16,241 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 294 in batch 2\n2025-08-01 01:31:16,242 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 294 in batch 2\n2025-08-01 01:31:16,242 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 295 in batch 2\n2025-08-01 01:31:16,242 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 295 in batch 2\n2025-08-01 01:31:16,243 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 296 in batch 2\n2025-08-01 01:31:16,243 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 296 in batch 2\n2025-08-01 01:31:16,243 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 297 in batch 2\n2025-08-01 01:31:16,243 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 297 in batch 2\n2025-08-01 01:31:16,244 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 298 in batch 2\n2025-08-01 01:31:16,244 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 298 in batch 2\n2025-08-01 01:31:16,244 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 299 in batch 2\n2025-08-01 01:31:16,244 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 299 in batch 2\n2025-08-01 01:31:16,245 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 300 in batch 2\n2025-08-01 01:31:16,245 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 300 in batch 2\n2025-08-01 01:31:16,245 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 301 in batch 2\n2025-08-01 01:31:16,245 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 301 in batch 2\n2025-08-01 01:31:16,246 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 302 in batch 2\n2025-08-01 01:31:16,246 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 302 in batch 2\n2025-08-01 01:31:16,246 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 303 in batch 2\n2025-08-01 01:31:16,246 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 303 in batch 2\n2025-08-01 01:31:16,247 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 304 in batch 2\n2025-08-01 01:31:16,247 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 304 in batch 2\n2025-08-01 01:31:16,249 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 305 in batch 2\n2025-08-01 01:31:16,250 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 305 in batch 2\n2025-08-01 01:31:16,250 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 306 in batch 2\n2025-08-01 01:31:16,250 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 306 in batch 2\n2025-08-01 01:31:16,251 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 307 in batch 2\n2025-08-01 01:31:16,251 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 307 in batch 2\n2025-08-01 01:31:16,251 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 308 in batch 2\n2025-08-01 01:31:16,252 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 308 in batch 2\n2025-08-01 01:31:16,252 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 309 in batch 2\n2025-08-01 01:31:16,253 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 309 in batch 2\n2025-08-01 01:31:16,253 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 310 in batch 2\n2025-08-01 01:31:16,253 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 310 in batch 2\n2025-08-01 01:31:16,253 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 311 in batch 2\n2025-08-01 01:31:16,254 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 312 in batch 2\n2025-08-01 01:31:16,254 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 313 in batch 2\n2025-08-01 01:31:16,254 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 313 in batch 2\n2025-08-01 01:31:16,254 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 314 in batch 2\n2025-08-01 01:31:16,255 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 315 in batch 2\n2025-08-01 01:31:16,255 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 315 in batch 2\n2025-08-01 01:31:16,256 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 316 in batch 2\n2025-08-01 01:31:16,256 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 316 in batch 2\n2025-08-01 01:31:16,256 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 320 in batch 2\n2025-08-01 01:31:16,257 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 320 in batch 2\n2025-08-01 01:31:16,257 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 321 in batch 2\n2025-08-01 01:31:16,258 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 321 in batch 2\n2025-08-01 01:31:16,258 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 322 in batch 2\n2025-08-01 01:31:16,259 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 322 in batch 2\n2025-08-01 01:31:16,259 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 323 in batch 2\n2025-08-01 01:31:16,259 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 323 in batch 2\n2025-08-01 01:31:16,259 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 324 in batch 2\n2025-08-01 01:31:16,260 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 324 in batch 2\n2025-08-01 01:31:16,260 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 325 in batch 2\n2025-08-01 01:31:16,260 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 325 in batch 2\n2025-08-01 01:31:16,260 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 326 in batch 2\n2025-08-01 01:31:16,261 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 326 in batch 2\n2025-08-01 01:31:16,261 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 327 in batch 2\n2025-08-01 01:31:16,262 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 327 in batch 2\n2025-08-01 01:31:16,262 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 328 in batch 2\n2025-08-01 01:31:16,262 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 328 in batch 2\n2025-08-01 01:31:16,262 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 329 in batch 2\n2025-08-01 01:31:16,263 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 329 in batch 2\n2025-08-01 01:31:16,263 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 330 in batch 2\n2025-08-01 01:31:16,264 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 330 in batch 2\n2025-08-01 01:31:16,264 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 331 in batch 2\n2025-08-01 01:31:16,264 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 332 in batch 2\n2025-08-01 01:31:16,265 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 332 in batch 2\n2025-08-01 01:31:16,265 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 333 in batch 2\n2025-08-01 01:31:16,265 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 333 in batch 2\n2025-08-01 01:31:16,265 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 334 in batch 2\n2025-08-01 01:31:16,265 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 334 in batch 2\n2025-08-01 01:31:16,266 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 335 in batch 2\n2025-08-01 01:31:16,266 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 335 in batch 2\n2025-08-01 01:31:16,266 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 336 in batch 2\n2025-08-01 01:31:16,266 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 336 in batch 2\n2025-08-01 01:31:16,267 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 337 in batch 2\n2025-08-01 01:31:16,267 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 337 in batch 2\n2025-08-01 01:31:16,268 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 338 in batch 2\n2025-08-01 01:31:16,268 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 338 in batch 2\n2025-08-01 01:31:16,269 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 339 in batch 2\n2025-08-01 01:31:16,269 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 339 in batch 2\n2025-08-01 01:31:16,269 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 340 in batch 2\n2025-08-01 01:31:16,270 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 340 in batch 2\n2025-08-01 01:31:16,270 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 341 in batch 2\n2025-08-01 01:31:16,270 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 341 in batch 2\n2025-08-01 01:31:16,271 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 342 in batch 2\n2025-08-01 01:31:16,271 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 342 in batch 2\n2025-08-01 01:31:16,271 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 343 in batch 2\n2025-08-01 01:31:16,271 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 343 in batch 2\n2025-08-01 01:31:16,272 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 344 in batch 2\n2025-08-01 01:31:16,272 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 344 in batch 2\n2025-08-01 01:31:16,273 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 345 in batch 2\n2025-08-01 01:31:16,273 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 346 in batch 2\n2025-08-01 01:31:16,273 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 346 in batch 2\n2025-08-01 01:31:16,274 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 347 in batch 2\n2025-08-01 01:31:16,274 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 347 in batch 2\n2025-08-01 01:31:16,274 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 348 in batch 2\n2025-08-01 01:31:16,275 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 348 in batch 2\n2025-08-01 01:31:16,275 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 349 in batch 2\n2025-08-01 01:31:16,275 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 349 in batch 2\n2025-08-01 01:31:16,276 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 350 in batch 2\n2025-08-01 01:31:16,276 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 350 in batch 2\n2025-08-01 01:31:16,276 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 351 in batch 2\n2025-08-01 01:31:16,276 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 351 in batch 2\n2025-08-01 01:31:16,277 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 352 in batch 2\n2025-08-01 01:31:16,277 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 352 in batch 2\n2025-08-01 01:31:16,278 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 353 in batch 2\n2025-08-01 01:31:16,278 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 353 in batch 2\n2025-08-01 01:31:16,278 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 354 in batch 2\n2025-08-01 01:31:16,279 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 354 in batch 2\n2025-08-01 01:31:16,279 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 355 in batch 2\n2025-08-01 01:31:16,279 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 355 in batch 2\n2025-08-01 01:31:16,279 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 356 in batch 2\n2025-08-01 01:31:16,280 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 356 in batch 2\n2025-08-01 01:31:16,280 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 357 in batch 2\n2025-08-01 01:31:16,281 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 357 in batch 2\n2025-08-01 01:31:16,281 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 358 in batch 2\n2025-08-01 01:31:16,281 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 358 in batch 2\n2025-08-01 01:31:16,282 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 359 in batch 2\n2025-08-01 01:31:16,282 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 359 in batch 2\n2025-08-01 01:31:16,282 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 360 in batch 2\n2025-08-01 01:31:16,283 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 360 in batch 2\n2025-08-01 01:31:16,283 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 361 in batch 2\n2025-08-01 01:31:16,283 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 362 in batch 2\n2025-08-01 01:31:16,284 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 362 in batch 2\n2025-08-01 01:31:16,284 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 363 in batch 2\n2025-08-01 01:31:16,284 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 363 in batch 2\n2025-08-01 01:31:16,285 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 364 in batch 2\n2025-08-01 01:31:16,285 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 364 in batch 2\n2025-08-01 01:31:16,285 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 365 in batch 2\n2025-08-01 01:31:16,285 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 365 in batch 2\n2025-08-01 01:31:16,286 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 366 in batch 2\n2025-08-01 01:31:16,286 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 366 in batch 2\n2025-08-01 01:31:16,287 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 367 in batch 2\n2025-08-01 01:31:16,287 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 368 in batch 2\n2025-08-01 01:31:16,287 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 368 in batch 2\n2025-08-01 01:31:16,288 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 369 in batch 2\n2025-08-01 01:31:16,289 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 369 in batch 2\n2025-08-01 01:31:16,289 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 370 in batch 2\n2025-08-01 01:31:16,290 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 370 in batch 2\n2025-08-01 01:31:16,290 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 371 in batch 2\n2025-08-01 01:31:16,290 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 371 in batch 2\n2025-08-01 01:31:16,291 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 372 in batch 2\n2025-08-01 01:31:16,291 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 372 in batch 2\n2025-08-01 01:31:16,291 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 373 in batch 2\n2025-08-01 01:31:16,292 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 373 in batch 2\n2025-08-01 01:31:16,292 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 374 in batch 2\n2025-08-01 01:31:16,292 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 374 in batch 2\n2025-08-01 01:31:16,293 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 375 in batch 2\n2025-08-01 01:31:16,293 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 375 in batch 2\n2025-08-01 01:31:16,294 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 376 in batch 2\n2025-08-01 01:31:16,294 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 377 in batch 2\n2025-08-01 01:31:16,294 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 377 in batch 2\n2025-08-01 01:31:16,294 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 378 in batch 2\n2025-08-01 01:31:16,295 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 378 in batch 2\n2025-08-01 01:31:16,295 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 379 in batch 2\n2025-08-01 01:31:16,295 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 379 in batch 2\n2025-08-01 01:31:16,296 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 380 in batch 2\n2025-08-01 01:31:16,296 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 380 in batch 2\n2025-08-01 01:31:16,296 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 381 in batch 2\n2025-08-01 01:31:16,297 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 382 in batch 2\n2025-08-01 01:31:16,297 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 382 in batch 2\n2025-08-01 01:31:16,297 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 383 in batch 2\n2025-08-01 01:31:16,297 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 383 in batch 2\n2025-08-01 01:31:16,297 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 384 in batch 2\n2025-08-01 01:31:16,298 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 384 in batch 2\n2025-08-01 01:31:16,298 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 385 in batch 2\n2025-08-01 01:31:16,298 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 385 in batch 2\n2025-08-01 01:31:16,299 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 386 in batch 2\n2025-08-01 01:31:16,299 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 386 in batch 2\n2025-08-01 01:31:16,299 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 387 in batch 2\n2025-08-01 01:31:16,299 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 387 in batch 2\n2025-08-01 01:31:16,299 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 388 in batch 2\n2025-08-01 01:31:16,300 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 388 in batch 2\n2025-08-01 01:31:16,300 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 389 in batch 2\n2025-08-01 01:31:16,300 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 389 in batch 2\n2025-08-01 01:31:16,300 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 390 in batch 2\n2025-08-01 01:31:16,301 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 390 in batch 2\n2025-08-01 01:31:16,301 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 391 in batch 2\n2025-08-01 01:31:16,301 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 391 in batch 2\n2025-08-01 01:31:16,301 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 392 in batch 2\n2025-08-01 01:31:16,301 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 392 in batch 2\n2025-08-01 01:31:16,302 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 393 in batch 2\n2025-08-01 01:31:16,302 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 393 in batch 2\n2025-08-01 01:31:16,302 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 394 in batch 2\n2025-08-01 01:31:16,302 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 394 in batch 2\n2025-08-01 01:31:16,303 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 395 in batch 2\n2025-08-01 01:31:16,303 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 395 in batch 2\n2025-08-01 01:31:16,306 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 396 in batch 2\n2025-08-01 01:31:16,306 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 396 in batch 2\n2025-08-01 01:31:16,306 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 397 in batch 2\n2025-08-01 01:31:16,307 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 397 in batch 2\n2025-08-01 01:31:16,307 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 398 in batch 2\n2025-08-01 01:31:16,307 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 398 in batch 2\n2025-08-01 01:31:16,308 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 399 in batch 2\n2025-08-01 01:31:16,308 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 399 in batch 2\n2025-08-01 01:31:16,308 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 400 in batch 2\n2025-08-01 01:31:16,308 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 400 in batch 2\n2025-08-01 01:31:16,308 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 401 in batch 2\n2025-08-01 01:31:16,309 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 401 in batch 2\n2025-08-01 01:31:16,309 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 402 in batch 2\n2025-08-01 01:31:16,310 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 402 in batch 2\n2025-08-01 01:31:16,310 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 403 in batch 2\n2025-08-01 01:31:16,310 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 403 in batch 2\n2025-08-01 01:31:16,311 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 404 in batch 2\n2025-08-01 01:31:16,311 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 404 in batch 2\n2025-08-01 01:31:16,311 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 405 in batch 2\n2025-08-01 01:31:16,311 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 405 in batch 2\n2025-08-01 01:31:16,312 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 406 in batch 2\n2025-08-01 01:31:16,312 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 406 in batch 2\n2025-08-01 01:31:16,312 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 407 in batch 2\n2025-08-01 01:31:16,312 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 407 in batch 2\n2025-08-01 01:31:16,312 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 408 in batch 2\n2025-08-01 01:31:16,313 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 408 in batch 2\n2025-08-01 01:31:16,313 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 409 in batch 2\n2025-08-01 01:31:16,313 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 409 in batch 2\n2025-08-01 01:31:16,313 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 410 in batch 2\n2025-08-01 01:31:16,314 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 410 in batch 2\n2025-08-01 01:31:16,314 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 411 in batch 2\n2025-08-01 01:31:16,314 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 411 in batch 2\n2025-08-01 01:31:16,314 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 412 in batch 2\n2025-08-01 01:31:16,315 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 412 in batch 2\n2025-08-01 01:31:16,315 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 413 in batch 2\n2025-08-01 01:31:16,315 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 413 in batch 2\n2025-08-01 01:31:16,315 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 414 in batch 2\n2025-08-01 01:31:16,316 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 414 in batch 2\n2025-08-01 01:31:16,316 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 415 in batch 2\n2025-08-01 01:31:16,319 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 415 in batch 2\n2025-08-01 01:31:16,319 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 416 in batch 2\n2025-08-01 01:31:16,320 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 416 in batch 2\n2025-08-01 01:31:16,320 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 417 in batch 2\n2025-08-01 01:31:16,320 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 417 in batch 2\n2025-08-01 01:31:16,320 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 418 in batch 2\n2025-08-01 01:31:16,321 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 418 in batch 2\n2025-08-01 01:31:16,321 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 419 in batch 2\n2025-08-01 01:31:16,321 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 419 in batch 2\n2025-08-01 01:31:16,321 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 420 in batch 2\n2025-08-01 01:31:16,322 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 420 in batch 2\n2025-08-01 01:31:16,322 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 421 in batch 2\n2025-08-01 01:31:16,322 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 421 in batch 2\n2025-08-01 01:31:16,323 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 422 in batch 2\n2025-08-01 01:31:16,323 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 422 in batch 2\n2025-08-01 01:31:16,323 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 423 in batch 2\n2025-08-01 01:31:16,325 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 423 in batch 2\n2025-08-01 01:31:16,325 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 424 in batch 2\n2025-08-01 01:31:16,326 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 424 in batch 2\n2025-08-01 01:31:16,326 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 425 in batch 2\n2025-08-01 01:31:16,326 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 425 in batch 2\n2025-08-01 01:31:16,326 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 426 in batch 2\n2025-08-01 01:31:16,327 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 426 in batch 2\n2025-08-01 01:31:16,327 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 427 in batch 2\n2025-08-01 01:31:16,328 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 427 in batch 2\n2025-08-01 01:31:16,328 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 428 in batch 2\n2025-08-01 01:31:16,328 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 428 in batch 2\n2025-08-01 01:31:16,328 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 429 in batch 2\n2025-08-01 01:31:16,329 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 429 in batch 2\n2025-08-01 01:31:16,329 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 430 in batch 2\n2025-08-01 01:31:16,329 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 430 in batch 2\n2025-08-01 01:31:16,329 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 431 in batch 2\n2025-08-01 01:31:16,330 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 431 in batch 2\n2025-08-01 01:31:16,330 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 432 in batch 2\n2025-08-01 01:31:16,330 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 432 in batch 2\n2025-08-01 01:31:16,331 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 433 in batch 2\n2025-08-01 01:31:16,331 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 434 in batch 2\n2025-08-01 01:31:16,331 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 434 in batch 2\n2025-08-01 01:31:16,331 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 435 in batch 2\n2025-08-01 01:31:16,332 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 435 in batch 2\n2025-08-01 01:31:16,332 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 436 in batch 2\n2025-08-01 01:31:16,332 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 436 in batch 2\n2025-08-01 01:31:16,332 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 437 in batch 2\n2025-08-01 01:31:16,333 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 437 in batch 2\n2025-08-01 01:31:16,333 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 438 in batch 2\n2025-08-01 01:31:16,333 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 438 in batch 2\n2025-08-01 01:31:16,333 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 439 in batch 2\n2025-08-01 01:31:16,333 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 439 in batch 2\n2025-08-01 01:31:16,334 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 442 in batch 2\n2025-08-01 01:31:16,334 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 442 in batch 2\n2025-08-01 01:31:16,334 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 443 in batch 2\n2025-08-01 01:31:16,334 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 443 in batch 2\n2025-08-01 01:31:16,334 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 444 in batch 2\n2025-08-01 01:31:16,335 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 444 in batch 2\n2025-08-01 01:31:16,336 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 445 in batch 2\n2025-08-01 01:31:16,336 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 445 in batch 2\n2025-08-01 01:31:16,336 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 446 in batch 2\n2025-08-01 01:31:16,336 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 446 in batch 2\n2025-08-01 01:31:16,337 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 447 in batch 2\n2025-08-01 01:31:16,337 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 447 in batch 2\n2025-08-01 01:31:16,338 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 448 in batch 2\n2025-08-01 01:31:16,338 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 448 in batch 2\n2025-08-01 01:31:16,338 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 449 in batch 2\n2025-08-01 01:31:16,339 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 449 in batch 2\n2025-08-01 01:31:16,339 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 450 in batch 2\n2025-08-01 01:31:16,339 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 451 in batch 2\n2025-08-01 01:31:16,339 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 451 in batch 2\n2025-08-01 01:31:16,340 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 452 in batch 2\n2025-08-01 01:31:16,340 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 453 in batch 2\n2025-08-01 01:31:16,340 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 453 in batch 2\n2025-08-01 01:31:16,340 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 454 in batch 2\n2025-08-01 01:31:16,341 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 454 in batch 2\n2025-08-01 01:31:16,341 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 455 in batch 2\n2025-08-01 01:31:16,341 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 455 in batch 2\n2025-08-01 01:31:16,341 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 456 in batch 2\n2025-08-01 01:31:16,343 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 456 in batch 2\n2025-08-01 01:31:16,343 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 457 in batch 2\n2025-08-01 01:31:16,343 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 457 in batch 2\n2025-08-01 01:31:16,344 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 458 in batch 2\n2025-08-01 01:31:16,344 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 458 in batch 2\n2025-08-01 01:31:16,345 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 459 in batch 2\n2025-08-01 01:31:16,345 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 459 in batch 2\n2025-08-01 01:31:16,345 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 460 in batch 2\n2025-08-01 01:31:16,345 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 460 in batch 2\n2025-08-01 01:31:16,345 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 461 in batch 2\n2025-08-01 01:31:16,346 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 461 in batch 2\n2025-08-01 01:31:16,346 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 462 in batch 2\n2025-08-01 01:31:16,346 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 462 in batch 2\n2025-08-01 01:31:16,346 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 463 in batch 2\n2025-08-01 01:31:16,347 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 463 in batch 2\n2025-08-01 01:31:16,347 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 464 in batch 2\n2025-08-01 01:31:16,347 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 464 in batch 2\n2025-08-01 01:31:16,347 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 465 in batch 2\n2025-08-01 01:31:16,347 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 465 in batch 2\n2025-08-01 01:31:16,348 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 466 in batch 2\n2025-08-01 01:31:16,348 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 467 in batch 2\n2025-08-01 01:31:16,348 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 467 in batch 2\n2025-08-01 01:31:16,349 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 468 in batch 2\n2025-08-01 01:31:16,349 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 468 in batch 2\n2025-08-01 01:31:16,349 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 469 in batch 2\n2025-08-01 01:31:16,349 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 469 in batch 2\n2025-08-01 01:31:16,351 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 470 in batch 2\n2025-08-01 01:31:16,351 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 470 in batch 2\n2025-08-01 01:31:16,351 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 471 in batch 2\n2025-08-01 01:31:16,352 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 471 in batch 2\n2025-08-01 01:31:16,352 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 472 in batch 2\n2025-08-01 01:31:16,352 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 473 in batch 2\n2025-08-01 01:31:16,352 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 473 in batch 2\n2025-08-01 01:31:16,353 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 474 in batch 2\n2025-08-01 01:31:16,353 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 474 in batch 2\n2025-08-01 01:31:16,353 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 475 in batch 2\n2025-08-01 01:31:16,354 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 475 in batch 2\n2025-08-01 01:31:16,354 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 476 in batch 2\n2025-08-01 01:31:16,355 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 476 in batch 2\n2025-08-01 01:31:16,355 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 477 in batch 2\n2025-08-01 01:31:16,356 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 477 in batch 2\n2025-08-01 01:31:16,356 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 478 in batch 2\n2025-08-01 01:31:16,356 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 478 in batch 2\n2025-08-01 01:31:16,356 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 479 in batch 2\n2025-08-01 01:31:16,356 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 479 in batch 2\n2025-08-01 01:31:16,357 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 480 in batch 2\n2025-08-01 01:31:16,357 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 480 in batch 2\n2025-08-01 01:31:16,358 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 481 in batch 2\n2025-08-01 01:31:16,358 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 481 in batch 2\n2025-08-01 01:31:16,358 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 482 in batch 2\n2025-08-01 01:31:16,358 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 482 in batch 2\n2025-08-01 01:31:16,359 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 483 in batch 2\n2025-08-01 01:31:16,359 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 483 in batch 2\n2025-08-01 01:31:16,359 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 484 in batch 2\n2025-08-01 01:31:16,359 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 484 in batch 2\n2025-08-01 01:31:16,359 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 485 in batch 2\n2025-08-01 01:31:16,360 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 485 in batch 2\n2025-08-01 01:31:16,360 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 486 in batch 2\n2025-08-01 01:31:16,360 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 486 in batch 2\n2025-08-01 01:31:16,360 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 487 in batch 2\n2025-08-01 01:31:16,360 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 487 in batch 2\n2025-08-01 01:31:16,361 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 488 in batch 2\n2025-08-01 01:31:16,361 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 488 in batch 2\n2025-08-01 01:31:16,361 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 489 in batch 2\n2025-08-01 01:31:16,362 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 489 in batch 2\n2025-08-01 01:31:16,362 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 490 in batch 2\n2025-08-01 01:31:16,362 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 490 in batch 2\n2025-08-01 01:31:16,362 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 491 in batch 2\n2025-08-01 01:31:16,363 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 491 in batch 2\n2025-08-01 01:31:16,363 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 492 in batch 2\n2025-08-01 01:31:16,363 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 492 in batch 2\n2025-08-01 01:31:16,363 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 493 in batch 2\n2025-08-01 01:31:16,363 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 493 in batch 2\n2025-08-01 01:31:16,364 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 494 in batch 2\n2025-08-01 01:31:16,364 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 494 in batch 2\n2025-08-01 01:31:16,364 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 495 in batch 2\n2025-08-01 01:31:16,364 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 495 in batch 2\n2025-08-01 01:31:16,365 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 496 in batch 2\n2025-08-01 01:31:16,365 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 496 in batch 2\n2025-08-01 01:31:16,366 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 497 in batch 2\n2025-08-01 01:31:16,367 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 497 in batch 2\n2025-08-01 01:31:16,367 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 498 in batch 2\n2025-08-01 01:31:16,367 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 498 in batch 2\n2025-08-01 01:31:16,367 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 499 in batch 2\n2025-08-01 01:31:16,368 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 499 in batch 2\n2025-08-01 01:31:16,368 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 500 in batch 2\n2025-08-01 01:31:16,368 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 500 in batch 2\n2025-08-01 01:31:16,368 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 501 in batch 2\n2025-08-01 01:31:16,368 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 501 in batch 2\n2025-08-01 01:31:16,369 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 502 in batch 2\n2025-08-01 01:31:16,369 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 502 in batch 2\n2025-08-01 01:31:16,369 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 503 in batch 2\n2025-08-01 01:31:16,369 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 503 in batch 2\n2025-08-01 01:31:16,370 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 504 in batch 2\n2025-08-01 01:31:16,370 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 504 in batch 2\n2025-08-01 01:31:16,370 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 505 in batch 2\n2025-08-01 01:31:16,370 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 506 in batch 2\n2025-08-01 01:31:16,371 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 507 in batch 2\n2025-08-01 01:31:16,371 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 508 in batch 2\n2025-08-01 01:31:16,371 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 508 in batch 2\n2025-08-01 01:31:16,372 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 509 in batch 2\n2025-08-01 01:31:16,372 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 509 in batch 2\n2025-08-01 01:31:16,372 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 510 in batch 2\n2025-08-01 01:31:16,372 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 510 in batch 2\n2025-08-01 01:31:16,373 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 511 in batch 2\n2025-08-01 01:31:16,374 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 511 in batch 2\n2025-08-01 01:31:16,374 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 512 in batch 2\n2025-08-01 01:31:16,374 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 512 in batch 2\n2025-08-01 01:31:16,374 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 513 in batch 2\n2025-08-01 01:31:16,375 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 513 in batch 2\n2025-08-01 01:31:16,375 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 514 in batch 2\n2025-08-01 01:31:16,375 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 514 in batch 2\n2025-08-01 01:31:16,375 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 515 in batch 2\n2025-08-01 01:31:16,377 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 515 in batch 2\n2025-08-01 01:31:16,377 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 516 in batch 2\n2025-08-01 01:31:16,377 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 516 in batch 2\n2025-08-01 01:31:16,377 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 517 in batch 2\n2025-08-01 01:31:16,378 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 517 in batch 2\n2025-08-01 01:31:16,378 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 518 in batch 2\n2025-08-01 01:31:16,378 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 518 in batch 2\n2025-08-01 01:31:16,378 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 519 in batch 2\n2025-08-01 01:31:16,379 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 519 in batch 2\n2025-08-01 01:31:16,379 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 520 in batch 2\n2025-08-01 01:31:16,379 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 534 in batch 2\n2025-08-01 01:31:16,379 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 534 in batch 2\n2025-08-01 01:31:16,380 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 535 in batch 2\n2025-08-01 01:31:16,380 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 535 in batch 2\n2025-08-01 01:31:16,380 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 536 in batch 2\n2025-08-01 01:31:16,380 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 536 in batch 2\n2025-08-01 01:31:16,381 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 537 in batch 2\n2025-08-01 01:31:16,381 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 537 in batch 2\n2025-08-01 01:31:16,381 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 538 in batch 2\n2025-08-01 01:31:16,381 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 538 in batch 2\n2025-08-01 01:31:16,381 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 539 in batch 2\n2025-08-01 01:31:16,382 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 539 in batch 2\n2025-08-01 01:31:16,382 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 542 in batch 2\n2025-08-01 01:31:16,384 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 542 in batch 2\n2025-08-01 01:31:16,384 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 543 in batch 2\n2025-08-01 01:31:16,384 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 543 in batch 2\n2025-08-01 01:31:16,384 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 544 in batch 2\n2025-08-01 01:31:16,385 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 544 in batch 2\n2025-08-01 01:31:16,385 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 545 in batch 2\n2025-08-01 01:31:16,385 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 545 in batch 2\n2025-08-01 01:31:16,385 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 546 in batch 2\n2025-08-01 01:31:16,386 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 547 in batch 2\n2025-08-01 01:31:16,386 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 547 in batch 2\n2025-08-01 01:31:16,386 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 548 in batch 2\n2025-08-01 01:31:16,386 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 548 in batch 2\n2025-08-01 01:31:16,386 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 549 in batch 2\n2025-08-01 01:31:16,387 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 549 in batch 2\n2025-08-01 01:31:16,387 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 550 in batch 2\n2025-08-01 01:31:16,387 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 550 in batch 2\n2025-08-01 01:31:16,387 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 551 in batch 2\n2025-08-01 01:31:16,388 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 551 in batch 2\n2025-08-01 01:31:16,388 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 552 in batch 2\n2025-08-01 01:31:16,389 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 552 in batch 2\n2025-08-01 01:31:16,389 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 553 in batch 2\n2025-08-01 01:31:16,390 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 553 in batch 2\n2025-08-01 01:31:16,390 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 554 in batch 2\n2025-08-01 01:31:16,390 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 554 in batch 2\n2025-08-01 01:31:16,390 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 555 in batch 2\n2025-08-01 01:31:16,391 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 555 in batch 2\n2025-08-01 01:31:16,391 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 556 in batch 2\n2025-08-01 01:31:16,391 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 556 in batch 2\n2025-08-01 01:31:16,391 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 557 in batch 2\n2025-08-01 01:31:16,392 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 557 in batch 2\n2025-08-01 01:31:16,392 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 558 in batch 2\n2025-08-01 01:31:16,392 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 558 in batch 2\n2025-08-01 01:31:16,392 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 559 in batch 2\n2025-08-01 01:31:16,392 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 559 in batch 2\n2025-08-01 01:31:16,393 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 560 in batch 2\n2025-08-01 01:31:16,393 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 560 in batch 2\n2025-08-01 01:31:16,393 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 561 in batch 2\n2025-08-01 01:31:16,393 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 561 in batch 2\n2025-08-01 01:31:16,394 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 562 in batch 2\n2025-08-01 01:31:16,394 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 562 in batch 2\n2025-08-01 01:31:16,395 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 563 in batch 2\n2025-08-01 01:31:16,395 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 563 in batch 2\n2025-08-01 01:31:16,396 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 564 in batch 2\n2025-08-01 01:31:16,396 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 564 in batch 2\n2025-08-01 01:31:16,396 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 565 in batch 2\n2025-08-01 01:31:16,397 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 565 in batch 2\n2025-08-01 01:31:16,397 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 566 in batch 2\n2025-08-01 01:31:16,397 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 567 in batch 2\n2025-08-01 01:31:16,398 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 567 in batch 2\n2025-08-01 01:31:16,398 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 568 in batch 2\n2025-08-01 01:31:16,398 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 568 in batch 2\n2025-08-01 01:31:16,398 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 569 in batch 2\n2025-08-01 01:31:16,399 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 569 in batch 2\n2025-08-01 01:31:16,399 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 570 in batch 2\n2025-08-01 01:31:16,399 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 570 in batch 2\n2025-08-01 01:31:16,400 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 571 in batch 2\n2025-08-01 01:31:16,400 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 571 in batch 2\n2025-08-01 01:31:16,401 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 572 in batch 2\n2025-08-01 01:31:16,401 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 572 in batch 2\n2025-08-01 01:31:16,401 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 573 in batch 2\n2025-08-01 01:31:16,402 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 573 in batch 2\n2025-08-01 01:31:16,402 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 574 in batch 2\n2025-08-01 01:31:16,402 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 574 in batch 2\n2025-08-01 01:31:16,402 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 575 in batch 2\n2025-08-01 01:31:16,403 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 575 in batch 2\n2025-08-01 01:31:16,403 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 576 in batch 2\n2025-08-01 01:31:16,403 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 576 in batch 2\n2025-08-01 01:31:16,404 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 577 in batch 2\n2025-08-01 01:31:16,405 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 577 in batch 2\n2025-08-01 01:31:16,406 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 578 in batch 2\n2025-08-01 01:31:16,406 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 578 in batch 2\n2025-08-01 01:31:16,406 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 579 in batch 2\n2025-08-01 01:31:16,407 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 579 in batch 2\n2025-08-01 01:31:16,407 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 580 in batch 2\n2025-08-01 01:31:16,407 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 580 in batch 2\n2025-08-01 01:31:16,407 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 581 in batch 2\n2025-08-01 01:31:16,408 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 581 in batch 2\n2025-08-01 01:31:16,409 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 582 in batch 2\n2025-08-01 01:31:16,409 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 582 in batch 2\n2025-08-01 01:31:16,409 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 583 in batch 2\n2025-08-01 01:31:16,410 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 583 in batch 2\n2025-08-01 01:31:16,410 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 589 in batch 2\n2025-08-01 01:31:16,410 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 589 in batch 2\n2025-08-01 01:31:16,411 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 591 in batch 2\n2025-08-01 01:31:16,411 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 591 in batch 2\n2025-08-01 01:31:16,411 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 592 in batch 2\n2025-08-01 01:31:16,412 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 592 in batch 2\n2025-08-01 01:31:16,412 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 593 in batch 2\n2025-08-01 01:31:16,412 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 593 in batch 2\n2025-08-01 01:31:16,413 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 594 in batch 2\n2025-08-01 01:31:16,413 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 594 in batch 2\n2025-08-01 01:31:16,413 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 595 in batch 2\n2025-08-01 01:31:16,413 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 595 in batch 2\n2025-08-01 01:31:16,414 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 596 in batch 2\n2025-08-01 01:31:16,414 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 596 in batch 2\n2025-08-01 01:31:16,414 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 597 in batch 2\n2025-08-01 01:31:16,414 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 597 in batch 2\n2025-08-01 01:31:16,415 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 598 in batch 2\n2025-08-01 01:31:16,415 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 598 in batch 2\n2025-08-01 01:31:16,415 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 599 in batch 2\n2025-08-01 01:31:16,415 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 599 in batch 2\n2025-08-01 01:31:16,416 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 600 in batch 2\n2025-08-01 01:31:16,416 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 600 in batch 2\n2025-08-01 01:31:16,416 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 601 in batch 2\n2025-08-01 01:31:16,416 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 601 in batch 2\n2025-08-01 01:31:16,417 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 602 in batch 2\n2025-08-01 01:31:16,417 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 602 in batch 2\n2025-08-01 01:31:16,417 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 603 in batch 2\n2025-08-01 01:31:16,417 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 604 in batch 2\n2025-08-01 01:31:16,418 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 604 in batch 2\n2025-08-01 01:31:16,420 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 605 in batch 2\n2025-08-01 01:31:16,421 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 605 in batch 2\n2025-08-01 01:31:16,421 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 606 in batch 2\n2025-08-01 01:31:16,421 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 606 in batch 2\n2025-08-01 01:31:16,422 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 607 in batch 2\n2025-08-01 01:31:16,422 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 607 in batch 2\n2025-08-01 01:31:16,422 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 608 in batch 2\n2025-08-01 01:31:16,422 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 608 in batch 2\n2025-08-01 01:31:16,423 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 609 in batch 2\n2025-08-01 01:31:16,424 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 609 in batch 2\n2025-08-01 01:31:16,424 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 610 in batch 2\n2025-08-01 01:31:16,424 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 610 in batch 2\n2025-08-01 01:31:16,424 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 611 in batch 2\n2025-08-01 01:31:16,424 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 611 in batch 2\n2025-08-01 01:31:16,425 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 612 in batch 2\n2025-08-01 01:31:16,425 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 612 in batch 2\n2025-08-01 01:31:16,425 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 613 in batch 2\n2025-08-01 01:31:16,425 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 613 in batch 2\n2025-08-01 01:31:16,426 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 614 in batch 2\n2025-08-01 01:31:16,426 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 614 in batch 2\n2025-08-01 01:31:16,427 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 615 in batch 2\n2025-08-01 01:31:16,427 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 615 in batch 2\n2025-08-01 01:31:16,427 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 616 in batch 2\n2025-08-01 01:31:16,427 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 616 in batch 2\n2025-08-01 01:31:16,428 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 617 in batch 2\n2025-08-01 01:31:16,428 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 618 in batch 2\n2025-08-01 01:31:16,428 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 618 in batch 2\n2025-08-01 01:31:16,429 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 619 in batch 2\n2025-08-01 01:31:16,429 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 619 in batch 2\n2025-08-01 01:31:16,429 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 620 in batch 2\n2025-08-01 01:31:16,429 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 620 in batch 2\n2025-08-01 01:31:16,429 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 621 in batch 2\n2025-08-01 01:31:16,430 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 621 in batch 2\n2025-08-01 01:31:16,430 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 622 in batch 2\n2025-08-01 01:31:16,430 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 622 in batch 2\n2025-08-01 01:31:16,431 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 623 in batch 2\n2025-08-01 01:31:16,431 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 624 in batch 2\n2025-08-01 01:31:16,431 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 624 in batch 2\n2025-08-01 01:31:16,431 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 625 in batch 2\n2025-08-01 01:31:16,432 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 625 in batch 2\n2025-08-01 01:31:16,432 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 626 in batch 2\n2025-08-01 01:31:16,432 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 626 in batch 2\n2025-08-01 01:31:16,432 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 627 in batch 2\n2025-08-01 01:31:16,432 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 627 in batch 2\n2025-08-01 01:31:16,433 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 628 in batch 2\n2025-08-01 01:31:16,433 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 628 in batch 2\n2025-08-01 01:31:16,433 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 629 in batch 2\n2025-08-01 01:31:16,433 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 629 in batch 2\n2025-08-01 01:31:16,433 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 630 in batch 2\n2025-08-01 01:31:16,434 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 631 in batch 2\n2025-08-01 01:31:16,434 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 631 in batch 2\n2025-08-01 01:31:16,434 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 632 in batch 2\n2025-08-01 01:31:16,434 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 632 in batch 2\n2025-08-01 01:31:16,435 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 633 in batch 2\n2025-08-01 01:31:16,435 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 633 in batch 2\n2025-08-01 01:31:16,436 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 634 in batch 2\n2025-08-01 01:31:16,436 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 634 in batch 2\n2025-08-01 01:31:16,436 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 635 in batch 2\n2025-08-01 01:31:16,436 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 635 in batch 2\n2025-08-01 01:31:16,437 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 636 in batch 2\n2025-08-01 01:31:16,437 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 636 in batch 2\n2025-08-01 01:31:16,437 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 637 in batch 2\n2025-08-01 01:31:16,438 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 637 in batch 2\n2025-08-01 01:31:16,438 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 638 in batch 2\n2025-08-01 01:31:16,438 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 638 in batch 2\n2025-08-01 01:31:16,438 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 639 in batch 2\n2025-08-01 01:31:16,439 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 639 in batch 2\n2025-08-01 01:31:16,439 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 640 in batch 2\n2025-08-01 01:31:16,439 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 640 in batch 2\n2025-08-01 01:31:16,439 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 641 in batch 2\n2025-08-01 01:31:16,439 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 641 in batch 2\n2025-08-01 01:31:16,440 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 642 in batch 2\n2025-08-01 01:31:16,440 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 642 in batch 2\n2025-08-01 01:31:16,440 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 643 in batch 2\n2025-08-01 01:31:16,442 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 643 in batch 2\n2025-08-01 01:31:16,442 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 644 in batch 2\n2025-08-01 01:31:16,442 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 644 in batch 2\n2025-08-01 01:31:16,443 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 645 in batch 2\n2025-08-01 01:31:16,443 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 645 in batch 2\n2025-08-01 01:31:16,443 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 646 in batch 2\n2025-08-01 01:31:16,443 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 647 in batch 2\n2025-08-01 01:31:16,444 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 648 in batch 2\n2025-08-01 01:31:16,444 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 648 in batch 2\n2025-08-01 01:31:16,444 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 649 in batch 2\n2025-08-01 01:31:16,445 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 649 in batch 2\n2025-08-01 01:31:16,445 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 650 in batch 2\n2025-08-01 01:31:16,445 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 650 in batch 2\n2025-08-01 01:31:16,445 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 651 in batch 2\n2025-08-01 01:31:16,445 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 651 in batch 2\n2025-08-01 01:31:16,446 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 652 in batch 2\n2025-08-01 01:31:16,446 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 652 in batch 2\n2025-08-01 01:31:16,446 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 653 in batch 2\n2025-08-01 01:31:16,446 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 653 in batch 2\n2025-08-01 01:31:16,446 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 654 in batch 2\n2025-08-01 01:31:16,447 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 654 in batch 2\n2025-08-01 01:31:16,447 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 655 in batch 2\n2025-08-01 01:31:16,447 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 655 in batch 2\n2025-08-01 01:31:16,448 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 656 in batch 2\n2025-08-01 01:31:16,448 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 656 in batch 2\n2025-08-01 01:31:16,448 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 657 in batch 2\n2025-08-01 01:31:16,448 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 657 in batch 2\n2025-08-01 01:31:16,448 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 658 in batch 2\n2025-08-01 01:31:16,449 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 658 in batch 2\n2025-08-01 01:31:16,449 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 659 in batch 2\n2025-08-01 01:31:16,449 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 659 in batch 2\n2025-08-01 01:31:16,450 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 660 in batch 2\n2025-08-01 01:31:16,450 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 660 in batch 2\n2025-08-01 01:31:16,450 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 661 in batch 2\n2025-08-01 01:31:16,450 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 661 in batch 2\n2025-08-01 01:31:16,451 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 662 in batch 2\n2025-08-01 01:31:16,451 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 662 in batch 2\n2025-08-01 01:31:16,451 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 668 in batch 2\n2025-08-01 01:31:16,451 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 677 in batch 2\n2025-08-01 01:31:16,452 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 678 in batch 2\n2025-08-01 01:31:16,452 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 683 in batch 2\n2025-08-01 01:31:16,452 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 685 in batch 2\n2025-08-01 01:31:16,452 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 689 in batch 2\n2025-08-01 01:31:16,476 | INFO | pyMut.annotate.actionable_mutation | Sleeping for 1 second before processing next batch\n2025-08-01 01:31:17,478 | INFO | pyMut.annotate.actionable_mutation | Processing batch 3/3 with 697 variants\n2025-08-01 01:31:17,508 | INFO | pyMut.annotate.actionable_mutation | Sending batch 3/3 to OncoKB API\n2025-08-01 01:31:17,508 | INFO | root | API Request URL: https://www.oncokb.org/api/v1/annotate/mutations/byGenomicChange\n2025-08-01 01:31:18,556 | INFO | root | API Response Status Code: 200\n2025-08-01 01:31:18,566 | INFO | pyMut.annotate.actionable_mutation | Batch 3/3 processed successfully\n2025-08-01 01:31:18,566 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 3 in batch 3\n2025-08-01 01:31:18,567 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 4 in batch 3\n2025-08-01 01:31:18,568 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 5 in batch 3\n2025-08-01 01:31:18,568 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 6 in batch 3\n2025-08-01 01:31:18,568 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 6 in batch 3\n2025-08-01 01:31:18,568 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 7 in batch 3\n2025-08-01 01:31:18,569 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 7 in batch 3\n2025-08-01 01:31:18,569 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 8 in batch 3\n2025-08-01 01:31:18,569 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 9 in batch 3\n2025-08-01 01:31:18,569 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 9 in batch 3\n2025-08-01 01:31:18,570 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 10 in batch 3\n2025-08-01 01:31:18,570 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 10 in batch 3\n2025-08-01 01:31:18,570 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 11 in batch 3\n2025-08-01 01:31:18,570 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 11 in batch 3\n2025-08-01 01:31:18,571 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 12 in batch 3\n2025-08-01 01:31:18,571 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 12 in batch 3\n2025-08-01 01:31:18,571 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 13 in batch 3\n2025-08-01 01:31:18,571 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 13 in batch 3\n2025-08-01 01:31:18,572 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 14 in batch 3\n2025-08-01 01:31:18,572 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 14 in batch 3\n2025-08-01 01:31:18,573 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 15 in batch 3\n2025-08-01 01:31:18,573 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 15 in batch 3\n2025-08-01 01:31:18,573 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 16 in batch 3\n2025-08-01 01:31:18,573 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 16 in batch 3\n2025-08-01 01:31:18,574 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 17 in batch 3\n2025-08-01 01:31:18,574 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 17 in batch 3\n2025-08-01 01:31:18,574 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 18 in batch 3\n2025-08-01 01:31:18,574 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 18 in batch 3\n2025-08-01 01:31:18,575 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 19 in batch 3\n2025-08-01 01:31:18,575 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 19 in batch 3\n2025-08-01 01:31:18,575 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 20 in batch 3\n2025-08-01 01:31:18,576 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 21 in batch 3\n2025-08-01 01:31:18,576 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 23 in batch 3\n2025-08-01 01:31:18,576 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 23 in batch 3\n2025-08-01 01:31:18,576 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 24 in batch 3\n2025-08-01 01:31:18,576 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 24 in batch 3\n2025-08-01 01:31:18,577 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 25 in batch 3\n2025-08-01 01:31:18,577 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 25 in batch 3\n2025-08-01 01:31:18,577 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 26 in batch 3\n2025-08-01 01:31:18,577 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 26 in batch 3\n2025-08-01 01:31:18,578 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 27 in batch 3\n2025-08-01 01:31:18,578 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 27 in batch 3\n2025-08-01 01:31:18,578 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 28 in batch 3\n2025-08-01 01:31:18,578 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 28 in batch 3\n2025-08-01 01:31:18,578 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 29 in batch 3\n2025-08-01 01:31:18,579 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 29 in batch 3\n2025-08-01 01:31:18,579 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 30 in batch 3\n2025-08-01 01:31:18,579 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 30 in batch 3\n2025-08-01 01:31:18,579 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 31 in batch 3\n2025-08-01 01:31:18,580 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 31 in batch 3\n2025-08-01 01:31:18,580 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 32 in batch 3\n2025-08-01 01:31:18,580 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 32 in batch 3\n2025-08-01 01:31:18,581 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 33 in batch 3\n2025-08-01 01:31:18,581 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 33 in batch 3\n2025-08-01 01:31:18,584 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 34 in batch 3\n2025-08-01 01:31:18,584 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 35 in batch 3\n2025-08-01 01:31:18,584 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 36 in batch 3\n2025-08-01 01:31:18,584 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 36 in batch 3\n2025-08-01 01:31:18,585 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 37 in batch 3\n2025-08-01 01:31:18,585 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 38 in batch 3\n2025-08-01 01:31:18,586 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 39 in batch 3\n2025-08-01 01:31:18,586 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 39 in batch 3\n2025-08-01 01:31:18,586 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 40 in batch 3\n2025-08-01 01:31:18,587 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 40 in batch 3\n2025-08-01 01:31:18,587 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 41 in batch 3\n2025-08-01 01:31:18,588 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 41 in batch 3\n2025-08-01 01:31:18,588 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 42 in batch 3\n2025-08-01 01:31:18,588 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 42 in batch 3\n2025-08-01 01:31:18,588 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 43 in batch 3\n2025-08-01 01:31:18,589 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 43 in batch 3\n2025-08-01 01:31:18,589 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 44 in batch 3\n2025-08-01 01:31:18,589 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 46 in batch 3\n2025-08-01 01:31:18,590 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 46 in batch 3\n2025-08-01 01:31:18,590 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 47 in batch 3\n2025-08-01 01:31:18,590 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 47 in batch 3\n2025-08-01 01:31:18,591 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 48 in batch 3\n2025-08-01 01:31:18,591 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 48 in batch 3\n2025-08-01 01:31:18,591 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 49 in batch 3\n2025-08-01 01:31:18,592 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 50 in batch 3\n2025-08-01 01:31:18,593 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 50 in batch 3\n2025-08-01 01:31:18,593 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 51 in batch 3\n2025-08-01 01:31:18,593 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 51 in batch 3\n2025-08-01 01:31:18,593 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 52 in batch 3\n2025-08-01 01:31:18,594 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 53 in batch 3\n2025-08-01 01:31:18,594 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 53 in batch 3\n2025-08-01 01:31:18,594 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 54 in batch 3\n2025-08-01 01:31:18,594 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 54 in batch 3\n2025-08-01 01:31:18,594 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 55 in batch 3\n2025-08-01 01:31:18,595 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 55 in batch 3\n2025-08-01 01:31:18,595 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 56 in batch 3\n2025-08-01 01:31:18,595 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 56 in batch 3\n2025-08-01 01:31:18,595 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 57 in batch 3\n2025-08-01 01:31:18,595 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 58 in batch 3\n2025-08-01 01:31:18,596 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 58 in batch 3\n2025-08-01 01:31:18,596 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 59 in batch 3\n2025-08-01 01:31:18,596 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 59 in batch 3\n2025-08-01 01:31:18,596 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 60 in batch 3\n2025-08-01 01:31:18,596 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 60 in batch 3\n2025-08-01 01:31:18,597 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 61 in batch 3\n2025-08-01 01:31:18,598 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 61 in batch 3\n2025-08-01 01:31:18,599 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 62 in batch 3\n2025-08-01 01:31:18,599 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 62 in batch 3\n2025-08-01 01:31:18,599 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 80 in batch 3\n2025-08-01 01:31:18,600 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 82 in batch 3\n2025-08-01 01:31:18,600 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 82 in batch 3\n2025-08-01 01:31:18,600 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 83 in batch 3\n2025-08-01 01:31:18,600 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 83 in batch 3\n2025-08-01 01:31:18,601 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 84 in batch 3\n2025-08-01 01:31:18,601 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 85 in batch 3\n2025-08-01 01:31:18,601 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 86 in batch 3\n2025-08-01 01:31:18,601 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 86 in batch 3\n2025-08-01 01:31:18,601 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 87 in batch 3\n2025-08-01 01:31:18,602 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 87 in batch 3\n2025-08-01 01:31:18,602 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 88 in batch 3\n2025-08-01 01:31:18,602 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 88 in batch 3\n2025-08-01 01:31:18,602 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 89 in batch 3\n2025-08-01 01:31:18,603 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 89 in batch 3\n2025-08-01 01:31:18,603 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 90 in batch 3\n2025-08-01 01:31:18,603 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 90 in batch 3\n2025-08-01 01:31:18,603 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 91 in batch 3\n2025-08-01 01:31:18,603 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 91 in batch 3\n2025-08-01 01:31:18,604 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 92 in batch 3\n2025-08-01 01:31:18,604 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 92 in batch 3\n2025-08-01 01:31:18,604 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 93 in batch 3\n2025-08-01 01:31:18,604 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 93 in batch 3\n2025-08-01 01:31:18,604 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 94 in batch 3\n2025-08-01 01:31:18,605 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 94 in batch 3\n2025-08-01 01:31:18,605 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 95 in batch 3\n2025-08-01 01:31:18,605 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 95 in batch 3\n2025-08-01 01:31:18,605 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 96 in batch 3\n2025-08-01 01:31:18,605 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 96 in batch 3\n2025-08-01 01:31:18,606 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 97 in batch 3\n2025-08-01 01:31:18,607 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 97 in batch 3\n2025-08-01 01:31:18,607 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 98 in batch 3\n2025-08-01 01:31:18,607 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 98 in batch 3\n2025-08-01 01:31:18,610 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 99 in batch 3\n2025-08-01 01:31:18,612 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 99 in batch 3\n2025-08-01 01:31:18,612 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 100 in batch 3\n2025-08-01 01:31:18,612 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 100 in batch 3\n2025-08-01 01:31:18,612 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 101 in batch 3\n2025-08-01 01:31:18,613 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 101 in batch 3\n2025-08-01 01:31:18,613 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 102 in batch 3\n2025-08-01 01:31:18,613 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 102 in batch 3\n2025-08-01 01:31:18,613 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 103 in batch 3\n2025-08-01 01:31:18,614 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 103 in batch 3\n2025-08-01 01:31:18,614 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 104 in batch 3\n2025-08-01 01:31:18,614 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 104 in batch 3\n2025-08-01 01:31:18,615 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 105 in batch 3\n2025-08-01 01:31:18,616 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 105 in batch 3\n2025-08-01 01:31:18,616 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 106 in batch 3\n2025-08-01 01:31:18,616 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 106 in batch 3\n2025-08-01 01:31:18,617 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 107 in batch 3\n2025-08-01 01:31:18,617 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 107 in batch 3\n2025-08-01 01:31:18,617 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 108 in batch 3\n2025-08-01 01:31:18,618 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 108 in batch 3\n2025-08-01 01:31:18,618 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 109 in batch 3\n2025-08-01 01:31:18,618 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 110 in batch 3\n2025-08-01 01:31:18,619 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 110 in batch 3\n2025-08-01 01:31:18,619 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 111 in batch 3\n2025-08-01 01:31:18,619 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 111 in batch 3\n2025-08-01 01:31:18,619 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 112 in batch 3\n2025-08-01 01:31:18,621 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 112 in batch 3\n2025-08-01 01:31:18,622 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 113 in batch 3\n2025-08-01 01:31:18,622 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 113 in batch 3\n2025-08-01 01:31:18,622 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 114 in batch 3\n2025-08-01 01:31:18,623 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 114 in batch 3\n2025-08-01 01:31:18,623 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 115 in batch 3\n2025-08-01 01:31:18,623 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 115 in batch 3\n2025-08-01 01:31:18,623 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 116 in batch 3\n2025-08-01 01:31:18,624 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 116 in batch 3\n2025-08-01 01:31:18,624 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 117 in batch 3\n2025-08-01 01:31:18,624 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 117 in batch 3\n2025-08-01 01:31:18,624 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 118 in batch 3\n2025-08-01 01:31:18,625 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 118 in batch 3\n2025-08-01 01:31:18,625 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 119 in batch 3\n2025-08-01 01:31:18,625 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 120 in batch 3\n2025-08-01 01:31:18,625 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 120 in batch 3\n2025-08-01 01:31:18,625 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 121 in batch 3\n2025-08-01 01:31:18,626 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 121 in batch 3\n2025-08-01 01:31:18,626 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 122 in batch 3\n2025-08-01 01:31:18,626 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 122 in batch 3\n2025-08-01 01:31:18,626 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 123 in batch 3\n2025-08-01 01:31:18,627 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 123 in batch 3\n2025-08-01 01:31:18,627 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 124 in batch 3\n2025-08-01 01:31:18,627 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 124 in batch 3\n2025-08-01 01:31:18,627 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 125 in batch 3\n2025-08-01 01:31:18,628 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 125 in batch 3\n2025-08-01 01:31:18,628 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 126 in batch 3\n2025-08-01 01:31:18,628 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 126 in batch 3\n2025-08-01 01:31:18,628 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 127 in batch 3\n2025-08-01 01:31:18,629 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 127 in batch 3\n2025-08-01 01:31:18,629 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 128 in batch 3\n2025-08-01 01:31:18,629 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 128 in batch 3\n2025-08-01 01:31:18,629 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 129 in batch 3\n2025-08-01 01:31:18,629 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 129 in batch 3\n2025-08-01 01:31:18,630 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 130 in batch 3\n2025-08-01 01:31:18,630 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 130 in batch 3\n2025-08-01 01:31:18,630 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 131 in batch 3\n2025-08-01 01:31:18,630 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 131 in batch 3\n2025-08-01 01:31:18,630 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 132 in batch 3\n2025-08-01 01:31:18,631 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 132 in batch 3\n2025-08-01 01:31:18,631 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 133 in batch 3\n2025-08-01 01:31:18,631 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 133 in batch 3\n2025-08-01 01:31:18,631 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 134 in batch 3\n2025-08-01 01:31:18,634 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 134 in batch 3\n2025-08-01 01:31:18,634 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 135 in batch 3\n2025-08-01 01:31:18,635 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 135 in batch 3\n2025-08-01 01:31:18,635 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 136 in batch 3\n2025-08-01 01:31:18,636 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 136 in batch 3\n2025-08-01 01:31:18,636 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 137 in batch 3\n2025-08-01 01:31:18,636 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 137 in batch 3\n2025-08-01 01:31:18,637 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 138 in batch 3\n2025-08-01 01:31:18,637 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 138 in batch 3\n2025-08-01 01:31:18,637 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 139 in batch 3\n2025-08-01 01:31:18,638 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 139 in batch 3\n2025-08-01 01:31:18,638 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 140 in batch 3\n2025-08-01 01:31:18,638 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 140 in batch 3\n2025-08-01 01:31:18,639 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 141 in batch 3\n2025-08-01 01:31:18,640 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 141 in batch 3\n2025-08-01 01:31:18,640 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 142 in batch 3\n2025-08-01 01:31:18,641 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 142 in batch 3\n2025-08-01 01:31:18,641 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 143 in batch 3\n2025-08-01 01:31:18,641 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 143 in batch 3\n2025-08-01 01:31:18,642 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 144 in batch 3\n2025-08-01 01:31:18,643 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 144 in batch 3\n2025-08-01 01:31:18,643 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 145 in batch 3\n2025-08-01 01:31:18,643 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 145 in batch 3\n2025-08-01 01:31:18,644 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 146 in batch 3\n2025-08-01 01:31:18,644 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 146 in batch 3\n2025-08-01 01:31:18,644 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 147 in batch 3\n2025-08-01 01:31:18,644 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 147 in batch 3\n2025-08-01 01:31:18,645 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 148 in batch 3\n2025-08-01 01:31:18,645 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 148 in batch 3\n2025-08-01 01:31:18,646 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 149 in batch 3\n2025-08-01 01:31:18,646 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 149 in batch 3\n2025-08-01 01:31:18,646 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 150 in batch 3\n2025-08-01 01:31:18,646 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 151 in batch 3\n2025-08-01 01:31:18,647 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 151 in batch 3\n2025-08-01 01:31:18,647 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 152 in batch 3\n2025-08-01 01:31:18,647 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 152 in batch 3\n2025-08-01 01:31:18,648 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 153 in batch 3\n2025-08-01 01:31:18,648 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 153 in batch 3\n2025-08-01 01:31:18,648 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 154 in batch 3\n2025-08-01 01:31:18,648 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 154 in batch 3\n2025-08-01 01:31:18,649 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 155 in batch 3\n2025-08-01 01:31:18,649 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 155 in batch 3\n2025-08-01 01:31:18,649 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 156 in batch 3\n2025-08-01 01:31:18,650 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 156 in batch 3\n2025-08-01 01:31:18,650 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 157 in batch 3\n2025-08-01 01:31:18,650 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 157 in batch 3\n2025-08-01 01:31:18,651 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 158 in batch 3\n2025-08-01 01:31:18,651 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 158 in batch 3\n2025-08-01 01:31:18,651 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 159 in batch 3\n2025-08-01 01:31:18,651 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 159 in batch 3\n2025-08-01 01:31:18,652 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 160 in batch 3\n2025-08-01 01:31:18,652 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 160 in batch 3\n2025-08-01 01:31:18,653 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 161 in batch 3\n2025-08-01 01:31:18,653 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 161 in batch 3\n2025-08-01 01:31:18,653 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 162 in batch 3\n2025-08-01 01:31:18,653 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 162 in batch 3\n2025-08-01 01:31:18,653 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 163 in batch 3\n2025-08-01 01:31:18,654 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 163 in batch 3\n2025-08-01 01:31:18,654 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 164 in batch 3\n2025-08-01 01:31:18,654 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 164 in batch 3\n2025-08-01 01:31:18,654 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 165 in batch 3\n2025-08-01 01:31:18,655 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 165 in batch 3\n2025-08-01 01:31:18,656 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 166 in batch 3\n2025-08-01 01:31:18,656 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 166 in batch 3\n2025-08-01 01:31:18,656 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 167 in batch 3\n2025-08-01 01:31:18,656 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 167 in batch 3\n2025-08-01 01:31:18,657 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 168 in batch 3\n2025-08-01 01:31:18,657 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 168 in batch 3\n2025-08-01 01:31:18,657 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 169 in batch 3\n2025-08-01 01:31:18,658 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 169 in batch 3\n2025-08-01 01:31:18,658 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 170 in batch 3\n2025-08-01 01:31:18,658 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 170 in batch 3\n2025-08-01 01:31:18,659 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 176 in batch 3\n2025-08-01 01:31:18,659 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 177 in batch 3\n2025-08-01 01:31:18,659 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 177 in batch 3\n2025-08-01 01:31:18,659 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 178 in batch 3\n2025-08-01 01:31:18,660 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 178 in batch 3\n2025-08-01 01:31:18,660 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 179 in batch 3\n2025-08-01 01:31:18,660 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 179 in batch 3\n2025-08-01 01:31:18,660 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 180 in batch 3\n2025-08-01 01:31:18,661 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 180 in batch 3\n2025-08-01 01:31:18,661 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 181 in batch 3\n2025-08-01 01:31:18,661 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 181 in batch 3\n2025-08-01 01:31:18,661 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 182 in batch 3\n2025-08-01 01:31:18,662 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 182 in batch 3\n2025-08-01 01:31:18,662 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 183 in batch 3\n2025-08-01 01:31:18,662 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 183 in batch 3\n2025-08-01 01:31:18,662 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 184 in batch 3\n2025-08-01 01:31:18,662 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 185 in batch 3\n2025-08-01 01:31:18,663 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 186 in batch 3\n2025-08-01 01:31:18,663 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 187 in batch 3\n2025-08-01 01:31:18,663 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 187 in batch 3\n2025-08-01 01:31:18,664 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 188 in batch 3\n2025-08-01 01:31:18,664 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 188 in batch 3\n2025-08-01 01:31:18,664 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 189 in batch 3\n2025-08-01 01:31:18,664 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 189 in batch 3\n2025-08-01 01:31:18,665 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 190 in batch 3\n2025-08-01 01:31:18,668 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 190 in batch 3\n2025-08-01 01:31:18,668 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 191 in batch 3\n2025-08-01 01:31:18,668 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 192 in batch 3\n2025-08-01 01:31:18,669 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 192 in batch 3\n2025-08-01 01:31:18,669 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 193 in batch 3\n2025-08-01 01:31:18,669 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 193 in batch 3\n2025-08-01 01:31:18,669 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 194 in batch 3\n2025-08-01 01:31:18,669 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 195 in batch 3\n2025-08-01 01:31:18,670 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 195 in batch 3\n2025-08-01 01:31:18,670 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 196 in batch 3\n2025-08-01 01:31:18,670 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 196 in batch 3\n2025-08-01 01:31:18,670 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 197 in batch 3\n2025-08-01 01:31:18,671 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 197 in batch 3\n2025-08-01 01:31:18,671 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 198 in batch 3\n2025-08-01 01:31:18,671 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 198 in batch 3\n2025-08-01 01:31:18,671 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 199 in batch 3\n2025-08-01 01:31:18,672 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 199 in batch 3\n2025-08-01 01:31:18,672 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 200 in batch 3\n2025-08-01 01:31:18,672 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 200 in batch 3\n2025-08-01 01:31:18,672 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 201 in batch 3\n2025-08-01 01:31:18,672 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 201 in batch 3\n2025-08-01 01:31:18,673 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 202 in batch 3\n2025-08-01 01:31:18,673 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 202 in batch 3\n2025-08-01 01:31:18,673 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 203 in batch 3\n2025-08-01 01:31:18,673 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 203 in batch 3\n2025-08-01 01:31:18,674 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 204 in batch 3\n2025-08-01 01:31:18,676 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 204 in batch 3\n2025-08-01 01:31:18,678 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 205 in batch 3\n2025-08-01 01:31:18,678 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 205 in batch 3\n2025-08-01 01:31:18,678 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 206 in batch 3\n2025-08-01 01:31:18,679 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 206 in batch 3\n2025-08-01 01:31:18,679 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 207 in batch 3\n2025-08-01 01:31:18,681 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 207 in batch 3\n2025-08-01 01:31:18,681 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 208 in batch 3\n2025-08-01 01:31:18,681 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 208 in batch 3\n2025-08-01 01:31:18,681 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 209 in batch 3\n2025-08-01 01:31:18,681 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 209 in batch 3\n2025-08-01 01:31:18,682 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 210 in batch 3\n2025-08-01 01:31:18,682 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 210 in batch 3\n2025-08-01 01:31:18,682 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 211 in batch 3\n2025-08-01 01:31:18,683 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 211 in batch 3\n2025-08-01 01:31:18,683 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 212 in batch 3\n2025-08-01 01:31:18,683 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 212 in batch 3\n2025-08-01 01:31:18,683 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 213 in batch 3\n2025-08-01 01:31:18,684 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 213 in batch 3\n2025-08-01 01:31:18,684 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 214 in batch 3\n2025-08-01 01:31:18,684 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 214 in batch 3\n2025-08-01 01:31:18,684 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 215 in batch 3\n2025-08-01 01:31:18,684 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 215 in batch 3\n2025-08-01 01:31:18,685 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 216 in batch 3\n2025-08-01 01:31:18,685 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 216 in batch 3\n2025-08-01 01:31:18,685 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 217 in batch 3\n2025-08-01 01:31:18,686 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 218 in batch 3\n2025-08-01 01:31:18,686 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 219 in batch 3\n2025-08-01 01:31:18,686 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 219 in batch 3\n2025-08-01 01:31:18,686 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 220 in batch 3\n2025-08-01 01:31:18,687 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 220 in batch 3\n2025-08-01 01:31:18,687 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 221 in batch 3\n2025-08-01 01:31:18,687 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 221 in batch 3\n2025-08-01 01:31:18,687 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 222 in batch 3\n2025-08-01 01:31:18,687 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 222 in batch 3\n2025-08-01 01:31:18,688 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 223 in batch 3\n2025-08-01 01:31:18,688 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 223 in batch 3\n2025-08-01 01:31:18,688 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 224 in batch 3\n2025-08-01 01:31:18,688 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 225 in batch 3\n2025-08-01 01:31:18,689 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 225 in batch 3\n2025-08-01 01:31:18,689 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 226 in batch 3\n2025-08-01 01:31:18,690 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 226 in batch 3\n2025-08-01 01:31:18,690 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 227 in batch 3\n2025-08-01 01:31:18,690 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 228 in batch 3\n2025-08-01 01:31:18,691 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 228 in batch 3\n2025-08-01 01:31:18,691 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 229 in batch 3\n2025-08-01 01:31:18,691 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 229 in batch 3\n2025-08-01 01:31:18,691 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 230 in batch 3\n2025-08-01 01:31:18,691 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 230 in batch 3\n2025-08-01 01:31:18,692 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 231 in batch 3\n2025-08-01 01:31:18,692 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 231 in batch 3\n2025-08-01 01:31:18,692 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 232 in batch 3\n2025-08-01 01:31:18,692 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 232 in batch 3\n2025-08-01 01:31:18,692 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 233 in batch 3\n2025-08-01 01:31:18,693 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 233 in batch 3\n2025-08-01 01:31:18,693 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 234 in batch 3\n2025-08-01 01:31:18,693 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 234 in batch 3\n2025-08-01 01:31:18,693 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 235 in batch 3\n2025-08-01 01:31:18,694 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 235 in batch 3\n2025-08-01 01:31:18,694 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 236 in batch 3\n2025-08-01 01:31:18,694 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 236 in batch 3\n2025-08-01 01:31:18,695 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 237 in batch 3\n2025-08-01 01:31:18,695 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 237 in batch 3\n2025-08-01 01:31:18,695 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 238 in batch 3\n2025-08-01 01:31:18,695 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 238 in batch 3\n2025-08-01 01:31:18,696 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 239 in batch 3\n2025-08-01 01:31:18,696 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 239 in batch 3\n2025-08-01 01:31:18,696 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 240 in batch 3\n2025-08-01 01:31:18,696 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 240 in batch 3\n2025-08-01 01:31:18,697 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 241 in batch 3\n2025-08-01 01:31:18,697 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 241 in batch 3\n2025-08-01 01:31:18,697 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 242 in batch 3\n2025-08-01 01:31:18,698 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 242 in batch 3\n2025-08-01 01:31:18,698 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 243 in batch 3\n2025-08-01 01:31:18,698 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 243 in batch 3\n2025-08-01 01:31:18,699 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 244 in batch 3\n2025-08-01 01:31:18,699 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 244 in batch 3\n2025-08-01 01:31:18,699 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 245 in batch 3\n2025-08-01 01:31:18,699 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 245 in batch 3\n2025-08-01 01:31:18,699 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 246 in batch 3\n2025-08-01 01:31:18,700 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 246 in batch 3\n2025-08-01 01:31:18,700 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 247 in batch 3\n2025-08-01 01:31:18,700 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 247 in batch 3\n2025-08-01 01:31:18,701 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 248 in batch 3\n2025-08-01 01:31:18,702 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 248 in batch 3\n2025-08-01 01:31:18,702 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 249 in batch 3\n2025-08-01 01:31:18,702 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 249 in batch 3\n2025-08-01 01:31:18,702 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 250 in batch 3\n2025-08-01 01:31:18,703 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 250 in batch 3\n2025-08-01 01:31:18,703 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 251 in batch 3\n2025-08-01 01:31:18,704 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 251 in batch 3\n2025-08-01 01:31:18,704 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 252 in batch 3\n2025-08-01 01:31:18,704 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 252 in batch 3\n2025-08-01 01:31:18,704 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 253 in batch 3\n2025-08-01 01:31:18,704 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 253 in batch 3\n2025-08-01 01:31:18,705 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 254 in batch 3\n2025-08-01 01:31:18,705 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 255 in batch 3\n2025-08-01 01:31:18,705 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 255 in batch 3\n2025-08-01 01:31:18,705 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 256 in batch 3\n2025-08-01 01:31:18,705 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 256 in batch 3\n2025-08-01 01:31:18,706 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 257 in batch 3\n2025-08-01 01:31:18,706 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 257 in batch 3\n2025-08-01 01:31:18,706 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 258 in batch 3\n2025-08-01 01:31:18,706 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 258 in batch 3\n2025-08-01 01:31:18,708 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 259 in batch 3\n2025-08-01 01:31:18,708 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 259 in batch 3\n2025-08-01 01:31:18,709 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 260 in batch 3\n2025-08-01 01:31:18,709 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 260 in batch 3\n2025-08-01 01:31:18,709 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 261 in batch 3\n2025-08-01 01:31:18,709 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 261 in batch 3\n2025-08-01 01:31:18,710 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 262 in batch 3\n2025-08-01 01:31:18,710 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 262 in batch 3\n2025-08-01 01:31:18,710 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 263 in batch 3\n2025-08-01 01:31:18,710 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 263 in batch 3\n2025-08-01 01:31:18,711 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 264 in batch 3\n2025-08-01 01:31:18,711 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 264 in batch 3\n2025-08-01 01:31:18,711 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 265 in batch 3\n2025-08-01 01:31:18,711 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 265 in batch 3\n2025-08-01 01:31:18,711 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 267 in batch 3\n2025-08-01 01:31:18,712 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 267 in batch 3\n2025-08-01 01:31:18,712 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 268 in batch 3\n2025-08-01 01:31:18,712 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 268 in batch 3\n2025-08-01 01:31:18,712 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 269 in batch 3\n2025-08-01 01:31:18,713 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 269 in batch 3\n2025-08-01 01:31:18,713 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 270 in batch 3\n2025-08-01 01:31:18,713 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 270 in batch 3\n2025-08-01 01:31:18,713 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 271 in batch 3\n2025-08-01 01:31:18,713 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 271 in batch 3\n2025-08-01 01:31:18,714 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 272 in batch 3\n2025-08-01 01:31:18,714 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 272 in batch 3\n2025-08-01 01:31:18,715 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 273 in batch 3\n2025-08-01 01:31:18,715 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 273 in batch 3\n2025-08-01 01:31:18,715 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 274 in batch 3\n2025-08-01 01:31:18,715 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 274 in batch 3\n2025-08-01 01:31:18,715 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 275 in batch 3\n2025-08-01 01:31:18,716 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 275 in batch 3\n2025-08-01 01:31:18,716 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 276 in batch 3\n2025-08-01 01:31:18,716 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 276 in batch 3\n2025-08-01 01:31:18,717 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 277 in batch 3\n2025-08-01 01:31:18,717 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 278 in batch 3\n2025-08-01 01:31:18,717 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 278 in batch 3\n2025-08-01 01:31:18,717 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 279 in batch 3\n2025-08-01 01:31:18,717 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 279 in batch 3\n2025-08-01 01:31:18,718 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 280 in batch 3\n2025-08-01 01:31:18,718 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 280 in batch 3\n2025-08-01 01:31:18,718 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 281 in batch 3\n2025-08-01 01:31:18,718 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 281 in batch 3\n2025-08-01 01:31:18,718 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 282 in batch 3\n2025-08-01 01:31:18,719 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 282 in batch 3\n2025-08-01 01:31:18,719 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 283 in batch 3\n2025-08-01 01:31:18,719 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 283 in batch 3\n2025-08-01 01:31:18,719 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 284 in batch 3\n2025-08-01 01:31:18,719 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 284 in batch 3\n2025-08-01 01:31:18,720 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 285 in batch 3\n2025-08-01 01:31:18,720 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 285 in batch 3\n2025-08-01 01:31:18,720 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 286 in batch 3\n2025-08-01 01:31:18,720 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 286 in batch 3\n2025-08-01 01:31:18,720 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 287 in batch 3\n2025-08-01 01:31:18,721 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 287 in batch 3\n2025-08-01 01:31:18,721 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 288 in batch 3\n2025-08-01 01:31:18,722 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 288 in batch 3\n2025-08-01 01:31:18,722 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 289 in batch 3\n2025-08-01 01:31:18,722 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 289 in batch 3\n2025-08-01 01:31:18,723 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 290 in batch 3\n2025-08-01 01:31:18,723 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 290 in batch 3\n2025-08-01 01:31:18,723 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 291 in batch 3\n2025-08-01 01:31:18,723 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 291 in batch 3\n2025-08-01 01:31:18,724 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 292 in batch 3\n2025-08-01 01:31:18,724 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 292 in batch 3\n2025-08-01 01:31:18,724 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 293 in batch 3\n2025-08-01 01:31:18,724 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 293 in batch 3\n2025-08-01 01:31:18,725 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 294 in batch 3\n2025-08-01 01:31:18,725 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 294 in batch 3\n2025-08-01 01:31:18,726 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 295 in batch 3\n2025-08-01 01:31:18,726 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 296 in batch 3\n2025-08-01 01:31:18,726 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 296 in batch 3\n2025-08-01 01:31:18,726 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 297 in batch 3\n2025-08-01 01:31:18,726 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 297 in batch 3\n2025-08-01 01:31:18,727 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 298 in batch 3\n2025-08-01 01:31:18,727 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 298 in batch 3\n2025-08-01 01:31:18,727 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 299 in batch 3\n2025-08-01 01:31:18,727 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 300 in batch 3\n2025-08-01 01:31:18,727 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 300 in batch 3\n2025-08-01 01:31:18,728 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 301 in batch 3\n2025-08-01 01:31:18,728 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 301 in batch 3\n2025-08-01 01:31:18,728 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 302 in batch 3\n2025-08-01 01:31:18,728 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 302 in batch 3\n2025-08-01 01:31:18,728 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 303 in batch 3\n2025-08-01 01:31:18,729 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 303 in batch 3\n2025-08-01 01:31:18,729 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 304 in batch 3\n2025-08-01 01:31:18,729 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 304 in batch 3\n2025-08-01 01:31:18,732 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 305 in batch 3\n2025-08-01 01:31:18,732 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 305 in batch 3\n2025-08-01 01:31:18,734 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 306 in batch 3\n2025-08-01 01:31:18,734 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 306 in batch 3\n2025-08-01 01:31:18,734 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 307 in batch 3\n2025-08-01 01:31:18,734 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 307 in batch 3\n2025-08-01 01:31:18,735 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 308 in batch 3\n2025-08-01 01:31:18,735 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 308 in batch 3\n2025-08-01 01:31:18,735 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 309 in batch 3\n2025-08-01 01:31:18,735 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 309 in batch 3\n2025-08-01 01:31:18,736 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 310 in batch 3\n2025-08-01 01:31:18,736 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 310 in batch 3\n2025-08-01 01:31:18,736 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 311 in batch 3\n2025-08-01 01:31:18,737 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 311 in batch 3\n2025-08-01 01:31:18,737 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 318 in batch 3\n2025-08-01 01:31:18,737 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 324 in batch 3\n2025-08-01 01:31:18,738 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 326 in batch 3\n2025-08-01 01:31:18,738 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 327 in batch 3\n2025-08-01 01:31:18,738 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 327 in batch 3\n2025-08-01 01:31:18,739 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 328 in batch 3\n2025-08-01 01:31:18,739 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 328 in batch 3\n2025-08-01 01:31:18,739 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 329 in batch 3\n2025-08-01 01:31:18,739 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 329 in batch 3\n2025-08-01 01:31:18,740 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 330 in batch 3\n2025-08-01 01:31:18,742 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 330 in batch 3\n2025-08-01 01:31:18,742 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 331 in batch 3\n2025-08-01 01:31:18,743 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 331 in batch 3\n2025-08-01 01:31:18,743 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 332 in batch 3\n2025-08-01 01:31:18,744 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 332 in batch 3\n2025-08-01 01:31:18,745 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 333 in batch 3\n2025-08-01 01:31:18,745 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 333 in batch 3\n2025-08-01 01:31:18,745 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 334 in batch 3\n2025-08-01 01:31:18,746 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 334 in batch 3\n2025-08-01 01:31:18,746 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 335 in batch 3\n2025-08-01 01:31:18,746 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 335 in batch 3\n2025-08-01 01:31:18,746 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 336 in batch 3\n2025-08-01 01:31:18,747 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 336 in batch 3\n2025-08-01 01:31:18,747 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 340 in batch 3\n2025-08-01 01:31:18,747 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 340 in batch 3\n2025-08-01 01:31:18,748 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 341 in batch 3\n2025-08-01 01:31:18,748 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 341 in batch 3\n2025-08-01 01:31:18,748 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 342 in batch 3\n2025-08-01 01:31:18,748 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 342 in batch 3\n2025-08-01 01:31:18,749 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 343 in batch 3\n2025-08-01 01:31:18,749 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 343 in batch 3\n2025-08-01 01:31:18,749 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 344 in batch 3\n2025-08-01 01:31:18,749 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 344 in batch 3\n2025-08-01 01:31:18,750 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 345 in batch 3\n2025-08-01 01:31:18,750 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 345 in batch 3\n2025-08-01 01:31:18,750 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 346 in batch 3\n2025-08-01 01:31:18,750 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 346 in batch 3\n2025-08-01 01:31:18,751 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 347 in batch 3\n2025-08-01 01:31:18,751 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 347 in batch 3\n2025-08-01 01:31:18,751 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 348 in batch 3\n2025-08-01 01:31:18,751 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 348 in batch 3\n2025-08-01 01:31:18,751 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 349 in batch 3\n2025-08-01 01:31:18,752 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 349 in batch 3\n2025-08-01 01:31:18,752 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 350 in batch 3\n2025-08-01 01:31:18,752 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 350 in batch 3\n2025-08-01 01:31:18,752 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 351 in batch 3\n2025-08-01 01:31:18,753 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 351 in batch 3\n2025-08-01 01:31:18,753 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 352 in batch 3\n2025-08-01 01:31:18,753 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 352 in batch 3\n2025-08-01 01:31:18,753 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 353 in batch 3\n2025-08-01 01:31:18,754 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 353 in batch 3\n2025-08-01 01:31:18,754 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 354 in batch 3\n2025-08-01 01:31:18,754 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 354 in batch 3\n2025-08-01 01:31:18,754 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 355 in batch 3\n2025-08-01 01:31:18,755 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 355 in batch 3\n2025-08-01 01:31:18,755 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 356 in batch 3\n2025-08-01 01:31:18,755 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 356 in batch 3\n2025-08-01 01:31:18,757 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 357 in batch 3\n2025-08-01 01:31:18,758 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 357 in batch 3\n2025-08-01 01:31:18,758 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 358 in batch 3\n2025-08-01 01:31:18,759 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 358 in batch 3\n2025-08-01 01:31:18,759 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 359 in batch 3\n2025-08-01 01:31:18,760 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 359 in batch 3\n2025-08-01 01:31:18,760 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 362 in batch 3\n2025-08-01 01:31:18,760 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 363 in batch 3\n2025-08-01 01:31:18,761 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 363 in batch 3\n2025-08-01 01:31:18,761 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 364 in batch 3\n2025-08-01 01:31:18,761 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 364 in batch 3\n2025-08-01 01:31:18,761 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 365 in batch 3\n2025-08-01 01:31:18,762 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 365 in batch 3\n2025-08-01 01:31:18,762 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 366 in batch 3\n2025-08-01 01:31:18,762 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 366 in batch 3\n2025-08-01 01:31:18,762 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 367 in batch 3\n2025-08-01 01:31:18,763 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 367 in batch 3\n2025-08-01 01:31:18,763 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 368 in batch 3\n2025-08-01 01:31:18,763 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 368 in batch 3\n2025-08-01 01:31:18,763 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 369 in batch 3\n2025-08-01 01:31:18,764 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 369 in batch 3\n2025-08-01 01:31:18,764 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 370 in batch 3\n2025-08-01 01:31:18,766 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 370 in batch 3\n2025-08-01 01:31:18,767 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 371 in batch 3\n2025-08-01 01:31:18,767 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 371 in batch 3\n2025-08-01 01:31:18,767 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 372 in batch 3\n2025-08-01 01:31:18,769 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 372 in batch 3\n2025-08-01 01:31:18,769 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 373 in batch 3\n2025-08-01 01:31:18,770 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 373 in batch 3\n2025-08-01 01:31:18,770 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 374 in batch 3\n2025-08-01 01:31:18,770 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 374 in batch 3\n2025-08-01 01:31:18,771 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 375 in batch 3\n2025-08-01 01:31:18,771 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 375 in batch 3\n2025-08-01 01:31:18,771 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 376 in batch 3\n2025-08-01 01:31:18,772 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 376 in batch 3\n2025-08-01 01:31:18,772 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 377 in batch 3\n2025-08-01 01:31:18,773 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 377 in batch 3\n2025-08-01 01:31:18,773 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 378 in batch 3\n2025-08-01 01:31:18,773 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 378 in batch 3\n2025-08-01 01:31:18,773 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 379 in batch 3\n2025-08-01 01:31:18,773 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 379 in batch 3\n2025-08-01 01:31:18,774 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 380 in batch 3\n2025-08-01 01:31:18,774 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 380 in batch 3\n2025-08-01 01:31:18,774 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 381 in batch 3\n2025-08-01 01:31:18,775 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 381 in batch 3\n2025-08-01 01:31:18,775 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 382 in batch 3\n2025-08-01 01:31:18,776 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 382 in batch 3\n2025-08-01 01:31:18,776 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 383 in batch 3\n2025-08-01 01:31:18,776 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 383 in batch 3\n2025-08-01 01:31:18,776 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 384 in batch 3\n2025-08-01 01:31:18,776 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 384 in batch 3\n2025-08-01 01:31:18,777 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 385 in batch 3\n2025-08-01 01:31:18,777 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 385 in batch 3\n2025-08-01 01:31:18,777 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 386 in batch 3\n2025-08-01 01:31:18,777 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 386 in batch 3\n2025-08-01 01:31:18,777 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 387 in batch 3\n2025-08-01 01:31:18,778 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 387 in batch 3\n2025-08-01 01:31:18,778 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 388 in batch 3\n2025-08-01 01:31:18,779 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 388 in batch 3\n2025-08-01 01:31:18,779 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 389 in batch 3\n2025-08-01 01:31:18,779 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 400 in batch 3\n2025-08-01 01:31:18,779 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 400 in batch 3\n2025-08-01 01:31:18,779 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 401 in batch 3\n2025-08-01 01:31:18,780 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 401 in batch 3\n2025-08-01 01:31:18,780 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 402 in batch 3\n2025-08-01 01:31:18,780 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 402 in batch 3\n2025-08-01 01:31:18,780 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 403 in batch 3\n2025-08-01 01:31:18,781 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 403 in batch 3\n2025-08-01 01:31:18,781 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 404 in batch 3\n2025-08-01 01:31:18,781 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 404 in batch 3\n2025-08-01 01:31:18,781 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 405 in batch 3\n2025-08-01 01:31:18,783 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 405 in batch 3\n2025-08-01 01:31:18,784 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 406 in batch 3\n2025-08-01 01:31:18,784 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 406 in batch 3\n2025-08-01 01:31:18,785 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 407 in batch 3\n2025-08-01 01:31:18,785 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 407 in batch 3\n2025-08-01 01:31:18,785 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 408 in batch 3\n2025-08-01 01:31:18,786 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 408 in batch 3\n2025-08-01 01:31:18,786 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 409 in batch 3\n2025-08-01 01:31:18,786 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 409 in batch 3\n2025-08-01 01:31:18,786 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 410 in batch 3\n2025-08-01 01:31:18,786 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 410 in batch 3\n2025-08-01 01:31:18,787 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 411 in batch 3\n2025-08-01 01:31:18,787 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 411 in batch 3\n2025-08-01 01:31:18,787 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 412 in batch 3\n2025-08-01 01:31:18,787 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 412 in batch 3\n2025-08-01 01:31:18,787 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 413 in batch 3\n2025-08-01 01:31:18,787 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 413 in batch 3\n2025-08-01 01:31:18,788 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 414 in batch 3\n2025-08-01 01:31:18,788 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 414 in batch 3\n2025-08-01 01:31:18,789 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 415 in batch 3\n2025-08-01 01:31:18,789 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 415 in batch 3\n2025-08-01 01:31:18,789 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 416 in batch 3\n2025-08-01 01:31:18,789 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 416 in batch 3\n2025-08-01 01:31:18,790 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 417 in batch 3\n2025-08-01 01:31:18,790 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 417 in batch 3\n2025-08-01 01:31:18,790 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 418 in batch 3\n2025-08-01 01:31:18,790 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 418 in batch 3\n2025-08-01 01:31:18,790 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 419 in batch 3\n2025-08-01 01:31:18,791 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 419 in batch 3\n2025-08-01 01:31:18,791 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 420 in batch 3\n2025-08-01 01:31:18,791 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 420 in batch 3\n2025-08-01 01:31:18,791 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 421 in batch 3\n2025-08-01 01:31:18,791 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 421 in batch 3\n2025-08-01 01:31:18,791 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 422 in batch 3\n2025-08-01 01:31:18,792 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 422 in batch 3\n2025-08-01 01:31:18,792 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 423 in batch 3\n2025-08-01 01:31:18,792 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 423 in batch 3\n2025-08-01 01:31:18,792 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 424 in batch 3\n2025-08-01 01:31:18,792 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 424 in batch 3\n2025-08-01 01:31:18,793 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 425 in batch 3\n2025-08-01 01:31:18,793 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 425 in batch 3\n2025-08-01 01:31:18,793 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 426 in batch 3\n2025-08-01 01:31:18,793 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 426 in batch 3\n2025-08-01 01:31:18,793 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 427 in batch 3\n2025-08-01 01:31:18,793 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 427 in batch 3\n2025-08-01 01:31:18,794 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 428 in batch 3\n2025-08-01 01:31:18,795 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 428 in batch 3\n2025-08-01 01:31:18,795 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 429 in batch 3\n2025-08-01 01:31:18,796 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 429 in batch 3\n2025-08-01 01:31:18,796 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 430 in batch 3\n2025-08-01 01:31:18,796 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 430 in batch 3\n2025-08-01 01:31:18,796 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 431 in batch 3\n2025-08-01 01:31:18,797 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 431 in batch 3\n2025-08-01 01:31:18,797 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 432 in batch 3\n2025-08-01 01:31:18,797 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 432 in batch 3\n2025-08-01 01:31:18,797 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 433 in batch 3\n2025-08-01 01:31:18,797 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 433 in batch 3\n2025-08-01 01:31:18,798 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 434 in batch 3\n2025-08-01 01:31:18,798 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 434 in batch 3\n2025-08-01 01:31:18,798 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 435 in batch 3\n2025-08-01 01:31:18,798 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 435 in batch 3\n2025-08-01 01:31:18,799 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 436 in batch 3\n2025-08-01 01:31:18,799 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 436 in batch 3\n2025-08-01 01:31:18,800 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 437 in batch 3\n2025-08-01 01:31:18,800 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 437 in batch 3\n2025-08-01 01:31:18,800 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 438 in batch 3\n2025-08-01 01:31:18,800 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 438 in batch 3\n2025-08-01 01:31:18,801 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 439 in batch 3\n2025-08-01 01:31:18,801 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 439 in batch 3\n2025-08-01 01:31:18,801 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 440 in batch 3\n2025-08-01 01:31:18,801 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 440 in batch 3\n2025-08-01 01:31:18,801 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 441 in batch 3\n2025-08-01 01:31:18,802 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 441 in batch 3\n2025-08-01 01:31:18,802 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 442 in batch 3\n2025-08-01 01:31:18,802 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 442 in batch 3\n2025-08-01 01:31:18,802 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 443 in batch 3\n2025-08-01 01:31:18,802 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 444 in batch 3\n2025-08-01 01:31:18,803 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 444 in batch 3\n2025-08-01 01:31:18,803 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 445 in batch 3\n2025-08-01 01:31:18,803 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 445 in batch 3\n2025-08-01 01:31:18,803 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 446 in batch 3\n2025-08-01 01:31:18,803 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 446 in batch 3\n2025-08-01 01:31:18,804 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 447 in batch 3\n2025-08-01 01:31:18,804 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 447 in batch 3\n2025-08-01 01:31:18,805 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 448 in batch 3\n2025-08-01 01:31:18,805 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 448 in batch 3\n2025-08-01 01:31:18,806 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 449 in batch 3\n2025-08-01 01:31:18,806 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 449 in batch 3\n2025-08-01 01:31:18,807 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 450 in batch 3\n2025-08-01 01:31:18,807 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 450 in batch 3\n2025-08-01 01:31:18,807 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 451 in batch 3\n2025-08-01 01:31:18,807 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 451 in batch 3\n2025-08-01 01:31:18,808 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 452 in batch 3\n2025-08-01 01:31:18,808 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 452 in batch 3\n2025-08-01 01:31:18,809 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 453 in batch 3\n2025-08-01 01:31:18,809 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 453 in batch 3\n2025-08-01 01:31:18,809 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 454 in batch 3\n2025-08-01 01:31:18,810 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 454 in batch 3\n2025-08-01 01:31:18,810 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 456 in batch 3\n2025-08-01 01:31:18,810 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 457 in batch 3\n2025-08-01 01:31:18,810 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 457 in batch 3\n2025-08-01 01:31:18,811 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 458 in batch 3\n2025-08-01 01:31:18,811 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 458 in batch 3\n2025-08-01 01:31:18,811 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 459 in batch 3\n2025-08-01 01:31:18,812 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 459 in batch 3\n2025-08-01 01:31:18,812 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 460 in batch 3\n2025-08-01 01:31:18,812 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 460 in batch 3\n2025-08-01 01:31:18,813 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 461 in batch 3\n2025-08-01 01:31:18,813 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 461 in batch 3\n2025-08-01 01:31:18,813 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 462 in batch 3\n2025-08-01 01:31:18,813 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 463 in batch 3\n2025-08-01 01:31:18,813 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 463 in batch 3\n2025-08-01 01:31:18,814 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 464 in batch 3\n2025-08-01 01:31:18,814 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 464 in batch 3\n2025-08-01 01:31:18,814 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 465 in batch 3\n2025-08-01 01:31:18,814 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 466 in batch 3\n2025-08-01 01:31:18,814 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 466 in batch 3\n2025-08-01 01:31:18,815 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 467 in batch 3\n2025-08-01 01:31:18,815 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 467 in batch 3\n2025-08-01 01:31:18,815 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 468 in batch 3\n2025-08-01 01:31:18,815 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 468 in batch 3\n2025-08-01 01:31:18,815 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 469 in batch 3\n2025-08-01 01:31:18,816 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 469 in batch 3\n2025-08-01 01:31:18,817 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 470 in batch 3\n2025-08-01 01:31:18,818 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 470 in batch 3\n2025-08-01 01:31:18,819 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 471 in batch 3\n2025-08-01 01:31:18,819 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 471 in batch 3\n2025-08-01 01:31:18,820 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 472 in batch 3\n2025-08-01 01:31:18,820 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 472 in batch 3\n2025-08-01 01:31:18,820 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 473 in batch 3\n2025-08-01 01:31:18,820 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 473 in batch 3\n2025-08-01 01:31:18,821 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 476 in batch 3\n2025-08-01 01:31:18,821 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 476 in batch 3\n2025-08-01 01:31:18,821 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 479 in batch 3\n2025-08-01 01:31:18,821 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 480 in batch 3\n2025-08-01 01:31:18,822 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 482 in batch 3\n2025-08-01 01:31:18,822 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 482 in batch 3\n2025-08-01 01:31:18,822 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 483 in batch 3\n2025-08-01 01:31:18,822 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 483 in batch 3\n2025-08-01 01:31:18,823 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 484 in batch 3\n2025-08-01 01:31:18,823 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 484 in batch 3\n2025-08-01 01:31:18,823 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 485 in batch 3\n2025-08-01 01:31:18,823 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 485 in batch 3\n2025-08-01 01:31:18,823 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 486 in batch 3\n2025-08-01 01:31:18,824 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 486 in batch 3\n2025-08-01 01:31:18,824 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 487 in batch 3\n2025-08-01 01:31:18,824 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 487 in batch 3\n2025-08-01 01:31:18,824 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 488 in batch 3\n2025-08-01 01:31:18,825 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 489 in batch 3\n2025-08-01 01:31:18,826 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 489 in batch 3\n2025-08-01 01:31:18,826 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 490 in batch 3\n2025-08-01 01:31:18,826 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 490 in batch 3\n2025-08-01 01:31:18,826 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 491 in batch 3\n2025-08-01 01:31:18,827 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 491 in batch 3\n2025-08-01 01:31:18,827 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 492 in batch 3\n2025-08-01 01:31:18,827 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 492 in batch 3\n2025-08-01 01:31:18,827 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 493 in batch 3\n2025-08-01 01:31:18,827 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 493 in batch 3\n2025-08-01 01:31:18,828 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 494 in batch 3\n2025-08-01 01:31:18,828 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 494 in batch 3\n2025-08-01 01:31:18,828 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 495 in batch 3\n2025-08-01 01:31:18,828 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 495 in batch 3\n2025-08-01 01:31:18,828 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 496 in batch 3\n2025-08-01 01:31:18,829 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 496 in batch 3\n2025-08-01 01:31:18,829 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 497 in batch 3\n2025-08-01 01:31:18,829 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 497 in batch 3\n2025-08-01 01:31:18,829 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 498 in batch 3\n2025-08-01 01:31:18,830 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 498 in batch 3\n2025-08-01 01:31:18,830 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 499 in batch 3\n2025-08-01 01:31:18,831 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 499 in batch 3\n2025-08-01 01:31:18,831 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 500 in batch 3\n2025-08-01 01:31:18,831 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 500 in batch 3\n2025-08-01 01:31:18,832 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 501 in batch 3\n2025-08-01 01:31:18,832 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 501 in batch 3\n2025-08-01 01:31:18,832 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 502 in batch 3\n2025-08-01 01:31:18,833 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 502 in batch 3\n2025-08-01 01:31:18,833 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 503 in batch 3\n2025-08-01 01:31:18,833 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 503 in batch 3\n2025-08-01 01:31:18,833 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 504 in batch 3\n2025-08-01 01:31:18,834 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 504 in batch 3\n2025-08-01 01:31:18,834 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 505 in batch 3\n2025-08-01 01:31:18,834 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 505 in batch 3\n2025-08-01 01:31:18,834 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 506 in batch 3\n2025-08-01 01:31:18,835 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 506 in batch 3\n2025-08-01 01:31:18,835 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 507 in batch 3\n2025-08-01 01:31:18,835 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 507 in batch 3\n2025-08-01 01:31:18,835 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 508 in batch 3\n2025-08-01 01:31:18,835 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 508 in batch 3\n2025-08-01 01:31:18,836 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 509 in batch 3\n2025-08-01 01:31:18,836 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 509 in batch 3\n2025-08-01 01:31:18,836 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 510 in batch 3\n2025-08-01 01:31:18,836 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 510 in batch 3\n2025-08-01 01:31:18,837 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 511 in batch 3\n2025-08-01 01:31:18,837 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 512 in batch 3\n2025-08-01 01:31:18,837 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 512 in batch 3\n2025-08-01 01:31:18,837 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 513 in batch 3\n2025-08-01 01:31:18,838 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 514 in batch 3\n2025-08-01 01:31:18,838 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 514 in batch 3\n2025-08-01 01:31:18,838 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 515 in batch 3\n2025-08-01 01:31:18,839 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 515 in batch 3\n2025-08-01 01:31:18,839 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 516 in batch 3\n2025-08-01 01:31:18,839 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 516 in batch 3\n2025-08-01 01:31:18,839 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 517 in batch 3\n2025-08-01 01:31:18,840 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 517 in batch 3\n2025-08-01 01:31:18,840 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 518 in batch 3\n2025-08-01 01:31:18,841 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 518 in batch 3\n2025-08-01 01:31:18,841 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 519 in batch 3\n2025-08-01 01:31:18,841 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 519 in batch 3\n2025-08-01 01:31:18,842 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 520 in batch 3\n2025-08-01 01:31:18,842 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 520 in batch 3\n2025-08-01 01:31:18,842 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 521 in batch 3\n2025-08-01 01:31:18,843 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 521 in batch 3\n2025-08-01 01:31:18,843 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 522 in batch 3\n2025-08-01 01:31:18,843 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 522 in batch 3\n2025-08-01 01:31:18,844 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 523 in batch 3\n2025-08-01 01:31:18,844 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 523 in batch 3\n2025-08-01 01:31:18,845 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 524 in batch 3\n2025-08-01 01:31:18,845 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 524 in batch 3\n2025-08-01 01:31:18,845 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 525 in batch 3\n2025-08-01 01:31:18,846 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 525 in batch 3\n2025-08-01 01:31:18,846 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 526 in batch 3\n2025-08-01 01:31:18,847 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 526 in batch 3\n2025-08-01 01:31:18,847 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 527 in batch 3\n2025-08-01 01:31:18,848 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 527 in batch 3\n2025-08-01 01:31:18,848 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 528 in batch 3\n2025-08-01 01:31:18,848 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 528 in batch 3\n2025-08-01 01:31:18,848 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 529 in batch 3\n2025-08-01 01:31:18,849 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 529 in batch 3\n2025-08-01 01:31:18,849 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 530 in batch 3\n2025-08-01 01:31:18,849 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 530 in batch 3\n2025-08-01 01:31:18,849 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 531 in batch 3\n2025-08-01 01:31:18,850 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 531 in batch 3\n2025-08-01 01:31:18,850 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 532 in batch 3\n2025-08-01 01:31:18,850 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 532 in batch 3\n2025-08-01 01:31:18,850 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 533 in batch 3\n2025-08-01 01:31:18,851 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 533 in batch 3\n2025-08-01 01:31:18,851 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 534 in batch 3\n2025-08-01 01:31:18,851 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 534 in batch 3\n2025-08-01 01:31:18,852 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 535 in batch 3\n2025-08-01 01:31:18,852 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 535 in batch 3\n2025-08-01 01:31:18,852 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 537 in batch 3\n2025-08-01 01:31:18,852 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 537 in batch 3\n2025-08-01 01:31:18,853 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 557 in batch 3\n2025-08-01 01:31:18,853 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 557 in batch 3\n2025-08-01 01:31:18,853 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 558 in batch 3\n2025-08-01 01:31:18,853 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 558 in batch 3\n2025-08-01 01:31:18,854 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 559 in batch 3\n2025-08-01 01:31:18,854 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 559 in batch 3\n2025-08-01 01:31:18,854 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 560 in batch 3\n2025-08-01 01:31:18,854 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 560 in batch 3\n2025-08-01 01:31:18,855 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 561 in batch 3\n2025-08-01 01:31:18,855 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 561 in batch 3\n2025-08-01 01:31:18,855 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 562 in batch 3\n2025-08-01 01:31:18,855 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 562 in batch 3\n2025-08-01 01:31:18,856 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 563 in batch 3\n2025-08-01 01:31:18,856 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 564 in batch 3\n2025-08-01 01:31:18,856 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 564 in batch 3\n2025-08-01 01:31:18,857 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 565 in batch 3\n2025-08-01 01:31:18,857 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 565 in batch 3\n2025-08-01 01:31:18,858 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 566 in batch 3\n2025-08-01 01:31:18,859 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 566 in batch 3\n2025-08-01 01:31:18,859 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 567 in batch 3\n2025-08-01 01:31:18,860 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 567 in batch 3\n2025-08-01 01:31:18,861 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 568 in batch 3\n2025-08-01 01:31:18,861 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 568 in batch 3\n2025-08-01 01:31:18,861 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 569 in batch 3\n2025-08-01 01:31:18,861 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 570 in batch 3\n2025-08-01 01:31:18,862 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 570 in batch 3\n2025-08-01 01:31:18,862 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 571 in batch 3\n2025-08-01 01:31:18,863 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 571 in batch 3\n2025-08-01 01:31:18,863 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 572 in batch 3\n2025-08-01 01:31:18,863 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 572 in batch 3\n2025-08-01 01:31:18,863 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 573 in batch 3\n2025-08-01 01:31:18,864 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 573 in batch 3\n2025-08-01 01:31:18,864 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 574 in batch 3\n2025-08-01 01:31:18,864 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 575 in batch 3\n2025-08-01 01:31:18,865 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 575 in batch 3\n2025-08-01 01:31:18,865 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 576 in batch 3\n2025-08-01 01:31:18,865 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 576 in batch 3\n2025-08-01 01:31:18,865 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 577 in batch 3\n2025-08-01 01:31:18,865 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 577 in batch 3\n2025-08-01 01:31:18,866 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 578 in batch 3\n2025-08-01 01:31:18,866 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 578 in batch 3\n2025-08-01 01:31:18,866 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 579 in batch 3\n2025-08-01 01:31:18,866 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 579 in batch 3\n2025-08-01 01:31:18,867 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 580 in batch 3\n2025-08-01 01:31:18,868 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 580 in batch 3\n2025-08-01 01:31:18,868 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 581 in batch 3\n2025-08-01 01:31:18,868 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 581 in batch 3\n2025-08-01 01:31:18,868 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 582 in batch 3\n2025-08-01 01:31:18,869 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 582 in batch 3\n2025-08-01 01:31:18,870 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 583 in batch 3\n2025-08-01 01:31:18,871 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 583 in batch 3\n2025-08-01 01:31:18,872 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 584 in batch 3\n2025-08-01 01:31:18,872 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 584 in batch 3\n2025-08-01 01:31:18,872 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 585 in batch 3\n2025-08-01 01:31:18,873 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 585 in batch 3\n2025-08-01 01:31:18,873 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 586 in batch 3\n2025-08-01 01:31:18,873 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 586 in batch 3\n2025-08-01 01:31:18,874 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 587 in batch 3\n2025-08-01 01:31:18,875 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 587 in batch 3\n2025-08-01 01:31:18,875 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 588 in batch 3\n2025-08-01 01:31:18,875 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 588 in batch 3\n2025-08-01 01:31:18,875 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 589 in batch 3\n2025-08-01 01:31:18,876 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 589 in batch 3\n2025-08-01 01:31:18,876 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 590 in batch 3\n2025-08-01 01:31:18,877 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 590 in batch 3\n2025-08-01 01:31:18,877 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 591 in batch 3\n2025-08-01 01:31:18,877 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 591 in batch 3\n2025-08-01 01:31:18,878 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 592 in batch 3\n2025-08-01 01:31:18,878 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 592 in batch 3\n2025-08-01 01:31:18,878 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 593 in batch 3\n2025-08-01 01:31:18,879 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 593 in batch 3\n2025-08-01 01:31:18,879 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 594 in batch 3\n2025-08-01 01:31:18,879 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 594 in batch 3\n2025-08-01 01:31:18,879 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 595 in batch 3\n2025-08-01 01:31:18,879 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 595 in batch 3\n2025-08-01 01:31:18,880 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 596 in batch 3\n2025-08-01 01:31:18,880 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 596 in batch 3\n2025-08-01 01:31:18,880 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 597 in batch 3\n2025-08-01 01:31:18,880 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 597 in batch 3\n2025-08-01 01:31:18,881 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 613 in batch 3\n2025-08-01 01:31:18,881 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 621 in batch 3\n2025-08-01 01:31:18,881 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 622 in batch 3\n2025-08-01 01:31:18,882 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 623 in batch 3\n2025-08-01 01:31:18,882 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 624 in batch 3\n2025-08-01 01:31:18,884 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 624 in batch 3\n2025-08-01 01:31:18,884 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 625 in batch 3\n2025-08-01 01:31:18,885 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 625 in batch 3\n2025-08-01 01:31:18,885 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 626 in batch 3\n2025-08-01 01:31:18,886 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 626 in batch 3\n2025-08-01 01:31:18,887 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 627 in batch 3\n2025-08-01 01:31:18,887 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 627 in batch 3\n2025-08-01 01:31:18,888 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 628 in batch 3\n2025-08-01 01:31:18,888 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 628 in batch 3\n2025-08-01 01:31:18,888 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 629 in batch 3\n2025-08-01 01:31:18,889 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 629 in batch 3\n2025-08-01 01:31:18,889 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 630 in batch 3\n2025-08-01 01:31:18,889 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 630 in batch 3\n2025-08-01 01:31:18,890 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 631 in batch 3\n2025-08-01 01:31:18,890 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 631 in batch 3\n2025-08-01 01:31:18,891 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 632 in batch 3\n2025-08-01 01:31:18,891 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 632 in batch 3\n2025-08-01 01:31:18,891 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 633 in batch 3\n2025-08-01 01:31:18,891 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 633 in batch 3\n2025-08-01 01:31:18,892 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 634 in batch 3\n2025-08-01 01:31:18,892 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 634 in batch 3\n2025-08-01 01:31:18,892 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 635 in batch 3\n2025-08-01 01:31:18,892 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 635 in batch 3\n2025-08-01 01:31:18,892 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 636 in batch 3\n2025-08-01 01:31:18,893 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 636 in batch 3\n2025-08-01 01:31:18,893 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 637 in batch 3\n2025-08-01 01:31:18,893 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 637 in batch 3\n2025-08-01 01:31:18,895 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 638 in batch 3\n2025-08-01 01:31:18,895 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 638 in batch 3\n2025-08-01 01:31:18,895 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 639 in batch 3\n2025-08-01 01:31:18,896 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 639 in batch 3\n2025-08-01 01:31:18,897 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 640 in batch 3\n2025-08-01 01:31:18,897 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 640 in batch 3\n2025-08-01 01:31:18,897 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 641 in batch 3\n2025-08-01 01:31:18,897 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 641 in batch 3\n2025-08-01 01:31:18,898 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 642 in batch 3\n2025-08-01 01:31:18,898 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 642 in batch 3\n2025-08-01 01:31:18,898 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 643 in batch 3\n2025-08-01 01:31:18,898 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 643 in batch 3\n2025-08-01 01:31:18,899 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 644 in batch 3\n2025-08-01 01:31:18,899 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 644 in batch 3\n2025-08-01 01:31:18,899 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 645 in batch 3\n2025-08-01 01:31:18,899 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 645 in batch 3\n2025-08-01 01:31:18,900 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 646 in batch 3\n2025-08-01 01:31:18,900 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 646 in batch 3\n2025-08-01 01:31:18,900 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 647 in batch 3\n2025-08-01 01:31:18,901 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 647 in batch 3\n2025-08-01 01:31:18,901 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 648 in batch 3\n2025-08-01 01:31:18,901 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 648 in batch 3\n2025-08-01 01:31:18,901 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 649 in batch 3\n2025-08-01 01:31:18,902 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 649 in batch 3\n2025-08-01 01:31:18,902 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 650 in batch 3\n2025-08-01 01:31:18,902 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 650 in batch 3\n2025-08-01 01:31:18,903 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 651 in batch 3\n2025-08-01 01:31:18,903 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 651 in batch 3\n2025-08-01 01:31:18,903 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 652 in batch 3\n2025-08-01 01:31:18,903 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 652 in batch 3\n2025-08-01 01:31:18,903 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 653 in batch 3\n2025-08-01 01:31:18,904 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 653 in batch 3\n2025-08-01 01:31:18,904 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 654 in batch 3\n2025-08-01 01:31:18,904 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 654 in batch 3\n2025-08-01 01:31:18,904 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 655 in batch 3\n2025-08-01 01:31:18,904 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 655 in batch 3\n2025-08-01 01:31:18,905 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 656 in batch 3\n2025-08-01 01:31:18,905 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 657 in batch 3\n2025-08-01 01:31:18,905 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 657 in batch 3\n2025-08-01 01:31:18,905 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 658 in batch 3\n2025-08-01 01:31:18,906 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 658 in batch 3\n2025-08-01 01:31:18,906 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 659 in batch 3\n2025-08-01 01:31:18,906 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 659 in batch 3\n2025-08-01 01:31:18,906 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 660 in batch 3\n2025-08-01 01:31:18,906 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 660 in batch 3\n2025-08-01 01:31:18,907 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 661 in batch 3\n2025-08-01 01:31:18,907 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 661 in batch 3\n2025-08-01 01:31:18,907 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 662 in batch 3\n2025-08-01 01:31:18,907 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 662 in batch 3\n2025-08-01 01:31:18,908 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 663 in batch 3\n2025-08-01 01:31:18,908 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 663 in batch 3\n2025-08-01 01:31:18,908 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 664 in batch 3\n2025-08-01 01:31:18,908 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 664 in batch 3\n2025-08-01 01:31:18,908 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 665 in batch 3\n2025-08-01 01:31:18,909 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 665 in batch 3\n2025-08-01 01:31:18,909 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 666 in batch 3\n2025-08-01 01:31:18,909 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 666 in batch 3\n2025-08-01 01:31:18,909 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 667 in batch 3\n2025-08-01 01:31:18,909 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 667 in batch 3\n2025-08-01 01:31:18,911 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 668 in batch 3\n2025-08-01 01:31:18,913 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 668 in batch 3\n2025-08-01 01:31:18,913 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 669 in batch 3\n2025-08-01 01:31:18,914 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 669 in batch 3\n2025-08-01 01:31:18,914 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 670 in batch 3\n2025-08-01 01:31:18,914 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 670 in batch 3\n2025-08-01 01:31:18,915 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 671 in batch 3\n2025-08-01 01:31:18,915 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 671 in batch 3\n2025-08-01 01:31:18,915 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 672 in batch 3\n2025-08-01 01:31:18,916 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 672 in batch 3\n2025-08-01 01:31:18,916 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 673 in batch 3\n2025-08-01 01:31:18,916 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 673 in batch 3\n2025-08-01 01:31:18,916 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 674 in batch 3\n2025-08-01 01:31:18,917 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 674 in batch 3\n2025-08-01 01:31:18,917 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 675 in batch 3\n2025-08-01 01:31:18,917 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 676 in batch 3\n2025-08-01 01:31:18,917 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 677 in batch 3\n2025-08-01 01:31:18,917 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 678 in batch 3\n2025-08-01 01:31:18,918 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 679 in batch 3\n2025-08-01 01:31:18,918 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 680 in batch 3\n2025-08-01 01:31:18,918 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 683 in batch 3\n2025-08-01 01:31:18,920 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 684 in batch 3\n2025-08-01 01:31:18,921 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 685 in batch 3\n2025-08-01 01:31:18,922 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 686 in batch 3\n2025-08-01 01:31:18,922 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 686 in batch 3\n2025-08-01 01:31:18,922 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 687 in batch 3\n2025-08-01 01:31:18,923 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 687 in batch 3\n2025-08-01 01:31:18,924 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 688 in batch 3\n2025-08-01 01:31:18,925 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 688 in batch 3\n2025-08-01 01:31:18,925 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 689 in batch 3\n2025-08-01 01:31:18,926 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 689 in batch 3\n2025-08-01 01:31:18,926 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 690 in batch 3\n2025-08-01 01:31:18,927 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 690 in batch 3\n2025-08-01 01:31:18,927 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 691 in batch 3\n2025-08-01 01:31:18,927 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 691 in batch 3\n2025-08-01 01:31:18,927 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 692 in batch 3\n2025-08-01 01:31:18,928 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 692 in batch 3\n2025-08-01 01:31:18,928 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 693 in batch 3\n2025-08-01 01:31:18,928 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 693 in batch 3\n2025-08-01 01:31:18,928 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 694 in batch 3\n2025-08-01 01:31:18,928 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 694 in batch 3\n2025-08-01 01:31:18,929 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 695 in batch 3\n2025-08-01 01:31:18,929 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 695 in batch 3\n2025-08-01 01:31:18,930 | WARNING | pyMut.annotate.actionable_mutation | Gene does not exist for variant at index 696 in batch 3\n2025-08-01 01:31:18,930 | WARNING | pyMut.annotate.actionable_mutation | Unknown oncogenicity for variant at index 696 in batch 3\n2025-08-01 01:31:18,954 | INFO | pyMut.annotate.actionable_mutation | Adding OncoKB annotations to self.data\n2025-08-01 01:31:19,204 | INFO | pyMut.annotate.actionable_mutation | OncoKB annotation completed successfully: 2091 variants annotated\n</pre> <pre>\nSample of MAF data after annotation:\n</pre> CHROM POS ID REF ALT QUAL FILTER TCGA-AB-2988 TCGA-AB-2869 TCGA-AB-3009 ... oncokb_variantSummary oncokb_tumorTypeSummary oncokb_prognosticSummary oncokb_diagnosticSummary oncokb_diagnosticImplications oncokb_prognosticImplications oncokb_treatments oncokb_dataVersion oncokb_lastUpdate oncokb_vus 0 chr9 100077177 . T C . . T|T T|T T|T ... [] [] [] v5.0 07/28/2025 False 1 chr9 100085148 . G A . . G|G G|G G|G ... [] [] [] v5.0 07/28/2025 False 2 chr9 100971322 . A C . . A|A A|A A|A ... [] [] [] v5.0 07/28/2025 False 3 chr9 104086335 . C T . . C|C C|C C|C ... [] [] [] v5.0 07/28/2025 False 4 chr9 104124840 . G A . . G|A G|G G|G ... [] [] [] v5.0 07/28/2025 False <p>5 rows \u00d7 234 columns</p> <pre>\nMAF File (GRCh37) - OncoKB annotation statistics:\n  oncokb_highestSensitiveLevel: 76 variants\n  oncokb_highestResistanceLevel: 15 variants\n  oncokb_highestDiagnosticImplicationLevel: 177 variants\n  oncokb_highestPrognosticImplicationLevel: 119 variants\n  oncokb_otherSignificantSensitiveLevels: 2091 variants\n  oncokb_otherSignificantResistanceLevels: 2091 variants\n  oncokb_hotspot: 2091 variants\n  oncokb_geneSummary: 2091 variants\n  oncokb_variantSummary: 2091 variants\n  oncokb_tumorTypeSummary: 2091 variants\n  oncokb_prognosticSummary: 2091 variants\n  oncokb_diagnosticSummary: 2091 variants\n  oncokb_diagnosticImplications: 2091 variants\n  oncokb_prognosticImplications: 2091 variants\n  oncokb_treatments: 2091 variants\n  oncokb_dataVersion: 2091 variants\n  oncokb_lastUpdate: 2091 variants\n  oncokb_vus: 2091 variants\n</pre> In\u00a0[6]: Copied! <pre>print(\"\\n\" + \"=\" * 80)\nprint(\"CONCLUSION\")\nprint(\"=\" * 80)\n\n# Check if the MAF dataset was annotated\nmaf_oncokb_columns = [col for col in maf_py_mut.data.columns if col.startswith('oncokb_')]\n\nif maf_oncokb_columns:\n    # Show final annotation statistics\n    maf_annotation_counts = {\n        'Sensitivity': maf_py_mut.data['oncokb_highestSensitiveLevel'].notna().sum() if 'oncokb_highestSensitiveLevel' in maf_py_mut.data.columns else 0,\n        'Resistance': maf_py_mut.data['oncokb_highestResistanceLevel'].notna().sum() if 'oncokb_highestResistanceLevel' in maf_py_mut.data.columns else 0,\n        'Diagnostic': maf_py_mut.data['oncokb_highestDiagnosticImplicationLevel'].notna().sum() if 'oncokb_highestDiagnosticImplicationLevel' in maf_py_mut.data.columns else 0,\n        'Prognostic': maf_py_mut.data['oncokb_highestPrognosticImplicationLevel'].notna().sum() if 'oncokb_highestPrognosticImplicationLevel' in maf_py_mut.data.columns else 0,\n        'Hotspot': maf_py_mut.data['oncokb_hotspot'].sum() if 'oncokb_hotspot' in maf_py_mut.data.columns else 0,\n        'VUS': maf_py_mut.data['oncokb_vus'].sum() if 'oncokb_vus' in maf_py_mut.data.columns else 0\n    }\n    \n    # Create a DataFrame for final results\n    results_df = pd.DataFrame({\n        'MAF (GRCh37)': maf_annotation_counts\n    })\n    \n    print(\"Final OncoKB annotation results for MAF file:\")\n    display(results_df)\n    \n    # Visualize results\n    results_df.plot(kind='bar', figsize=(10, 6))\n    plt.title('OncoKB Annotations for MAF File (GRCh37)')\n    plt.xlabel('Annotation Type')\n    plt.ylabel('Number of Variants')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.show()\n    \n    # Calculate annotation rate\n    maf_total = len(maf_py_mut.data)\n    maf_annotated = maf_py_mut.data[maf_py_mut.data['oncokb_highestSensitiveLevel'].notna() | \n                                    maf_py_mut.data['oncokb_highestResistanceLevel'].notna() | \n                                    maf_py_mut.data['oncokb_highestDiagnosticImplicationLevel'].notna() | \n                                    maf_py_mut.data['oncokb_highestPrognosticImplicationLevel'].notna()].shape[0] if all(col in maf_py_mut.data.columns for col in ['oncokb_highestSensitiveLevel', 'oncokb_highestResistanceLevel', 'oncokb_highestDiagnosticImplicationLevel', 'oncokb_highestPrognosticImplicationLevel']) else 0\n    \n    print(f\"\\nAnnotation rate: {maf_annotated}/{maf_total} variants annotated ({maf_annotated/maf_total*100:.2f}%)\")\n    \n    print(\"\\nSUMMARY:\")\n    print(\"This notebook successfully demonstrated how to:\")\n    print(\"1. Load OncoKB API token from .env file\")\n    print(\"2. Load a MAF file with GRCh37 assembly\")\n    print(\"3. Annotate variants with OncoKB actionable mutation data\")\n    print(\"4. Display annotation statistics and results\")\n    print(\"\\nThe OncoKB annotations provide valuable information about the clinical actionability of variants.\")\nelse:\n    print(\"MAF dataset was not annotated successfully. Please check your OncoKB API token and try again.\")\n</pre> print(\"\\n\" + \"=\" * 80) print(\"CONCLUSION\") print(\"=\" * 80)  # Check if the MAF dataset was annotated maf_oncokb_columns = [col for col in maf_py_mut.data.columns if col.startswith('oncokb_')]  if maf_oncokb_columns:     # Show final annotation statistics     maf_annotation_counts = {         'Sensitivity': maf_py_mut.data['oncokb_highestSensitiveLevel'].notna().sum() if 'oncokb_highestSensitiveLevel' in maf_py_mut.data.columns else 0,         'Resistance': maf_py_mut.data['oncokb_highestResistanceLevel'].notna().sum() if 'oncokb_highestResistanceLevel' in maf_py_mut.data.columns else 0,         'Diagnostic': maf_py_mut.data['oncokb_highestDiagnosticImplicationLevel'].notna().sum() if 'oncokb_highestDiagnosticImplicationLevel' in maf_py_mut.data.columns else 0,         'Prognostic': maf_py_mut.data['oncokb_highestPrognosticImplicationLevel'].notna().sum() if 'oncokb_highestPrognosticImplicationLevel' in maf_py_mut.data.columns else 0,         'Hotspot': maf_py_mut.data['oncokb_hotspot'].sum() if 'oncokb_hotspot' in maf_py_mut.data.columns else 0,         'VUS': maf_py_mut.data['oncokb_vus'].sum() if 'oncokb_vus' in maf_py_mut.data.columns else 0     }          # Create a DataFrame for final results     results_df = pd.DataFrame({         'MAF (GRCh37)': maf_annotation_counts     })          print(\"Final OncoKB annotation results for MAF file:\")     display(results_df)          # Visualize results     results_df.plot(kind='bar', figsize=(10, 6))     plt.title('OncoKB Annotations for MAF File (GRCh37)')     plt.xlabel('Annotation Type')     plt.ylabel('Number of Variants')     plt.xticks(rotation=45)     plt.tight_layout()     plt.show()          # Calculate annotation rate     maf_total = len(maf_py_mut.data)     maf_annotated = maf_py_mut.data[maf_py_mut.data['oncokb_highestSensitiveLevel'].notna() |                                      maf_py_mut.data['oncokb_highestResistanceLevel'].notna() |                                      maf_py_mut.data['oncokb_highestDiagnosticImplicationLevel'].notna() |                                      maf_py_mut.data['oncokb_highestPrognosticImplicationLevel'].notna()].shape[0] if all(col in maf_py_mut.data.columns for col in ['oncokb_highestSensitiveLevel', 'oncokb_highestResistanceLevel', 'oncokb_highestDiagnosticImplicationLevel', 'oncokb_highestPrognosticImplicationLevel']) else 0          print(f\"\\nAnnotation rate: {maf_annotated}/{maf_total} variants annotated ({maf_annotated/maf_total*100:.2f}%)\")          print(\"\\nSUMMARY:\")     print(\"This notebook successfully demonstrated how to:\")     print(\"1. Load OncoKB API token from .env file\")     print(\"2. Load a MAF file with GRCh37 assembly\")     print(\"3. Annotate variants with OncoKB actionable mutation data\")     print(\"4. Display annotation statistics and results\")     print(\"\\nThe OncoKB annotations provide valuable information about the clinical actionability of variants.\") else:     print(\"MAF dataset was not annotated successfully. Please check your OncoKB API token and try again.\") <pre>\n================================================================================\nCONCLUSION\n================================================================================\nFinal OncoKB annotation results for MAF file:\n</pre> MAF (GRCh37) Sensitivity 76 Resistance 15 Diagnostic 177 Prognostic 119 Hotspot 91 VUS 25 <pre>\nAnnotation rate: 207/2091 variants annotated (9.90%)\n\nSUMMARY:\nThis notebook successfully demonstrated how to:\n1. Load OncoKB API token from .env file\n2. Load a MAF file with GRCh37 assembly\n3. Annotate variants with OncoKB actionable mutation data\n4. Display annotation statistics and results\n\nThe OncoKB annotations provide valuable information about the clinical actionability of variants.\n</pre>"},{"location":"examples/annotation/actionable_mutation_annotation/#oncokb-annotation-demo","title":"OncoKB Annotation Demo\u00b6","text":"<p>This notebook demonstrates how to use the <code>export_oncokb_input</code> method to annotate genomic variants with OncoKB data. We'll use two different input files:</p> <ol> <li>A VCF file with GRCh38 assembly: <code>subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased_vep_protein_gene_variant_class.vcf</code></li> <li>A MAF file with GRCh37 assembly: <code>tcga_laml.maf.gz</code></li> </ol> <p>The notebook will show how to load these files, annotate them with OncoKB data, and display the resulting annotations.</p>"},{"location":"examples/annotation/actionable_mutation_annotation/#get-oncokb-api-token","title":"Get OncoKB API Token\u00b6","text":"<p>We need an OncoKB API token to use the annotation service. We'll try to read it from a .env file.</p>"},{"location":"examples/annotation/actionable_mutation_annotation/#monitor-api-requests","title":"Monitor API Requests\u00b6","text":"<p>We'll add a monkey patch to monitor API requests and responses for debugging purposes.</p>"},{"location":"examples/annotation/actionable_mutation_annotation/#process-maf-file-grch37","title":"Process MAF File (GRCh37)\u00b6","text":"<p>Now, we'll load and annotate the MAF file with GRCh37 assembly.</p>"},{"location":"examples/annotation/actionable_mutation_annotation/#annotate-maf-data-with-oncokb","title":"Annotate MAF data with OncoKB\u00b6","text":""},{"location":"examples/annotation/actionable_mutation_annotation/#conclusion","title":"Conclusion\u00b6","text":"<p>This notebook has demonstrated how to use the OncoKB annotation functionality to annotate genomic variants from a MAF file.</p>"},{"location":"examples/annotation/cosmic_cancer_annotation/","title":"COSMIC Cancer Annotation Example","text":"In\u00a0[1]: Copied! <pre>from pathlib import Path\n\n# Import pyMut functions\nfrom pyMut.input import read_maf, read_vcf\n\n# Define the specific columns we want to display from knownCancer annotation\nknowncancer_columns = [\n    \"COSMIC_ROLE_IN_CANCER\",\n    \"COSMIC_TIER\",\n    \"OncoKB_Is Oncogene\",\n    \"OncoKB_Is Tumor Suppressor Gene\",\n    \"OncoKB_OncoKB Annotated\",\n    \"OncoKB_MSK-IMPACT\",\n    \"OncoKB_MSK-HEME\",\n    \"OncoKB_FOUNDATION ONE\",\n    \"OncoKB_FOUNDATION ONE HEME\",\n    \"OncoKB_Vogelstein\",\n    \"Is_Oncogene_any\"\n]\n\nprint(\"\u2713 Setup complete\")\n</pre> from pathlib import Path  # Import pyMut functions from pyMut.input import read_maf, read_vcf  # Define the specific columns we want to display from knownCancer annotation knowncancer_columns = [     \"COSMIC_ROLE_IN_CANCER\",     \"COSMIC_TIER\",     \"OncoKB_Is Oncogene\",     \"OncoKB_Is Tumor Suppressor Gene\",     \"OncoKB_OncoKB Annotated\",     \"OncoKB_MSK-IMPACT\",     \"OncoKB_MSK-HEME\",     \"OncoKB_FOUNDATION ONE\",     \"OncoKB_FOUNDATION ONE HEME\",     \"OncoKB_Vogelstein\",     \"Is_Oncogene_any\" ]  print(\"\u2713 Setup complete\")  <pre>\u2713 Setup complete\n</pre> In\u00a0[2]: Copied! <pre># Data file paths\nMAF_FILE = \"../../../src/pyMut/data/examples/MAF/tcga_laml_VEP_annotated.maf.gz\"\nVCF_FILE = \"../../../src/pyMut/data/examples/VCF/subset_50k_variants_vep_protein_gene_variant_class.vcf.gz\"\nCOSMIC_ANNOTATION = \"../../../src/pyMut/data/resources/COSMIC/Cosmic_CancerGeneCensus_Tsv_v102_GRCh38/Cosmic_CancerGeneCensus_v102_GRCh38.tsv.gz\"\nONCOKB_ANNOTATION = \"../../../src/pyMut/data/resources/OncoKb/cancerGeneList.tsv\"\n\n# Verify files exist\nfor file_path, name in [(MAF_FILE, \"MAF\"), (VCF_FILE, \"VCF\"), (COSMIC_ANNOTATION, \"COSMIC\"), (ONCOKB_ANNOTATION, \"OncoKB\")]:\n    if Path(file_path).exists():\n        print(f\"\u2713 {name} file found: {Path(file_path).name}\")\n    else:\n        print(f\"\u2717 {name} file not found: {file_path}\")\n</pre> # Data file paths MAF_FILE = \"../../../src/pyMut/data/examples/MAF/tcga_laml_VEP_annotated.maf.gz\" VCF_FILE = \"../../../src/pyMut/data/examples/VCF/subset_50k_variants_vep_protein_gene_variant_class.vcf.gz\" COSMIC_ANNOTATION = \"../../../src/pyMut/data/resources/COSMIC/Cosmic_CancerGeneCensus_Tsv_v102_GRCh38/Cosmic_CancerGeneCensus_v102_GRCh38.tsv.gz\" ONCOKB_ANNOTATION = \"../../../src/pyMut/data/resources/OncoKb/cancerGeneList.tsv\"  # Verify files exist for file_path, name in [(MAF_FILE, \"MAF\"), (VCF_FILE, \"VCF\"), (COSMIC_ANNOTATION, \"COSMIC\"), (ONCOKB_ANNOTATION, \"OncoKB\")]:     if Path(file_path).exists():         print(f\"\u2713 {name} file found: {Path(file_path).name}\")     else:         print(f\"\u2717 {name} file not found: {file_path}\")  <pre>\u2713 MAF file found: tcga_laml_VEP_annotated.maf.gz\n\u2713 VCF file found: subset_50k_variants_vep_protein_gene_variant_class.vcf.gz\n\u2713 COSMIC file found: Cosmic_CancerGeneCensus_v102_GRCh38.tsv.gz\n\u2713 OncoKB file found: cancerGeneList.tsv\n</pre> In\u00a0[3]: Copied! <pre># Load MAF data\nprint(\"Loading MAF data...\")\npy_mut_maf = read_maf(MAF_FILE,assembly=\"37\")\n\nprint(\"\\n\ud83d\udcca MAF Data Summary:\")\nprint(f\"   Shape: {py_mut_maf.data.shape}\")\nprint(f\"   Source: {py_mut_maf.metadata.source_format}\")\nprint(f\"   Unique genes: {py_mut_maf.data['Hugo_Symbol'].nunique()}\")\nprint(f\"   Unique samples: {py_mut_maf.data['Tumor_Sample_Barcode'].nunique()}\")\n\n# Show first few rows\nprint(\"\\n\ud83d\udccb First 3 rows:\")\ndisplay(py_mut_maf.data[['Hugo_Symbol', 'Variant_Classification', 'Tumor_Sample_Barcode']].head(3))\n</pre> # Load MAF data print(\"Loading MAF data...\") py_mut_maf = read_maf(MAF_FILE,assembly=\"37\")  print(\"\\n\ud83d\udcca MAF Data Summary:\") print(f\"   Shape: {py_mut_maf.data.shape}\") print(f\"   Source: {py_mut_maf.metadata.source_format}\") print(f\"   Unique genes: {py_mut_maf.data['Hugo_Symbol'].nunique()}\") print(f\"   Unique samples: {py_mut_maf.data['Tumor_Sample_Barcode'].nunique()}\")  # Show first few rows print(\"\\n\ud83d\udccb First 3 rows:\") display(py_mut_maf.data[['Hugo_Symbol', 'Variant_Classification', 'Tumor_Sample_Barcode']].head(3))  <pre>2025-08-01 01:20:21,027 | INFO | pyMut.input | Starting MAF reading: ../../../src/pyMut/data/examples/MAF/tcga_laml_VEP_annotated.maf.gz\n2025-08-01 01:20:21,031 | INFO | pyMut.input | Reading MAF with 'pyarrow' engine\u2026\n2025-08-01 01:20:21,051 | INFO | pyMut.input | Reading with 'pyarrow' completed.\n2025-08-01 01:20:21,058 | INFO | pyMut.input | Detected 193 unique samples.\n</pre> <pre>Loading MAF data...\n</pre> <pre>2025-08-01 01:20:21,148 | INFO | pyMut.input | Consolidating duplicate variants across samples...\n2025-08-01 01:20:21,162 | INFO | pyMut.input | Consolidating variants using vectorized operations...\n2025-08-01 01:21:15,156 | INFO | pyMut.input | Variant consolidation completed in 54.01 seconds\n2025-08-01 01:21:15,162 | INFO | pyMut.input | Consolidated 2207 rows into 2091 unique variants\n2025-08-01 01:21:15,171 | INFO | pyMut.input | Saving to cache: ../../../src/pyMut/data/examples/MAF/.pymut_cache/tcga_laml_VEP_annotated.maf_6e67e5a1df3d2694.parquet\n2025-08-01 01:21:15,231 | INFO | pyMut.input | MAF processed successfully: 2091 rows, 237 columns in 54.20 seconds\n</pre> <pre>\n\ud83d\udcca MAF Data Summary:\n   Shape: (2091, 237)\n   Source: MAF\n   Unique genes: 1611\n   Unique samples: 190\n\n\ud83d\udccb First 3 rows:\n</pre> Hugo_Symbol Variant_Classification Tumor_Sample_Barcode 0 KIAA1529 SILENT TCGA-AB-2886 1 KIAA1529 MISSENSE_MUTATION TCGA-AB-2917 2 TBC1D2 MISSENSE_MUTATION TCGA-AB-2841 In\u00a0[4]: Copied! <pre># Load VCF data\nprint(\"Loading VCF data...\")\npy_mut_vcf = read_vcf(VCF_FILE,assembly=\"38\")\n\nprint(\"\\n\ud83d\udcca VCF Data Summary:\")\nprint(f\"   Shape: {py_mut_vcf.data.shape}\")\nprint(f\"   Source: {py_mut_vcf.metadata.source_format}\")\nprint(f\"   Unique genes: {py_mut_vcf.data['Hugo_Symbol'].nunique()}\")\nprint(f\"   Chromosome: {py_mut_vcf.data['CHROM'].unique()[0]}\")\n\n# Show first few rows\nprint(\"\\n\ud83d\udccb First 3 rows:\")\ndisplay(py_mut_vcf.data[['Hugo_Symbol', 'CHROM', 'POS', 'REF', 'ALT', 'Variant_Classification']].head(3))\n</pre> # Load VCF data print(\"Loading VCF data...\") py_mut_vcf = read_vcf(VCF_FILE,assembly=\"38\")  print(\"\\n\ud83d\udcca VCF Data Summary:\") print(f\"   Shape: {py_mut_vcf.data.shape}\") print(f\"   Source: {py_mut_vcf.metadata.source_format}\") print(f\"   Unique genes: {py_mut_vcf.data['Hugo_Symbol'].nunique()}\") print(f\"   Chromosome: {py_mut_vcf.data['CHROM'].unique()[0]}\")  # Show first few rows print(\"\\n\ud83d\udccb First 3 rows:\") display(py_mut_vcf.data[['Hugo_Symbol', 'CHROM', 'POS', 'REF', 'ALT', 'Variant_Classification']].head(3))  <pre>2025-08-01 01:21:15,252 | INFO | pyMut.input | Starting optimized VCF reading: ../../../src/pyMut/data/examples/VCF/subset_50k_variants_vep_protein_gene_variant_class.vcf.gz\n2025-08-01 01:21:15,253 | INFO | pyMut.input | Reading VCF with pandas + pyarrow optimization...\n</pre> <pre>Loading VCF data...\n</pre> <pre>2025-08-01 01:21:27,468 | INFO | pyMut.input | Pandas reading completed.\n2025-08-01 01:21:27,498 | INFO | pyMut.input | Starting vectorized genotype conversion before INFO expansion...\n2025-08-01 01:23:51,282 | INFO | pyMut.input | GT conversion completed: 143.78 s\n2025-08-01 01:23:51,282 | INFO | pyMut.input | Expanding INFO column with vectorized operations...\n2025-08-01 01:23:57,835 | INFO | pyMut.input | Expanding VEP CSQ annotations into individual columns...\n2025-08-01 01:24:05,372 | INFO | pyMut.input | CSQ expanded into 31 VEP annotation columns in 7.54 s\n2025-08-01 01:24:05,373 | INFO | pyMut.input | Generating Hugo_Symbol column from VEP_SYMBOL and VEP_NEAREST...\n2025-08-01 01:24:05,401 | INFO | pyMut.input | Hugo_Symbol column generated in 0.03 s\n2025-08-01 01:24:05,404 | INFO | pyMut.input | Generating Variant_Classification from VEP_Consequence and VEP_VARIANT_CLASS...\n2025-08-01 01:24:10,510 | INFO | pyMut.input | Variant_Classification generated in 5.11 s\n2025-08-01 01:24:10,511 | INFO | pyMut.input | Generating Variant_Type from VEP_VARIANT_CLASS...\n2025-08-01 01:24:13,887 | INFO | pyMut.input | Variant_Type generated in 3.37 s\n2025-08-01 01:24:13,916 | INFO | pyMut.input | Using 2548 sample columns for output organization\n2025-08-01 01:24:16,923 | INFO | pyMut.input | Saving to cache: ../../../src/pyMut/data/examples/VCF/.pymut_cache/subset_50k_variants_vep_protein_gene_variant_class.vcf_70ff294aac35bdcb.parquet\n2025-08-01 01:24:24,596 | INFO | pyMut.input | VCF processed successfully: 50000 rows, 2601 columns in 189.34 seconds\n</pre> <pre>\n\ud83d\udcca VCF Data Summary:\n   Shape: (50000, 2601)\n   Source: VCF\n   Unique genes: 13\n   Chromosome: chr10\n\n\ud83d\udccb First 3 rows:\n</pre> Hugo_Symbol CHROM POS REF ALT Variant_Classification 0 TUBB8 chr10 11501 C A INTRON 1 TUBB8 chr10 36097 G A INTRON 2 TUBB8 chr10 45900 C T 3'FLANK In\u00a0[5]: Copied! <pre># Apply COSMIC annotation to MAF data\nprint(\"\ud83d\udd2c Applying COSMIC cancer annotation to MAF data...\")\n\n# Apply annotation (in_place=False to get returned DataFrame)\nmaf_annotated = py_mut_maf.knownCancer(\n    annotation_table=COSMIC_ANNOTATION,\n    oncokb_table=ONCOKB_ANNOTATION,\n    in_place=False\n)\n\nprint(\"\\n\u2705 MAF Annotation Complete!\")\nprint(f\"   Original shape: {py_mut_maf.data.shape}\")\nprint(f\"   Annotated shape: {maf_annotated.shape}\")\n\n# Show new annotation columns\noriginal_cols = set(py_mut_maf.data.columns)\nnew_cols = [col for col in maf_annotated.columns if col not in original_cols]\nprint(f\"\\n\ud83c\udff7\ufe0f  New annotation columns ({len(new_cols)}):\")\nfor col in new_cols:\n    print(f\"   \u2022 {col}\")\n\n# Show annotation results for genes with annotations\nannotated_genes = maf_annotated[maf_annotated['Is_Oncogene_any'] == True]\nif len(annotated_genes) &gt; 0:\n    print(f\"\\n\ud83c\udfaf Genes with cancer annotations ({len(annotated_genes)} variants):\")\n    # Use specific knowncancer_columns that are available in the data\n    available_cols = ['Hugo_Symbol'] + [col for col in knowncancer_columns if col in maf_annotated.columns]\n    display(annotated_genes[available_cols].drop_duplicates('Hugo_Symbol').head(10))\nelse:\n    print(\"\\n\u26a0\ufe0f  No genes found with cancer annotations in this dataset\")\n</pre> # Apply COSMIC annotation to MAF data print(\"\ud83d\udd2c Applying COSMIC cancer annotation to MAF data...\")  # Apply annotation (in_place=False to get returned DataFrame) maf_annotated = py_mut_maf.knownCancer(     annotation_table=COSMIC_ANNOTATION,     oncokb_table=ONCOKB_ANNOTATION,     in_place=False )  print(\"\\n\u2705 MAF Annotation Complete!\") print(f\"   Original shape: {py_mut_maf.data.shape}\") print(f\"   Annotated shape: {maf_annotated.shape}\")  # Show new annotation columns original_cols = set(py_mut_maf.data.columns) new_cols = [col for col in maf_annotated.columns if col not in original_cols] print(f\"\\n\ud83c\udff7\ufe0f  New annotation columns ({len(new_cols)}):\") for col in new_cols:     print(f\"   \u2022 {col}\")  # Show annotation results for genes with annotations annotated_genes = maf_annotated[maf_annotated['Is_Oncogene_any'] == True] if len(annotated_genes) &gt; 0:     print(f\"\\n\ud83c\udfaf Genes with cancer annotations ({len(annotated_genes)} variants):\")     # Use specific knowncancer_columns that are available in the data     available_cols = ['Hugo_Symbol'] + [col for col in knowncancer_columns if col in maf_annotated.columns]     display(annotated_genes[available_cols].drop_duplicates('Hugo_Symbol').head(10)) else:     print(\"\\n\u26a0\ufe0f  No genes found with cancer annotations in this dataset\")  <pre>2025-08-01 01:24:24,772 | INFO | pyMut.annotate.cosmic_cancer_annotate | DataFrame memory usage: 0.02 GB\n2025-08-01 01:24:24,772 | INFO | pyMut.annotate.cosmic_cancer_annotate | Using pandas backend for annotation\n2025-08-01 01:24:24,773 | INFO | pyMut.annotate.cosmic_cancer_annotate | Starting pandas annotation for DataFrame: 2091 rows, 237 columns\n2025-08-01 01:24:24,786 | INFO | pyMut.annotate.cosmic_cancer_annotate | Using join column: Hugo_Symbol\n2025-08-01 01:24:24,786 | INFO | pyMut.annotate.cosmic_cancer_annotate | Reading annotation table: ../../../src/pyMut/data/resources/COSMIC/Cosmic_CancerGeneCensus_Tsv_v102_GRCh38/Cosmic_CancerGeneCensus_v102_GRCh38.tsv.gz\n2025-08-01 01:24:24,791 | INFO | pyMut.annotate.cosmic_cancer_annotate | Annotation table loaded: 758 rows, 21 columns\n2025-08-01 01:24:24,792 | INFO | pyMut.annotate.cosmic_cancer_annotate | Creating synonyms dictionary from column 'SYNONYMS'...\n2025-08-01 01:24:24,818 | INFO | pyMut.annotate.cosmic_cancer_annotate | Created synonyms dictionary with 4710 mappings\n2025-08-01 01:24:24,818 | INFO | pyMut.annotate.cosmic_cancer_annotate | Applying synonyms mapping to PyMutation data...\n2025-08-01 01:24:24,823 | INFO | pyMut.annotate.cosmic_cancer_annotate | Gene mapping results: 2086 direct matches, 5 synonym matches\n2025-08-01 01:24:24,824 | INFO | pyMut.annotate.cosmic_cancer_annotate | Performing annotation merge...\n2025-08-01 01:24:24,847 | INFO | pyMut.annotate.cosmic_cancer_annotate | COSMIC annotation completed: 2091 rows, 257 columns\n2025-08-01 01:24:24,848 | INFO | pyMut.annotate.cosmic_cancer_annotate | Added 20 COSMIC annotation columns\n2025-08-01 01:24:24,849 | INFO | pyMut.annotate.cosmic_cancer_annotate | Reading OncoKB table: ../../../src/pyMut/data/resources/OncoKb/cancerGeneList.tsv\n2025-08-01 01:24:24,853 | INFO | pyMut.annotate.cosmic_cancer_annotate | OncoKB table loaded: 1195 rows, 17 columns\n2025-08-01 01:24:24,853 | INFO | pyMut.annotate.cosmic_cancer_annotate | Creating OncoKB synonyms dictionary from column 'Gene Aliases'...\n</pre> <pre>\ud83d\udd2c Applying COSMIC cancer annotation to MAF data...\n</pre> <pre>2025-08-01 01:24:24,893 | INFO | pyMut.annotate.cosmic_cancer_annotate | Created OncoKB synonyms dictionary with 3291 mappings\n2025-08-01 01:24:24,894 | INFO | pyMut.annotate.cosmic_cancer_annotate | Applying synonyms mapping to PyMutation data...\n2025-08-01 01:24:24,907 | INFO | pyMut.annotate.cosmic_cancer_annotate | Gene mapping results: 2074 direct matches, 17 synonym matches\n2025-08-01 01:24:24,907 | INFO | pyMut.annotate.cosmic_cancer_annotate | Performing OncoKB annotation merge...\n2025-08-01 01:24:24,930 | INFO | pyMut.annotate.cosmic_cancer_annotate | OncoKB annotation completed: 2091 rows, 273 columns\n2025-08-01 01:24:24,933 | INFO | pyMut.annotate.cosmic_cancer_annotate | Added 16 OncoKB annotation columns\n2025-08-01 01:24:24,934 | INFO | pyMut.annotate.cosmic_cancer_annotate | Total annotation completed: 2091 rows, 273 columns\n2025-08-01 01:24:24,934 | INFO | pyMut.annotate.cosmic_cancer_annotate | Pandas annotation completed successfully\n2025-08-01 01:24:24,960 | INFO | pyMut.annotate.cosmic_cancer_annotate | KnownCancer annotation completed successfully\n2025-08-01 01:24:24,961 | INFO | pyMut.annotate.cosmic_cancer_annotate | Filtered to 10 annotation columns plus Is_Oncogene_any field\n</pre> <pre>\n\u2705 MAF Annotation Complete!\n   Original shape: (2091, 237)\n   Annotated shape: (2091, 248)\n\n\ud83c\udff7\ufe0f  New annotation columns (11):\n   \u2022 COSMIC_ROLE_IN_CANCER\n   \u2022 COSMIC_TIER\n   \u2022 OncoKB_Is Oncogene\n   \u2022 OncoKB_Is Tumor Suppressor Gene\n   \u2022 OncoKB_OncoKB Annotated\n   \u2022 OncoKB_MSK-IMPACT\n   \u2022 OncoKB_MSK-HEME\n   \u2022 OncoKB_FOUNDATION ONE\n   \u2022 OncoKB_FOUNDATION ONE HEME\n   \u2022 OncoKB_Vogelstein\n   \u2022 Is_Oncogene_any\n\n\ud83c\udfaf Genes with cancer annotations (423 variants):\n</pre> Hugo_Symbol COSMIC_ROLE_IN_CANCER COSMIC_TIER OncoKB_Is Oncogene OncoKB_Is Tumor Suppressor Gene OncoKB_OncoKB Annotated OncoKB_MSK-IMPACT OncoKB_MSK-HEME OncoKB_FOUNDATION ONE OncoKB_FOUNDATION ONE HEME OncoKB_Vogelstein Is_Oncogene_any 12 TNC oncogene 2.0 True 21 ABL1 oncogene, fusion 1.0 Yes No Yes Yes Yes Yes Yes Yes True 26 NOTCH1 oncogene, TSG, fusion 1.0 Yes Yes Yes Yes Yes Yes Yes Yes True 53 PTPRD TSG 2.0 No Yes Yes Yes Yes No No No True 59 FANCC TSG 1.0 No Yes Yes Yes Yes Yes Yes No True 60 PTCH1 TSG 1.0 No Yes Yes Yes Yes Yes Yes Yes True 80 STAG2 TSG 1.0 No Yes Yes Yes Yes Yes Yes Yes True 86 BCORL1 oncogene, TSG 1.0 No Yes Yes No Yes Yes Yes No True 87 ELF4 oncogene, TSG, fusion 1.0 Yes No Yes No No No Yes No True 92 PHF6 TSG 1.0 No Yes Yes Yes Yes No Yes Yes True In\u00a0[6]: Copied! <pre># Apply COSMIC annotation to VCF data\nprint(\"\ud83d\udd2c Applying COSMIC cancer annotation to VCF data...\")\n\n# Apply annotation (in_place=False to get returned DataFrame)\nvcf_annotated = py_mut_vcf.knownCancer(\n    annotation_table=COSMIC_ANNOTATION,\n    oncokb_table=ONCOKB_ANNOTATION,\n    in_place=False\n)\n\nprint(\"\\n\u2705 VCF Annotation Complete!\")\nprint(f\"   Original shape: {py_mut_vcf.data.shape}\")\nprint(f\"   Annotated shape: {vcf_annotated.shape}\")\n\n# Show new annotation columns\noriginal_cols = set(py_mut_vcf.data.columns)\nnew_cols = [col for col in vcf_annotated.columns if col not in original_cols]\nprint(f\"\\n\ud83c\udff7\ufe0f  New annotation columns ({len(new_cols)}):\")\nfor col in new_cols:\n    print(f\"   \u2022 {col}\")\n\n# Show annotation results for genes with annotations\nannotated_genes = vcf_annotated[vcf_annotated['Is_Oncogene_any'] == True]\nif len(annotated_genes) &gt; 0:\n    print(f\"\\n\ud83c\udfaf Genes with cancer annotations ({len(annotated_genes)} variants):\")\n    # Use specific knowncancer_columns that are available in the data, plus VCF-specific columns\n    available_annotation_cols = [col for col in knowncancer_columns if col in vcf_annotated.columns]\n    annotation_cols = ['Hugo_Symbol', 'CHROM', 'POS'] + available_annotation_cols\n    display(annotated_genes[annotation_cols].drop_duplicates('Hugo_Symbol').head(10))\nelse:\n    print(\"\\n\u26a0\ufe0f  No genes found with cancer annotations in this dataset\")\n</pre> # Apply COSMIC annotation to VCF data print(\"\ud83d\udd2c Applying COSMIC cancer annotation to VCF data...\")  # Apply annotation (in_place=False to get returned DataFrame) vcf_annotated = py_mut_vcf.knownCancer(     annotation_table=COSMIC_ANNOTATION,     oncokb_table=ONCOKB_ANNOTATION,     in_place=False )  print(\"\\n\u2705 VCF Annotation Complete!\") print(f\"   Original shape: {py_mut_vcf.data.shape}\") print(f\"   Annotated shape: {vcf_annotated.shape}\")  # Show new annotation columns original_cols = set(py_mut_vcf.data.columns) new_cols = [col for col in vcf_annotated.columns if col not in original_cols] print(f\"\\n\ud83c\udff7\ufe0f  New annotation columns ({len(new_cols)}):\") for col in new_cols:     print(f\"   \u2022 {col}\")  # Show annotation results for genes with annotations annotated_genes = vcf_annotated[vcf_annotated['Is_Oncogene_any'] == True] if len(annotated_genes) &gt; 0:     print(f\"\\n\ud83c\udfaf Genes with cancer annotations ({len(annotated_genes)} variants):\")     # Use specific knowncancer_columns that are available in the data, plus VCF-specific columns     available_annotation_cols = [col for col in knowncancer_columns if col in vcf_annotated.columns]     annotation_cols = ['Hugo_Symbol', 'CHROM', 'POS'] + available_annotation_cols     display(annotated_genes[annotation_cols].drop_duplicates('Hugo_Symbol').head(10)) else:     print(\"\\n\u26a0\ufe0f  No genes found with cancer annotations in this dataset\")  <pre>\ud83d\udd2c Applying COSMIC cancer annotation to VCF data...\n</pre> <pre>2025-08-01 01:24:36,208 | INFO | pyMut.annotate.cosmic_cancer_annotate | DataFrame memory usage: 7.29 GB\n2025-08-01 01:24:36,209 | INFO | pyMut.annotate.cosmic_cancer_annotate | Using pandas backend for annotation\n2025-08-01 01:24:36,209 | INFO | pyMut.annotate.cosmic_cancer_annotate | Starting pandas annotation for DataFrame: 50000 rows, 2601 columns\n2025-08-01 01:24:40,560 | INFO | pyMut.annotate.cosmic_cancer_annotate | Using join column: Hugo_Symbol\n2025-08-01 01:24:40,561 | INFO | pyMut.annotate.cosmic_cancer_annotate | Reading annotation table: ../../../src/pyMut/data/resources/COSMIC/Cosmic_CancerGeneCensus_Tsv_v102_GRCh38/Cosmic_CancerGeneCensus_v102_GRCh38.tsv.gz\n2025-08-01 01:24:40,565 | INFO | pyMut.annotate.cosmic_cancer_annotate | Annotation table loaded: 758 rows, 21 columns\n2025-08-01 01:24:40,565 | INFO | pyMut.annotate.cosmic_cancer_annotate | Creating synonyms dictionary from column 'SYNONYMS'...\n2025-08-01 01:24:40,587 | INFO | pyMut.annotate.cosmic_cancer_annotate | Created synonyms dictionary with 4710 mappings\n2025-08-01 01:24:40,587 | INFO | pyMut.annotate.cosmic_cancer_annotate | Applying synonyms mapping to PyMutation data...\n2025-08-01 01:24:41,534 | INFO | pyMut.annotate.cosmic_cancer_annotate | Gene mapping results: 50000 direct matches, 0 synonym matches\n2025-08-01 01:24:41,535 | INFO | pyMut.annotate.cosmic_cancer_annotate | Performing annotation merge...\n2025-08-01 01:24:47,923 | INFO | pyMut.annotate.cosmic_cancer_annotate | COSMIC annotation completed: 50000 rows, 2621 columns\n2025-08-01 01:24:47,924 | INFO | pyMut.annotate.cosmic_cancer_annotate | Added 20 COSMIC annotation columns\n2025-08-01 01:24:47,924 | INFO | pyMut.annotate.cosmic_cancer_annotate | Reading OncoKB table: ../../../src/pyMut/data/resources/OncoKb/cancerGeneList.tsv\n2025-08-01 01:24:47,928 | INFO | pyMut.annotate.cosmic_cancer_annotate | OncoKB table loaded: 1195 rows, 17 columns\n2025-08-01 01:24:47,929 | INFO | pyMut.annotate.cosmic_cancer_annotate | Creating OncoKB synonyms dictionary from column 'Gene Aliases'...\n2025-08-01 01:24:47,961 | INFO | pyMut.annotate.cosmic_cancer_annotate | Created OncoKB synonyms dictionary with 3291 mappings\n2025-08-01 01:24:47,962 | INFO | pyMut.annotate.cosmic_cancer_annotate | Applying synonyms mapping to PyMutation data...\n2025-08-01 01:24:52,409 | INFO | pyMut.annotate.cosmic_cancer_annotate | Gene mapping results: 50000 direct matches, 0 synonym matches\n2025-08-01 01:24:52,410 | INFO | pyMut.annotate.cosmic_cancer_annotate | Performing OncoKB annotation merge...\n2025-08-01 01:24:59,643 | INFO | pyMut.annotate.cosmic_cancer_annotate | OncoKB annotation completed: 50000 rows, 2637 columns\n2025-08-01 01:24:59,644 | INFO | pyMut.annotate.cosmic_cancer_annotate | Added 16 OncoKB annotation columns\n2025-08-01 01:24:59,644 | INFO | pyMut.annotate.cosmic_cancer_annotate | Total annotation completed: 50000 rows, 2637 columns\n2025-08-01 01:24:59,645 | INFO | pyMut.annotate.cosmic_cancer_annotate | Pandas annotation completed successfully\n2025-08-01 01:25:07,520 | INFO | pyMut.annotate.cosmic_cancer_annotate | KnownCancer annotation completed successfully\n2025-08-01 01:25:07,520 | INFO | pyMut.annotate.cosmic_cancer_annotate | Filtered to 10 annotation columns plus Is_Oncogene_any field\n</pre> <pre>\n\u2705 VCF Annotation Complete!\n   Original shape: (50000, 2601)\n   Annotated shape: (50000, 2612)\n\n\ud83c\udff7\ufe0f  New annotation columns (11):\n   \u2022 COSMIC_ROLE_IN_CANCER\n   \u2022 COSMIC_TIER\n   \u2022 OncoKB_Is Oncogene\n   \u2022 OncoKB_Is Tumor Suppressor Gene\n   \u2022 OncoKB_OncoKB Annotated\n   \u2022 OncoKB_MSK-IMPACT\n   \u2022 OncoKB_MSK-HEME\n   \u2022 OncoKB_FOUNDATION ONE\n   \u2022 OncoKB_FOUNDATION ONE HEME\n   \u2022 OncoKB_Vogelstein\n   \u2022 Is_Oncogene_any\n\n\ud83c\udfaf Genes with cancer annotations (17072 variants):\n</pre> Hugo_Symbol CHROM POS COSMIC_ROLE_IN_CANCER COSMIC_TIER OncoKB_Is Oncogene OncoKB_Is Tumor Suppressor Gene OncoKB_OncoKB Annotated OncoKB_MSK-IMPACT OncoKB_MSK-HEME OncoKB_FOUNDATION ONE OncoKB_FOUNDATION ONE HEME OncoKB_Vogelstein Is_Oncogene_any 25959 LARP4B chr10 753787 TSG 2.0 No No Yes No No No No No True 38840 ADARB2 chr10 1151506 Yes No Yes No No No No No True In\u00a0[7]: Copied! <pre># Summary comparison\nprint(\"\ud83d\udcca COSMIC Cancer Annotation Summary\")\nprint(\"=\" * 50)\n\n# MAF results\nmaf_oncogenes = maf_annotated[maf_annotated['Is_Oncogene_any'] == True]['Hugo_Symbol'].nunique()\nmaf_total_genes = maf_annotated['Hugo_Symbol'].nunique()\nmaf_cosmic_role = maf_annotated['COSMIC_ROLE_IN_CANCER'].value_counts().to_dict() if 'COSMIC_ROLE_IN_CANCER' in maf_annotated.columns else {}\n\nprint(\"\\n\ud83e\uddec MAF Data Results:\")\nprint(f\"   Total unique genes: {maf_total_genes}\")\nprint(f\"   Genes with cancer annotations: {maf_oncogenes}\")\nprint(f\"   Annotation rate: {maf_oncogenes/maf_total_genes*100:.1f}%\")\nif maf_cosmic_role:\n    print(f\"   COSMIC roles found: {list(maf_cosmic_role.keys())}\")\n\n# VCF results\nvcf_oncogenes = vcf_annotated[vcf_annotated['Is_Oncogene_any'] == True]['Hugo_Symbol'].nunique()\nvcf_total_genes = vcf_annotated['Hugo_Symbol'].nunique()\nvcf_cosmic_role = vcf_annotated['COSMIC_ROLE_IN_CANCER'].value_counts().to_dict() if 'COSMIC_ROLE_IN_CANCER' in vcf_annotated.columns else {}\n\nprint(\"\\n\ud83e\uddec VCF Data Results:\")\nprint(f\"   Total unique genes: {vcf_total_genes}\")\nprint(f\"   Genes with cancer annotations: {vcf_oncogenes}\")\nprint(f\"   Annotation rate: {vcf_oncogenes/vcf_total_genes*100:.1f}%\")\nif vcf_cosmic_role:\n    print(f\"   COSMIC roles found: {list(vcf_cosmic_role.keys())}\")\n\nprint(\"\\n\u2705 Annotation process completed successfully for both datasets!\")\n</pre> # Summary comparison print(\"\ud83d\udcca COSMIC Cancer Annotation Summary\") print(\"=\" * 50)  # MAF results maf_oncogenes = maf_annotated[maf_annotated['Is_Oncogene_any'] == True]['Hugo_Symbol'].nunique() maf_total_genes = maf_annotated['Hugo_Symbol'].nunique() maf_cosmic_role = maf_annotated['COSMIC_ROLE_IN_CANCER'].value_counts().to_dict() if 'COSMIC_ROLE_IN_CANCER' in maf_annotated.columns else {}  print(\"\\n\ud83e\uddec MAF Data Results:\") print(f\"   Total unique genes: {maf_total_genes}\") print(f\"   Genes with cancer annotations: {maf_oncogenes}\") print(f\"   Annotation rate: {maf_oncogenes/maf_total_genes*100:.1f}%\") if maf_cosmic_role:     print(f\"   COSMIC roles found: {list(maf_cosmic_role.keys())}\")  # VCF results vcf_oncogenes = vcf_annotated[vcf_annotated['Is_Oncogene_any'] == True]['Hugo_Symbol'].nunique() vcf_total_genes = vcf_annotated['Hugo_Symbol'].nunique() vcf_cosmic_role = vcf_annotated['COSMIC_ROLE_IN_CANCER'].value_counts().to_dict() if 'COSMIC_ROLE_IN_CANCER' in vcf_annotated.columns else {}  print(\"\\n\ud83e\uddec VCF Data Results:\") print(f\"   Total unique genes: {vcf_total_genes}\") print(f\"   Genes with cancer annotations: {vcf_oncogenes}\") print(f\"   Annotation rate: {vcf_oncogenes/vcf_total_genes*100:.1f}%\") if vcf_cosmic_role:     print(f\"   COSMIC roles found: {list(vcf_cosmic_role.keys())}\")  print(\"\\n\u2705 Annotation process completed successfully for both datasets!\")  <pre>\ud83d\udcca COSMIC Cancer Annotation Summary\n==================================================\n\n\ud83e\uddec MAF Data Results:\n   Total unique genes: 1611\n   Genes with cancer annotations: 158\n   Annotation rate: 9.8%\n   COSMIC roles found: ['', 'TSG', 'oncogene', 'oncogene, TSG, fusion', 'oncogene, fusion', 'fusion', 'oncogene, TSG', 'TSG, fusion']\n\n\ud83e\uddec VCF Data Results:\n   Total unique genes: 13\n   Genes with cancer annotations: 2\n   Annotation rate: 15.4%\n   COSMIC roles found: ['', 'TSG']\n\n\u2705 Annotation process completed successfully for both datasets!\n</pre> In\u00a0[8]: Copied! <pre># Show detailed annotation results\nprint(\"\ud83d\udd0d Detailed Annotation Results\")\nprint(\"=\" * 40)\n\n# Function to show annotation details\ndef show_annotation_details(data, dataset_name):\n    print(f\"\\n\ud83d\udccb {dataset_name} - Genes with COSMIC annotations:\")\n    \n    # Get genes with annotations\n    annotated = data[data['Is_Oncogene_any'] == True]\n    \n    if len(annotated) == 0:\n        print(\"   No genes with COSMIC annotations found.\")\n        return\n    \n    # Show specific knowncancer annotation columns\n    available_annotation_cols = [col for col in knowncancer_columns if col in data.columns]\n    \n    if available_annotation_cols:\n        gene_annotations = annotated[['Hugo_Symbol'] + available_annotation_cols].drop_duplicates('Hugo_Symbol')\n        \n        print(f\"   Found {len(gene_annotations)} unique genes with annotations:\")\n        print(f\"   Available annotation columns: {', '.join(available_annotation_cols)}\")\n        \n        # Show detailed table with all available annotation columns\n        if len(gene_annotations) &gt; 0:\n            print(\"\\n   \ud83d\udccb Detailed annotation table:\")\n            display(gene_annotations.head(10))\n        \n        if len(gene_annotations) &gt; 10:\n            print(f\"   ... and {len(gene_annotations) - 10} more genes\")\n\n# Show details for both datasets\nshow_annotation_details(maf_annotated, \"MAF Dataset\")\nshow_annotation_details(vcf_annotated, \"VCF Dataset\")\n</pre> # Show detailed annotation results print(\"\ud83d\udd0d Detailed Annotation Results\") print(\"=\" * 40)  # Function to show annotation details def show_annotation_details(data, dataset_name):     print(f\"\\n\ud83d\udccb {dataset_name} - Genes with COSMIC annotations:\")          # Get genes with annotations     annotated = data[data['Is_Oncogene_any'] == True]          if len(annotated) == 0:         print(\"   No genes with COSMIC annotations found.\")         return          # Show specific knowncancer annotation columns     available_annotation_cols = [col for col in knowncancer_columns if col in data.columns]          if available_annotation_cols:         gene_annotations = annotated[['Hugo_Symbol'] + available_annotation_cols].drop_duplicates('Hugo_Symbol')                  print(f\"   Found {len(gene_annotations)} unique genes with annotations:\")         print(f\"   Available annotation columns: {', '.join(available_annotation_cols)}\")                  # Show detailed table with all available annotation columns         if len(gene_annotations) &gt; 0:             print(\"\\n   \ud83d\udccb Detailed annotation table:\")             display(gene_annotations.head(10))                  if len(gene_annotations) &gt; 10:             print(f\"   ... and {len(gene_annotations) - 10} more genes\")  # Show details for both datasets show_annotation_details(maf_annotated, \"MAF Dataset\") show_annotation_details(vcf_annotated, \"VCF Dataset\")  <pre>\ud83d\udd0d Detailed Annotation Results\n========================================\n\n\ud83d\udccb MAF Dataset - Genes with COSMIC annotations:\n   Found 158 unique genes with annotations:\n   Available annotation columns: COSMIC_ROLE_IN_CANCER, COSMIC_TIER, OncoKB_Is Oncogene, OncoKB_Is Tumor Suppressor Gene, OncoKB_OncoKB Annotated, OncoKB_MSK-IMPACT, OncoKB_MSK-HEME, OncoKB_FOUNDATION ONE, OncoKB_FOUNDATION ONE HEME, OncoKB_Vogelstein, Is_Oncogene_any\n\n   \ud83d\udccb Detailed annotation table:\n</pre> Hugo_Symbol COSMIC_ROLE_IN_CANCER COSMIC_TIER OncoKB_Is Oncogene OncoKB_Is Tumor Suppressor Gene OncoKB_OncoKB Annotated OncoKB_MSK-IMPACT OncoKB_MSK-HEME OncoKB_FOUNDATION ONE OncoKB_FOUNDATION ONE HEME OncoKB_Vogelstein Is_Oncogene_any 12 TNC oncogene 2.0 True 21 ABL1 oncogene, fusion 1.0 Yes No Yes Yes Yes Yes Yes Yes True 26 NOTCH1 oncogene, TSG, fusion 1.0 Yes Yes Yes Yes Yes Yes Yes Yes True 53 PTPRD TSG 2.0 No Yes Yes Yes Yes No No No True 59 FANCC TSG 1.0 No Yes Yes Yes Yes Yes Yes No True 60 PTCH1 TSG 1.0 No Yes Yes Yes Yes Yes Yes Yes True 80 STAG2 TSG 1.0 No Yes Yes Yes Yes Yes Yes Yes True 86 BCORL1 oncogene, TSG 1.0 No Yes Yes No Yes Yes Yes No True 87 ELF4 oncogene, TSG, fusion 1.0 Yes No Yes No No No Yes No True 92 PHF6 TSG 1.0 No Yes Yes Yes Yes No Yes Yes True <pre>   ... and 148 more genes\n\n\ud83d\udccb VCF Dataset - Genes with COSMIC annotations:\n   Found 2 unique genes with annotations:\n   Available annotation columns: COSMIC_ROLE_IN_CANCER, COSMIC_TIER, OncoKB_Is Oncogene, OncoKB_Is Tumor Suppressor Gene, OncoKB_OncoKB Annotated, OncoKB_MSK-IMPACT, OncoKB_MSK-HEME, OncoKB_FOUNDATION ONE, OncoKB_FOUNDATION ONE HEME, OncoKB_Vogelstein, Is_Oncogene_any\n\n   \ud83d\udccb Detailed annotation table:\n</pre> Hugo_Symbol COSMIC_ROLE_IN_CANCER COSMIC_TIER OncoKB_Is Oncogene OncoKB_Is Tumor Suppressor Gene OncoKB_OncoKB Annotated OncoKB_MSK-IMPACT OncoKB_MSK-HEME OncoKB_FOUNDATION ONE OncoKB_FOUNDATION ONE HEME OncoKB_Vogelstein Is_Oncogene_any 25959 LARP4B TSG 2.0 No No Yes No No No No No True 38840 ADARB2 Yes No Yes No No No No No True"},{"location":"examples/annotation/cosmic_cancer_annotation/#cosmic-cancer-annotation-example","title":"COSMIC Cancer Annotation Example\u00b6","text":"<p>This notebook demonstrates the <code>knownCancer</code> functionality with both MAF and VCF data files.</p>"},{"location":"examples/annotation/cosmic_cancer_annotation/#overview","title":"Overview\u00b6","text":"<ul> <li>Load MAF data using <code>read_maf</code></li> <li>Load VCF data using <code>read_vcf</code></li> <li>Apply COSMIC cancer annotation to both instances</li> <li>Display annotated columns and results</li> </ul>"},{"location":"examples/annotation/cosmic_cancer_annotation/#data-file-paths","title":"Data File Paths\u00b6","text":"<p>Define the paths to our example data files and COSMIC annotation table.</p>"},{"location":"examples/annotation/cosmic_cancer_annotation/#1-load-maf-data","title":"1. Load MAF Data\u00b6","text":"<p>Load the TCGA LAML MAF file using <code>read_maf</code>.</p>"},{"location":"examples/annotation/cosmic_cancer_annotation/#2-load-vcf-data","title":"2. Load VCF Data\u00b6","text":"<p>Load the 1000 Genomes VCF file using <code>read_vcf</code>.</p>"},{"location":"examples/annotation/cosmic_cancer_annotation/#3-apply-cosmic-cancer-annotation-to-maf-data","title":"3. Apply COSMIC Cancer Annotation to MAF Data\u00b6","text":"<p>Apply the <code>knownCancer</code> method to the MAF data.</p>"},{"location":"examples/annotation/cosmic_cancer_annotation/#4-apply-cosmic-cancer-annotation-to-vcf-data","title":"4. Apply COSMIC Cancer Annotation to VCF Data\u00b6","text":"<p>Apply the <code>knownCancer</code> method to the VCF data.</p>"},{"location":"examples/annotation/cosmic_cancer_annotation/#5-summary-and-comparison","title":"5. Summary and Comparison\u00b6","text":"<p>Compare the annotation results between MAF and VCF data.</p>"},{"location":"examples/annotation/cosmic_cancer_annotation/#6-detailed-annotation-results","title":"6. Detailed Annotation Results\u00b6","text":"<p>Show detailed annotation information for genes that have COSMIC annotations.</p>"},{"location":"examples/annotation/vep_annotation/","title":"VEP Annotation Demo","text":"In\u00a0[1]: Copied! <pre>from pathlib import Path\nimport os\n\n# Import VEP annotation functions\nfrom pyMut.annotate.vep_annotate import (\n    wrap_vcf_vep_annotate_unified,\n    wrap_maf_vep_annotate_protein\n)\n# Set Perl environment variable for VEP\nos.environ['LC_ALL'] = 'C'\nos.environ['LANG'] = 'C'\n</pre> from pathlib import Path import os  # Import VEP annotation functions from pyMut.annotate.vep_annotate import (     wrap_vcf_vep_annotate_unified,     wrap_maf_vep_annotate_protein ) # Set Perl environment variable for VEP os.environ['LC_ALL'] = 'C' os.environ['LANG'] = 'C'  In\u00a0[2]: Copied! <pre># Input files\nVCF_FILE = \"../../../src/pyMut/data/examples/VCF/subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased.vcf\"\nMAF_FILE = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\"\n\n# VEP cache directories and FASTA files\nVCF_CACHE_DIR = \"../../../src/pyMut/data/resources/vep/homo_sapiens_vep_114_GRCh38\"\nMAF_CACHE_DIR = \"../../../src/pyMut/data/resources/vep/homo_sapiens_vep_114_GRCh37\"\nVCF_FASTA = \"../../../src/pyMut/data/resources/genome/GRCh38/GRCh38.p14.genome.fa\"\nMAF_FASTA = \"../../../src/pyMut/data/resources/genome/GRCh37/GRCh37.p13.genome.fa\"\n\n# Check if files exist\nvcf_exists = Path(VCF_FILE).exists()\nmaf_exists = Path(MAF_FILE).exists()\nvcf_cache_exists = Path(VCF_CACHE_DIR).exists()\nmaf_cache_exists = Path(MAF_CACHE_DIR).exists()\nvcf_fasta_exists = Path(VCF_FASTA).exists()\nmaf_fasta_exists = Path(MAF_FASTA).exists()\n\nprint(\"File availability check:\")\nprint(f\"VCF file: {'\u2713' if vcf_exists else '\u2717'}\")\nprint(f\"MAF file: {'\u2713' if maf_exists else '\u2717'}\")\nprint(f\"VCF cache: {'\u2713' if vcf_cache_exists else '\u2717'}\")\nprint(f\"MAF cache: {'\u2713' if maf_cache_exists else '\u2717'}\")\nprint(f\"VCF FASTA: {'\u2713' if vcf_fasta_exists else '\u2717'}\")\nprint(f\"MAF FASTA: {'\u2713' if maf_fasta_exists else '\u2717'}\")\n</pre> # Input files VCF_FILE = \"../../../src/pyMut/data/examples/VCF/subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased.vcf\" MAF_FILE = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\"  # VEP cache directories and FASTA files VCF_CACHE_DIR = \"../../../src/pyMut/data/resources/vep/homo_sapiens_vep_114_GRCh38\" MAF_CACHE_DIR = \"../../../src/pyMut/data/resources/vep/homo_sapiens_vep_114_GRCh37\" VCF_FASTA = \"../../../src/pyMut/data/resources/genome/GRCh38/GRCh38.p14.genome.fa\" MAF_FASTA = \"../../../src/pyMut/data/resources/genome/GRCh37/GRCh37.p13.genome.fa\"  # Check if files exist vcf_exists = Path(VCF_FILE).exists() maf_exists = Path(MAF_FILE).exists() vcf_cache_exists = Path(VCF_CACHE_DIR).exists() maf_cache_exists = Path(MAF_CACHE_DIR).exists() vcf_fasta_exists = Path(VCF_FASTA).exists() maf_fasta_exists = Path(MAF_FASTA).exists()  print(\"File availability check:\") print(f\"VCF file: {'\u2713' if vcf_exists else '\u2717'}\") print(f\"MAF file: {'\u2713' if maf_exists else '\u2717'}\") print(f\"VCF cache: {'\u2713' if vcf_cache_exists else '\u2717'}\") print(f\"MAF cache: {'\u2713' if maf_cache_exists else '\u2717'}\") print(f\"VCF FASTA: {'\u2713' if vcf_fasta_exists else '\u2717'}\") print(f\"MAF FASTA: {'\u2713' if maf_fasta_exists else '\u2717'}\")  <pre>File availability check:\nVCF file: \u2713\nMAF file: \u2713\nVCF cache: \u2713\nMAF cache: \u2713\nVCF FASTA: \u2713\nMAF FASTA: \u2713\n</pre> In\u00a0[3]: Copied! <pre>if vcf_exists and vcf_cache_exists and vcf_fasta_exists:\n    try:\n        # Perform VEP annotation on VCF file\n        # We'll annotate with protein, gene, and variant class information\n        success, result = wrap_vcf_vep_annotate_unified(\n            VCF_FILE, \n            VCF_CACHE_DIR, \n            VCF_FASTA,\n            annotate_protein=True,\n            annotate_gene=True,\n            annotate_variant_class=True,\n            no_stats=True  # Minimize output noise\n        )\n        \n        if success:\n            print(\"\u2713 VCF annotation completed successfully\")\n            print(f\"Output: {result}\")\n        else:\n            print(\"\u2717 VCF annotation failed\")\n            print(f\"Error: {result}\")\n            \n    except Exception as e:\n        print(f\"\u2717 Error during VCF annotation: {e}\")\nelse:\n    missing_files = []\n    if not vcf_exists:\n        missing_files.append(\"VCF file\")\n    if not vcf_cache_exists:\n        missing_files.append(\"VCF cache directory\")\n    if not vcf_fasta_exists:\n        missing_files.append(\"VCF FASTA file\")\n    \n    print(f\"\u2717 Cannot perform VCF annotation. Missing: {', '.join(missing_files)}\")\n</pre> if vcf_exists and vcf_cache_exists and vcf_fasta_exists:     try:         # Perform VEP annotation on VCF file         # We'll annotate with protein, gene, and variant class information         success, result = wrap_vcf_vep_annotate_unified(             VCF_FILE,              VCF_CACHE_DIR,              VCF_FASTA,             annotate_protein=True,             annotate_gene=True,             annotate_variant_class=True,             no_stats=True  # Minimize output noise         )                  if success:             print(\"\u2713 VCF annotation completed successfully\")             print(f\"Output: {result}\")         else:             print(\"\u2717 VCF annotation failed\")             print(f\"Error: {result}\")                  except Exception as e:         print(f\"\u2717 Error during VCF annotation: {e}\") else:     missing_files = []     if not vcf_exists:         missing_files.append(\"VCF file\")     if not vcf_cache_exists:         missing_files.append(\"VCF cache directory\")     if not vcf_fasta_exists:         missing_files.append(\"VCF FASTA file\")          print(f\"\u2717 Cannot perform VCF annotation. Missing: {', '.join(missing_files)}\")  <pre>2025-08-01 01:22:55,133 | INFO | pyMut.annotate.vep_annotate | Starting unified VEP annotation for VCF file: ../../../src/pyMut/data/examples/VCF/subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased.vcf\n2025-08-01 01:22:55,134 | INFO | pyMut.annotate.vep_annotate | Extracted from cache: assembly=GRCh38, version=114\n2025-08-01 01:22:55,136 | INFO | pyMut.annotate.vep_annotate | Auto-constructed chr synonyms path: ../../../src/pyMut/data/resources/vep/homo_sapiens_vep_114_GRCh38/homo_sapiens/114_GRCh38/chr_synonyms.txt\n2025-08-01 01:22:55,137 | INFO | pyMut.annotate.vep_annotate | Running unified VEP annotation: vep --input_file ../../../src/pyMut/data/examples/VCF/subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased.vcf --vcf --offline --cache --cache_version 114 --dir_cache ../../../src/pyMut/data/resources/vep/homo_sapiens_vep_114_GRCh38 --assembly GRCh38 --synonyms ../../../src/pyMut/data/resources/vep/homo_sapiens_vep_114_GRCh38/homo_sapiens/114_GRCh38/chr_synonyms.txt --fasta ../../../src/pyMut/data/resources/genome/GRCh38/GRCh38.p14.genome.fa --pick --force_overwrite --output_file ../../../src/pyMut/data/examples/VCF/vep_annotation_01220108/subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased_vep_protein_gene_variant_class.vcf --protein --uniprot --domains --symbol --variant_class --no_stats\n2025-08-01 01:22:56,797 | INFO | pyMut.annotate.vep_annotate | Unified VEP annotation completed successfully\n</pre> <pre>\u2713 VCF annotation completed successfully\nOutput: VEP output file: ../../../src/pyMut/data/examples/VCF/vep_annotation_01220108/subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased_vep_protein_gene_variant_class.vcf\n</pre> In\u00a0[4]: Copied! <pre>if maf_exists and maf_cache_exists and maf_fasta_exists:\n    try:\n        success, result = wrap_maf_vep_annotate_protein(\n            MAF_FILE,\n            MAF_CACHE_DIR,\n            MAF_FASTA\n        )\n        \n        if success:\n            print(\"\u2713 MAF annotation completed successfully\")\n            print(f\"Output: {result}\")\n        else:\n            print(\"\u2717 MAF annotation failed\")\n            print(f\"Error: {result}\")\n            \n    except Exception as e:\n        print(f\"\u2717 Error during MAF annotation: {e}\")\nelse:\n    missing_files = []\n    if not maf_exists:\n        missing_files.append(\"MAF file\")\n    if not maf_cache_exists:\n        missing_files.append(\"MAF cache directory\")\n    if not maf_fasta_exists:\n        missing_files.append(\"MAF FASTA file\")\n    \n    print(f\"\u2717 Cannot perform MAF annotation. Missing: {', '.join(missing_files)}\")\n</pre> if maf_exists and maf_cache_exists and maf_fasta_exists:     try:         success, result = wrap_maf_vep_annotate_protein(             MAF_FILE,             MAF_CACHE_DIR,             MAF_FASTA         )                  if success:             print(\"\u2713 MAF annotation completed successfully\")             print(f\"Output: {result}\")         else:             print(\"\u2717 MAF annotation failed\")             print(f\"Error: {result}\")                  except Exception as e:         print(f\"\u2717 Error during MAF annotation: {e}\") else:     missing_files = []     if not maf_exists:         missing_files.append(\"MAF file\")     if not maf_cache_exists:         missing_files.append(\"MAF cache directory\")     if not maf_fasta_exists:         missing_files.append(\"MAF FASTA file\")          print(f\"\u2717 Cannot perform MAF annotation. Missing: {', '.join(missing_files)}\")  <pre>2025-08-01 01:22:56,807 | INFO | pyMut.annotate.vep_annotate | Converting MAF file to region format: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n2025-08-01 01:22:56,808 | INFO | pyMut.annotate.vep_annotate | Converting MAF to region format: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz -&gt; ../../../src/pyMut/data/examples/MAF/tcga_laml.region\n2025-08-01 01:22:56,815 | INFO | pyMut.annotate.vep_annotate | Successfully converted MAF to region format: ../../../src/pyMut/data/examples/MAF/tcga_laml.region\n2025-08-01 01:22:56,815 | INFO | pyMut.annotate.vep_annotate | Successfully converted MAF to region format: ../../../src/pyMut/data/examples/MAF/tcga_laml.region\n2025-08-01 01:22:56,815 | INFO | pyMut.annotate.vep_annotate | Extracted from cache: assembly=GRCh37, version=114\n2025-08-01 01:22:56,816 | INFO | pyMut.annotate.vep_annotate | Auto-constructed chr synonyms path: ../../../src/pyMut/data/resources/vep/homo_sapiens_vep_114_GRCh37/homo_sapiens/114_GRCh37/chr_synonyms.txt\n2025-08-01 01:22:56,816 | INFO | pyMut.annotate.vep_annotate | Running VEP annotation: vep --input_file ../../../src/pyMut/data/examples/MAF/tcga_laml.region --format region --offline --cache --cache_version 114 --dir_cache ../../../src/pyMut/data/resources/vep/homo_sapiens_vep_114_GRCh37 --assembly GRCh37 --synonyms ../../../src/pyMut/data/resources/vep/homo_sapiens_vep_114_GRCh37/homo_sapiens/114_GRCh37/chr_synonyms.txt --fasta ../../../src/pyMut/data/resources/genome/GRCh37/GRCh37.p13.genome.fa --protein --uniprot --domains --symbol --pick --keep_csq --force_overwrite --no_stats --output_file ../../../src/pyMut/data/examples/MAF/vep_annotation_01220108/tcga_laml.maf_vep_protein.txt\n2025-08-01 01:23:29,464 | INFO | pyMut.annotate.vep_annotate | VEP annotation completed successfully\n2025-08-01 01:23:29,464 | INFO | pyMut.annotate.vep_annotate | Merging VEP annotations with original MAF file...\n2025-08-01 01:23:29,464 | INFO | pyMut.utils.merge_vep_annotation | Reading MAF file: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n2025-08-01 01:23:29,471 | INFO | pyMut.utils.merge_vep_annotation | MAF file loaded: 2207 rows, 17 columns\n2025-08-01 01:23:29,471 | INFO | pyMut.utils.merge_vep_annotation | Reading VEP file: ../../../src/pyMut/data/examples/MAF/vep_annotation_01220108/tcga_laml.maf_vep_protein.txt\n2025-08-01 01:23:29,481 | INFO | pyMut.utils.merge_vep_annotation | VEP file loaded: 2206 rows, 14 columns\n2025-08-01 01:23:29,481 | INFO | pyMut.utils.merge_vep_annotation | Creating region keys for MAF data...\n2025-08-01 01:23:29,501 | INFO | pyMut.utils.merge_vep_annotation | Parsing VEP Extra column...\n2025-08-01 01:23:29,517 | INFO | pyMut.utils.merge_vep_annotation | Filtered to 2206 meaningful annotations\n2025-08-01 01:23:29,518 | INFO | pyMut.utils.merge_vep_annotation | Removing VEP duplicates...\n2025-08-01 01:23:29,520 | INFO | pyMut.utils.merge_vep_annotation | Removed 116 duplicate VEP entries\n2025-08-01 01:23:29,520 | INFO | pyMut.utils.merge_vep_annotation | Performing optimized merge with DuckDB...\n2025-08-01 01:23:29,586 | INFO | pyMut.utils.merge_vep_annotation | Merge completed: 2207 rows, 38 columns\n2025-08-01 01:23:29,586 | INFO | pyMut.utils.merge_vep_annotation | Saving annotated file to: ../../../src/pyMut/data/examples/MAF/tcga_laml_VEP_annotated.maf.gz\n2025-08-01 01:23:29,629 | INFO | pyMut.annotate.vep_annotate | Successfully merged VEP annotations. Merged file: ../../../src/pyMut/data/examples/MAF/tcga_laml_VEP_annotated.maf.gz\n2025-08-01 01:23:29,630 | INFO | pyMut.annotate.vep_annotate | Cleaned up temporary region file: ../../../src/pyMut/data/examples/MAF/tcga_laml.region\n</pre> <pre>\u2713 MAF annotation completed successfully\nOutput: VEP folder: ../../../src/pyMut/data/examples/MAF/vep_annotation_01220108/tcga_laml.maf_vep_protein.txt, Merged file: ../../../src/pyMut/data/examples/MAF/tcga_laml_VEP_annotated.maf.gz\n</pre>"},{"location":"examples/annotation/vep_annotation/#vep-annotation-demo","title":"VEP Annotation Demo\u00b6","text":"<p>This notebook demonstrates how to use VEP (Variant Effect Predictor) to annotate genomic variants from both VCF and MAF files. We'll use the pyMut library's VEP annotation functions to:</p> <ol> <li>Annotate a VCF file with GRCh38 assembly: <code>subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased.vcf</code></li> <li>Annotate a MAF file with GRCh37 assembly: <code>tcga_laml.maf.gz</code></li> </ol> <p>The notebook will show how to load these files, perform VEP annotation, and display the results with minimal output to avoid noise.</p>"},{"location":"examples/annotation/vep_annotation/#define-file-paths","title":"Define File Paths\u00b6","text":"<p>We'll define the paths to the input files and VEP resources needed for annotation.</p>"},{"location":"examples/annotation/vep_annotation/#part-1-vcf-file-vep-annotation","title":"Part 1: VCF File VEP Annotation\u00b6","text":"<p>We'll annotate the VCF file using VEP with protein, gene, and variant class annotations.</p>"},{"location":"examples/annotation/vep_annotation/#part-2-maf-file-vep-annotation","title":"Part 2: MAF File VEP Annotation\u00b6","text":"<p>We'll annotate the MAF file using VEP with protein-level annotations.</p>"},{"location":"examples/annotation/vep_annotation/#summary","title":"Summary\u00b6","text":"<p>This notebook demonstrated VEP annotation for both VCF and MAF files:</p>"},{"location":"examples/annotation/vep_annotation/#vcf-annotation","title":"VCF Annotation\u00b6","text":"<ul> <li>Input: VCF file with GRCh38 coordinates</li> <li>Annotations: Protein effects, gene information, and variant classifications</li> <li>Function: <code>wrap_vcf_vep_annotate_unified()</code></li> </ul>"},{"location":"examples/annotation/vep_annotation/#maf-annotation","title":"MAF Annotation\u00b6","text":"<ul> <li>Input: MAF file with GRCh37 coordinates</li> <li>Annotations: Protein-level effects</li> <li>Function: <code>wrap_maf_vep_annotate_protein()</code></li> </ul>"},{"location":"examples/annotation/vep_annotation/#key-points","title":"Key Points\u00b6","text":"<ul> <li>VEP requires appropriate cache directories and FASTA reference files</li> <li>Different genome assemblies (GRCh37/GRCh38) require corresponding resources</li> <li>The annotation functions handle file format conversion and VEP execution automatically</li> <li>Output files contain the original data plus VEP annotation columns</li> </ul> <p>For more detailed VEP configuration options, refer to the function documentation and VEP official documentation.</p>"},{"location":"examples/data/combination_2maf/","title":"Combining MAF Files with pyMut","text":"In\u00a0[1]: Copied! <pre># Import necessary functions\nfrom pyMut.input import read_maf\nfrom pyMut.combination import combine_pymutations\n</pre> # Import necessary functions from pyMut.input import read_maf from pyMut.combination import combine_pymutations  In\u00a0[2]: Copied! <pre># Load the first MAF file (TCGA LAML)\nmaf1_path = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\"\npymut1 = read_maf(path=maf1_path, assembly=\"37\")\n</pre> # Load the first MAF file (TCGA LAML) maf1_path = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\" pymut1 = read_maf(path=maf1_path, assembly=\"37\")  <pre>2025-08-01 02:01:59,559 | INFO | pyMut.input | Starting MAF reading: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n2025-08-01 02:01:59,560 | INFO | pyMut.input | Loading from cache: ../../../src/pyMut/data/examples/MAF/.pymut_cache/tcga_laml.maf_8bfbda65c4b23428.parquet\n2025-08-01 02:01:59,591 | INFO | pyMut.input | Cache loaded successfully in 0.03 seconds\n</pre> In\u00a0[3]: Copied! <pre># Load the second MAF file (PAAD-TP)\nmaf2_path = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\"\npymut2 = read_maf(path=maf2_path, assembly=\"37\")\n</pre> # Load the second MAF file (PAAD-TP) maf2_path = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\" pymut2 = read_maf(path=maf2_path, assembly=\"37\")  <pre>2025-08-01 02:01:59,667 | INFO | pyMut.input | Starting MAF reading: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n2025-08-01 02:01:59,668 | INFO | pyMut.input | Loading from cache: ../../../src/pyMut/data/examples/MAF/.pymut_cache/tcga_laml.maf_8bfbda65c4b23428.parquet\n2025-08-01 02:01:59,684 | INFO | pyMut.input | Cache loaded successfully in 0.02 seconds\n</pre> In\u00a0[4]: Copied! <pre># Combine the two PyMutation instances\ncombined_pymut = combine_pymutations(pymut1, pymut2)\n</pre> # Combine the two PyMutation instances combined_pymut = combine_pymutations(pymut1, pymut2)  <pre>2025-08-01 02:01:59,714 | INFO | pyMut.combination | Starting combination of PyMutation instances: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz and ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n2025-08-01 02:01:59,715 | INFO | pyMut.combination | Assembly check passed: both instances have assembly 37\n2025-08-01 02:01:59,715 | INFO | pyMut.combination | Combined samples: 193 from first instance + 193 from second instance = 193 unique samples\n2025-08-01 02:01:59,763 | INFO | pyMut.combination | Created unique variant identifiers for 2091 variants in first instance and 2091 variants in second instance\n2025-08-01 02:01:59,764 | INFO | pyMut.combination | Column analysis: 217 common columns, 0 unique to first instance, 0 unique to second instance\n2025-08-01 02:01:59,765 | INFO | pyMut.combination | Found 2091 unique variants across both instances\n2025-08-01 02:02:00,211 | INFO | pyMut.combination | Processed 217 common columns, 0 columns unique to first instance, and 0 columns unique to second instance\n2025-08-01 02:02:00,215 | INFO | pyMut.combination | Reordered columns: 7 standard columns + 193 sample columns + 16 annotation columns\n2025-08-01 02:02:00,215 | INFO | pyMut.combination | Created new metadata with assembly 37\n2025-08-01 02:02:00,216 | INFO | pyMut.combination | Combination complete: created PyMutation instance with 2091 variants and 216 columns\n</pre> In\u00a0[5]: Copied! <pre># Save the combined result to the output folder\noutput_path = \"output/combined_2maf_output.maf\"\ncombined_pymut.to_maf(output_path)\n</pre> # Save the combined result to the output folder output_path = \"output/combined_2maf_output.maf\" combined_pymut.to_maf(output_path)  <pre>2025-08-01 02:02:00,228 | INFO | pyMut.output | Starting MAF export to: output/combined_2maf_output.maf\n2025-08-01 02:02:00,230 | INFO | pyMut.output | Starting to process 2091 variants from 193 samples\n2025-08-01 02:02:00,234 | INFO | pyMut.output | Processing sample 1/193: TCGA-AB-2994 (0.5%)\n2025-08-01 02:02:00,245 | INFO | pyMut.output | Sample TCGA-AB-2994: 12 variants found\n2025-08-01 02:02:00,263 | INFO | pyMut.output | Processing sample 3/193: TCGA-AB-2974 (1.6%)\n2025-08-01 02:02:00,275 | INFO | pyMut.output | Sample TCGA-AB-2974: 8 variants found\n2025-08-01 02:02:00,312 | INFO | pyMut.output | Processing sample 6/193: TCGA-AB-2879 (3.1%)\n2025-08-01 02:02:00,324 | INFO | pyMut.output | Sample TCGA-AB-2879: 5 variants found\n2025-08-01 02:02:00,359 | INFO | pyMut.output | Processing sample 9/193: TCGA-AB-2941 (4.7%)\n2025-08-01 02:02:00,370 | INFO | pyMut.output | Sample TCGA-AB-2941: 5 variants found\n2025-08-01 02:02:00,406 | INFO | pyMut.output | Processing sample 12/193: TCGA-AB-2804 (6.2%)\n2025-08-01 02:02:00,418 | INFO | pyMut.output | Sample TCGA-AB-2804: 7 variants found\n2025-08-01 02:02:00,454 | INFO | pyMut.output | Processing sample 15/193: TCGA-AB-2848 (7.8%)\n2025-08-01 02:02:00,467 | INFO | pyMut.output | Sample TCGA-AB-2848: 1 variants found\n2025-08-01 02:02:00,504 | INFO | pyMut.output | Processing sample 18/193: TCGA-AB-2873 (9.3%)\n2025-08-01 02:02:00,517 | INFO | pyMut.output | Sample TCGA-AB-2873: 2 variants found\n2025-08-01 02:02:00,553 | INFO | pyMut.output | Processing sample 21/193: TCGA-AB-2889 (10.9%)\n2025-08-01 02:02:00,566 | INFO | pyMut.output | Sample TCGA-AB-2889: 5 variants found\n2025-08-01 02:02:00,600 | INFO | pyMut.output | Processing sample 24/193: TCGA-AB-2850 (12.4%)\n2025-08-01 02:02:00,612 | INFO | pyMut.output | Sample TCGA-AB-2850: 6 variants found\n2025-08-01 02:02:00,646 | INFO | pyMut.output | Processing sample 27/193: TCGA-AB-2917 (14.0%)\n2025-08-01 02:02:00,659 | INFO | pyMut.output | Sample TCGA-AB-2917: 16 variants found\n2025-08-01 02:02:00,693 | INFO | pyMut.output | Processing sample 30/193: TCGA-AB-2978 (15.5%)\n2025-08-01 02:02:00,702 | INFO | pyMut.output | Sample TCGA-AB-2978: 18 variants found\n2025-08-01 02:02:00,731 | INFO | pyMut.output | Processing sample 33/193: TCGA-AB-2806 (17.1%)\n2025-08-01 02:02:00,741 | INFO | pyMut.output | Sample TCGA-AB-2806: 17 variants found\n2025-08-01 02:02:00,769 | INFO | pyMut.output | Processing sample 36/193: TCGA-AB-2853 (18.7%)\n2025-08-01 02:02:00,782 | INFO | pyMut.output | Sample TCGA-AB-2853: 9 variants found\n2025-08-01 02:02:00,812 | INFO | pyMut.output | Processing sample 39/193: TCGA-AB-2973 (20.2%)\n2025-08-01 02:02:00,822 | INFO | pyMut.output | Sample TCGA-AB-2973: 4 variants found\n2025-08-01 02:02:00,852 | INFO | pyMut.output | Processing sample 42/193: TCGA-AB-2839 (21.8%)\n2025-08-01 02:02:00,862 | INFO | pyMut.output | Sample TCGA-AB-2839: 21 variants found\n2025-08-01 02:02:00,890 | INFO | pyMut.output | Processing sample 45/193: TCGA-AB-2945 (23.3%)\n2025-08-01 02:02:00,900 | INFO | pyMut.output | Sample TCGA-AB-2945: 13 variants found\n2025-08-01 02:02:00,927 | INFO | pyMut.output | Processing sample 48/193: TCGA-AB-2906 (24.9%)\n2025-08-01 02:02:00,936 | INFO | pyMut.output | Sample TCGA-AB-2906: 15 variants found\n2025-08-01 02:02:00,965 | INFO | pyMut.output | Processing sample 51/193: TCGA-AB-2995 (26.4%)\n2025-08-01 02:02:00,974 | INFO | pyMut.output | Sample TCGA-AB-2995: 6 variants found\n2025-08-01 02:02:01,005 | INFO | pyMut.output | Processing sample 54/193: TCGA-AB-2844 (28.0%)\n2025-08-01 02:02:01,015 | INFO | pyMut.output | Sample TCGA-AB-2844: 13 variants found\n2025-08-01 02:02:01,044 | INFO | pyMut.output | Processing sample 57/193: TCGA-AB-2888 (29.5%)\n2025-08-01 02:02:01,054 | INFO | pyMut.output | Sample TCGA-AB-2888: 9 variants found\n2025-08-01 02:02:01,083 | INFO | pyMut.output | Processing sample 60/193: TCGA-AB-2842 (31.1%)\n2025-08-01 02:02:01,094 | INFO | pyMut.output | Sample TCGA-AB-2842: 2 variants found\n2025-08-01 02:02:01,121 | INFO | pyMut.output | Processing sample 63/193: TCGA-AB-2882 (32.6%)\n2025-08-01 02:02:01,130 | INFO | pyMut.output | Sample TCGA-AB-2882: 17 variants found\n2025-08-01 02:02:01,160 | INFO | pyMut.output | Processing sample 66/193: TCGA-AB-2854 (34.2%)\n2025-08-01 02:02:01,169 | INFO | pyMut.output | Sample TCGA-AB-2854: 11 variants found\n2025-08-01 02:02:01,199 | INFO | pyMut.output | Processing sample 69/193: TCGA-AB-2841 (35.8%)\n2025-08-01 02:02:01,211 | INFO | pyMut.output | Sample TCGA-AB-2841: 4 variants found\n2025-08-01 02:02:01,239 | INFO | pyMut.output | Processing sample 72/193: TCGA-AB-2833 (37.3%)\n2025-08-01 02:02:01,249 | INFO | pyMut.output | Sample TCGA-AB-2833: 8 variants found\n2025-08-01 02:02:01,277 | INFO | pyMut.output | Processing sample 75/193: TCGA-AB-2885 (38.9%)\n2025-08-01 02:02:01,288 | INFO | pyMut.output | Sample TCGA-AB-2885: 13 variants found\n2025-08-01 02:02:01,316 | INFO | pyMut.output | Processing sample 78/193: TCGA-AB-2908 (40.4%)\n2025-08-01 02:02:01,325 | INFO | pyMut.output | Sample TCGA-AB-2908: 20 variants found\n2025-08-01 02:02:01,353 | INFO | pyMut.output | Processing sample 81/193: TCGA-AB-2924 (42.0%)\n2025-08-01 02:02:01,363 | INFO | pyMut.output | Sample TCGA-AB-2924: 11 variants found\n2025-08-01 02:02:01,392 | INFO | pyMut.output | Processing sample 84/193: TCGA-AB-2869 (43.5%)\n2025-08-01 02:02:01,402 | INFO | pyMut.output | Sample TCGA-AB-2869: 12 variants found\n2025-08-01 02:02:01,431 | INFO | pyMut.output | Processing sample 87/193: TCGA-AB-2955 (45.1%)\n2025-08-01 02:02:01,441 | INFO | pyMut.output | Sample TCGA-AB-2955: 19 variants found\n2025-08-01 02:02:01,469 | INFO | pyMut.output | Processing sample 90/193: TCGA-AB-2939 (46.6%)\n2025-08-01 02:02:01,479 | INFO | pyMut.output | Sample TCGA-AB-2939: 15 variants found\n2025-08-01 02:02:01,508 | INFO | pyMut.output | Processing sample 93/193: TCGA-AB-2957 (48.2%)\n2025-08-01 02:02:01,519 | INFO | pyMut.output | Sample TCGA-AB-2957: 2 variants found\n2025-08-01 02:02:01,548 | INFO | pyMut.output | Processing sample 96/193: TCGA-AB-2904 (49.7%)\n2025-08-01 02:02:01,558 | INFO | pyMut.output | Sample TCGA-AB-2904: 22 variants found\n2025-08-01 02:02:01,588 | INFO | pyMut.output | Processing sample 99/193: TCGA-AB-2940 (51.3%)\n2025-08-01 02:02:01,598 | INFO | pyMut.output | Sample TCGA-AB-2940: 4 variants found\n2025-08-01 02:02:01,628 | INFO | pyMut.output | Processing sample 102/193: TCGA-AB-2918 (52.8%)\n2025-08-01 02:02:01,638 | INFO | pyMut.output | Sample TCGA-AB-2918: 2 variants found\n2025-08-01 02:02:01,668 | INFO | pyMut.output | Processing sample 105/193: TCGA-AB-2871 (54.4%)\n2025-08-01 02:02:01,679 | INFO | pyMut.output | Sample TCGA-AB-2871: 15 variants found\n2025-08-01 02:02:01,710 | INFO | pyMut.output | Processing sample 108/193: TCGA-AB-2891 (56.0%)\n2025-08-01 02:02:01,720 | INFO | pyMut.output | Sample TCGA-AB-2891: 16 variants found\n2025-08-01 02:02:01,749 | INFO | pyMut.output | Processing sample 111/193: TCGA-AB-2881 (57.5%)\n2025-08-01 02:02:01,759 | INFO | pyMut.output | Sample TCGA-AB-2881: 9 variants found\n2025-08-01 02:02:01,790 | INFO | pyMut.output | Processing sample 114/193: TCGA-AB-2929 (59.1%)\n2025-08-01 02:02:01,804 | INFO | pyMut.output | Sample TCGA-AB-2929: 16 variants found\n2025-08-01 02:02:01,851 | INFO | pyMut.output | Processing sample 117/193: TCGA-AB-2819 (60.6%)\n2025-08-01 02:02:01,863 | INFO | pyMut.output | Sample TCGA-AB-2819: 16 variants found\n2025-08-01 02:02:01,893 | INFO | pyMut.output | Processing sample 120/193: TCGA-AB-2927 (62.2%)\n2025-08-01 02:02:01,902 | INFO | pyMut.output | Sample TCGA-AB-2927: 27 variants found\n2025-08-01 02:02:01,934 | INFO | pyMut.output | Processing sample 123/193: TCGA-AB-2968 (63.7%)\n2025-08-01 02:02:01,944 | INFO | pyMut.output | Sample TCGA-AB-2968: 18 variants found\n2025-08-01 02:02:01,974 | INFO | pyMut.output | Processing sample 126/193: TCGA-AB-2838 (65.3%)\n2025-08-01 02:02:01,984 | INFO | pyMut.output | Sample TCGA-AB-2838: 20 variants found\n2025-08-01 02:02:02,014 | INFO | pyMut.output | Processing sample 129/193: TCGA-AB-2855 (66.8%)\n2025-08-01 02:02:02,023 | INFO | pyMut.output | Sample TCGA-AB-2855: 4 variants found\n2025-08-01 02:02:02,051 | INFO | pyMut.output | Processing sample 132/193: TCGA-AB-2934 (68.4%)\n2025-08-01 02:02:02,061 | INFO | pyMut.output | Sample TCGA-AB-2934: 10 variants found\n2025-08-01 02:02:02,088 | INFO | pyMut.output | Processing sample 135/193: TCGA-AB-2895 (69.9%)\n2025-08-01 02:02:02,098 | INFO | pyMut.output | Sample TCGA-AB-2895: 16 variants found\n2025-08-01 02:02:02,126 | INFO | pyMut.output | Processing sample 138/193: TCGA-AB-2928 (71.5%)\n2025-08-01 02:02:02,136 | INFO | pyMut.output | Sample TCGA-AB-2928: 10 variants found\n2025-08-01 02:02:02,165 | INFO | pyMut.output | Processing sample 141/193: TCGA-AB-2846 (73.1%)\n2025-08-01 02:02:02,174 | INFO | pyMut.output | Sample TCGA-AB-2846: 15 variants found\n2025-08-01 02:02:02,202 | INFO | pyMut.output | Processing sample 144/193: TCGA-AB-2971 (74.6%)\n2025-08-01 02:02:02,212 | INFO | pyMut.output | Sample TCGA-AB-2971: 11 variants found\n2025-08-01 02:02:02,241 | INFO | pyMut.output | Processing sample 147/193: TCGA-AB-2832 (76.2%)\n2025-08-01 02:02:02,251 | INFO | pyMut.output | Sample TCGA-AB-2832: 10 variants found\n2025-08-01 02:02:02,282 | INFO | pyMut.output | Processing sample 150/193: TCGA-AB-2834 (77.7%)\n2025-08-01 02:02:02,291 | INFO | pyMut.output | Sample TCGA-AB-2834: 1 variants found\n2025-08-01 02:02:02,319 | INFO | pyMut.output | Processing sample 153/193: TCGA-AB-2919 (79.3%)\n2025-08-01 02:02:02,328 | INFO | pyMut.output | Sample TCGA-AB-2919: 11 variants found\n2025-08-01 02:02:02,356 | INFO | pyMut.output | Processing sample 156/193: TCGA-AB-2829 (80.8%)\n2025-08-01 02:02:02,366 | INFO | pyMut.output | Sample TCGA-AB-2829: 10 variants found\n2025-08-01 02:02:02,395 | INFO | pyMut.output | Processing sample 159/193: TCGA-AB-2851 (82.4%)\n2025-08-01 02:02:02,405 | INFO | pyMut.output | Sample TCGA-AB-2851: 7 variants found\n2025-08-01 02:02:02,433 | INFO | pyMut.output | Processing sample 162/193: TCGA-AB-2987 (83.9%)\n2025-08-01 02:02:02,443 | INFO | pyMut.output | Sample TCGA-AB-2987: 7 variants found\n2025-08-01 02:02:02,472 | INFO | pyMut.output | Processing sample 165/193: TCGA-AB-2861 (85.5%)\n2025-08-01 02:02:02,482 | INFO | pyMut.output | Sample TCGA-AB-2861: 19 variants found\n2025-08-01 02:02:02,513 | INFO | pyMut.output | Processing sample 168/193: TCGA-AB-2847 (87.0%)\n2025-08-01 02:02:02,523 | INFO | pyMut.output | Sample TCGA-AB-2847: 10 variants found\n2025-08-01 02:02:02,612 | INFO | pyMut.output | Processing sample 171/193: TCGA-AB-3001 (88.6%)\n2025-08-01 02:02:02,621 | INFO | pyMut.output | Sample TCGA-AB-3001: 12 variants found\n2025-08-01 02:02:02,650 | INFO | pyMut.output | Processing sample 174/193: TCGA-AB-2808 (90.2%)\n2025-08-01 02:02:02,661 | INFO | pyMut.output | Sample TCGA-AB-2808: 10 variants found\n2025-08-01 02:02:02,690 | INFO | pyMut.output | Processing sample 177/193: TCGA-AB-2911 (91.7%)\n2025-08-01 02:02:02,701 | INFO | pyMut.output | Sample TCGA-AB-2911: 2 variants found\n2025-08-01 02:02:02,729 | INFO | pyMut.output | Processing sample 180/193: TCGA-AB-2956 (93.3%)\n2025-08-01 02:02:02,739 | INFO | pyMut.output | Sample TCGA-AB-2956: 4 variants found\n2025-08-01 02:02:02,767 | INFO | pyMut.output | Processing sample 183/193: TCGA-AB-2913 (94.8%)\n2025-08-01 02:02:02,777 | INFO | pyMut.output | Sample TCGA-AB-2913: 16 variants found\n2025-08-01 02:02:02,805 | INFO | pyMut.output | Processing sample 186/193: TCGA-AB-2923 (96.4%)\n2025-08-01 02:02:02,816 | INFO | pyMut.output | Sample TCGA-AB-2923: 23 variants found\n2025-08-01 02:02:02,844 | INFO | pyMut.output | Processing sample 189/193: TCGA-AB-2814 (97.9%)\n2025-08-01 02:02:02,853 | INFO | pyMut.output | Sample TCGA-AB-2814: 10 variants found\n2025-08-01 02:02:02,881 | INFO | pyMut.output | Processing sample 192/193: TCGA-AB-2915 (99.5%)\n2025-08-01 02:02:02,890 | INFO | pyMut.output | Sample TCGA-AB-2915: 24 variants found\n2025-08-01 02:02:02,894 | INFO | pyMut.output | Processing sample 193/193: TCGA-AB-2907 (100.0%)\n2025-08-01 02:02:02,905 | INFO | pyMut.output | Sample TCGA-AB-2907: 16 variants found\n2025-08-01 02:02:02,931 | INFO | pyMut.output | Sample processing completed: 193/193 samples processed\n2025-08-01 02:02:02,931 | INFO | pyMut.output | Total variants found: 2207 variants\n2025-08-01 02:02:02,933 | INFO | pyMut.output | Using MAF_COL_ORDER.csv column order: 21 columns arranged\n2025-08-01 02:02:02,935 | INFO | pyMut.output | Writing 2207 variants to file\n2025-08-01 02:02:02,945 | INFO | pyMut.output | Progress: 2207/2207 variants written (100.0%)\n2025-08-01 02:02:02,946 | INFO | pyMut.output | MAF export completed successfully: 2207 variants processed and written to output/combined_2maf_output.maf\n2025-08-01 02:02:02,946 | INFO | pyMut.output | Conversion summary: 193 samples, 2091 input variants, 2207 output variants\n</pre>"},{"location":"examples/data/combination_2maf/#combining-maf-files-with-pymut","title":"Combining MAF Files with pyMut\u00b6","text":"<p>This notebook demonstrates how to combine two MAF files using the <code>combine_pymutations</code> method from pyMut.</p>"},{"location":"examples/data/combination_2maf/#example-combining-tcga-laml-and-paad-tp-maf-files","title":"Example: Combining TCGA LAML and PAAD-TP MAF files\u00b6","text":"<p>We'll load and combine <code>tcga_laml.maf.gz</code> and <code>PAAD-TP.final_analysis_set.maf.gz</code> files, then save the result to the output folder.</p>"},{"location":"examples/data/input_read_maf/","title":"Reading MAF Files with pyMut","text":"In\u00a0[1]: Copied! <pre># Import the read_maf function\nfrom pyMut.input import read_maf\n</pre> # Import the read_maf function from pyMut.input import read_maf  In\u00a0[2]: Copied! <pre># Load the MAF file\nmaf_path = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\"\npy_mut = read_maf(path=maf_path, assembly=\"37\")\n</pre> # Load the MAF file maf_path = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\" py_mut = read_maf(path=maf_path, assembly=\"37\")  <pre>2025-08-01 01:44:49,103 | INFO | pyMut.input | Starting MAF reading: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n2025-08-01 01:44:49,105 | INFO | pyMut.input | Loading from cache: ../../../src/pyMut/data/examples/MAF/.pymut_cache/tcga_laml.maf_8bfbda65c4b23428.parquet\n2025-08-01 01:44:49,131 | INFO | pyMut.input | Cache loaded successfully in 0.03 seconds\n</pre> In\u00a0[3]: Copied! <pre># Display the first 5 rows\npy_mut.head()\n</pre> # Display the first 5 rows py_mut.head()  Out[3]: CHROM POS ID REF ALT QUAL FILTER TCGA-AB-2988 TCGA-AB-2869 TCGA-AB-3009 ... Strand Variant_Classification Variant_Type Reference_Allele Tumor_Seq_Allele1 Tumor_Seq_Allele2 Tumor_Sample_Barcode Protein_Change i_TumorVAF_WU i_transcript_name 0 chr9 100077177 . T C . . T|T T|T T|T ... + SILENT SNP T T C TCGA-AB-2886 p.T431T 9.76 NM_020893.1 1 chr9 100085148 . G A . . G|G G|G G|G ... + MISSENSE_MUTATION SNP G G A TCGA-AB-2917 p.R581H 18.4 NM_020893.1 2 chr9 100971322 . A C . . A|A A|A A|A ... + MISSENSE_MUTATION SNP A A C TCGA-AB-2841 p.L593R 45.83 NM_018421.3 3 chr9 104086335 . C T . . C|C C|C C|C ... + MISSENSE_MUTATION SNP C C T TCGA-AB-2877 p.T325I 37.12 NM_017753.2 4 chr9 104124840 . G A . . G|A G|G G|G ... + MISSENSE_MUTATION SNP G G A TCGA-AB-2988 p.T376M 48.35 NM_001701.1 <p>5 rows \u00d7 216 columns</p>"},{"location":"examples/data/input_read_maf/#reading-maf-files-with-pymut","title":"Reading MAF Files with pyMut\u00b6","text":"<p>This notebook demonstrates how to read MAF files using the <code>read_maf</code> method from pyMut.</p>"},{"location":"examples/data/input_read_maf/#example-loading-tcga-laml-maf-file","title":"Example: Loading TCGA LAML MAF file\u00b6","text":"<p>We'll load the <code>tcga_laml.maf.gz</code> file using assembly 37.</p>"},{"location":"examples/data/input_read_vcf/","title":"Reading VCF Files with pyMut","text":"In\u00a0[1]: Copied! <pre># Import the read_vcf function\nfrom pyMut.input import read_vcf\n</pre> # Import the read_vcf function from pyMut.input import read_vcf  In\u00a0[2]: Copied! <pre># Load the VCF file\nvcf_path = \"../../../src/pyMut/data/examples/VCF/subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased_vep_protein_gene_variant_class.vcf\"\npy_mut = read_vcf(path=vcf_path, assembly=\"38\")\n</pre> # Load the VCF file vcf_path = \"../../../src/pyMut/data/examples/VCF/subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased_vep_protein_gene_variant_class.vcf\" py_mut = read_vcf(path=vcf_path, assembly=\"38\")  <pre>2025-08-01 01:44:54,794 | INFO | pyMut.input | Starting optimized VCF reading: ../../../src/pyMut/data/examples/VCF/subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased_vep_protein_gene_variant_class.vcf\n2025-08-01 01:44:54,795 | INFO | pyMut.input | Loading from cache: ../../../src/pyMut/data/examples/VCF/.pymut_cache/subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased_vep_protein_gene_variant_class_e646b1f7d5dca1c4.parquet\n2025-08-01 01:44:54,959 | INFO | pyMut.input | Cache loaded successfully in 0.16 seconds\n</pre> In\u00a0[3]: Copied! <pre># Display the first 5 rows\npy_mut.head()\n</pre> # Display the first 5 rows py_mut.head()  Out[3]: CHROM POS ID REF ALT QUAL FILTER HG00096 HG00097 HG00099 ... VEP_ENSP VEP_SWISSPROT VEP_TREMBL VEP_UNIPARC VEP_UNIPROT_ISOFORM VEP_NEAREST VEP_DOMAINS Hugo_Symbol Variant_Classification Variant_Type 0 chr10 11501 . C A . PASS C|A C|C C|C ... TUBB8 TUBB8 INTRON SNP 1 chr10 36097 . G A . PASS G|A A|G G|G ... TUBB8 TUBB8 INTRON SNP 2 chr10 45900 . C T . PASS C|C C|C C|C ... ENSP00000456206 Q3ZCM7.157 UPI000007238E TUBB8 TUBB8 3'FLANK SNP 3 chr10 47049 . GGA G . PASS GGA|GGA GGA|GGA GGA|GGA ... ENSP00000456206 Q3ZCM7.157 UPI000007238E TUBB8 TUBB8 3'UTR_DEL DEL 4 chr10 47064 . ACCT A . PASS ACCT|ACCT ACCT|ACCT ACCT|ACCT ... ENSP00000456206 Q3ZCM7.157 UPI000007238E TUBB8 MobiDB_lite:mobidb-lite&amp;MobiDB_lite:mobidb-lit... TUBB8 RNA_DEL DEL <p>5 rows \u00d7 2601 columns</p>"},{"location":"examples/data/input_read_vcf/#reading-vcf-files-with-pymut","title":"Reading VCF Files with pyMut\u00b6","text":"<p>This notebook demonstrates how to read VCF files using the <code>read_vcf</code> method from pyMut.</p>"},{"location":"examples/data/input_read_vcf/#example-loading-1000-genomes-vcf-file","title":"Example: Loading 1000 Genomes VCF file\u00b6","text":"<p>We'll load the <code>subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased_vep_protein_gene_variant_class.vcf</code> file using assembly 38.</p>"},{"location":"examples/data/maf_to_vcf_and_maf/","title":"MAF to VCF and MAF Conversion","text":"In\u00a0[1]: Copied! <pre>import os\nfrom pyMut import read_maf\n\nprint(\"\u2705 Functions imported correctly\")\n</pre> import os from pyMut import read_maf  print(\"\u2705 Functions imported correctly\")  <pre>\u2705 Functions imported correctly\n</pre> In\u00a0[2]: Copied! <pre># Path to the MAF file\nmaf_path = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\"\n\nprint(\"\ud83d\udcc1 File to process:\")\nprint(f\"  - MAF file: {maf_path}\")\n\n# Verify that the file exists\nif os.path.exists(maf_path):\n    print(\"\u2705 File found\")\nelse:\n    print(\"\u274c File not found\")\n</pre> # Path to the MAF file maf_path = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\"  print(\"\ud83d\udcc1 File to process:\") print(f\"  - MAF file: {maf_path}\")  # Verify that the file exists if os.path.exists(maf_path):     print(\"\u2705 File found\") else:     print(\"\u274c File not found\")  <pre>\ud83d\udcc1 File to process:\n  - MAF file: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n\u2705 File found\n</pre> In\u00a0[3]: Copied! <pre>print(\"\ud83d\udcd6 Reading MAF file...\")\n\ntry:\n    # Read the MAF file with assembly=37\n    pymutation_obj = read_maf(maf_path, \"37\")\n    \n    print(\"\u2705 PyMutation object created successfully\")\n    print(f\"   DataFrame shape: {pymutation_obj.data.shape}\")\n    print(f\"   Number of variants: {len(pymutation_obj.data)}\")\n    print(f\"   Number of columns: {len(pymutation_obj.data.columns)}\")\n    print(f\"   Number of samples: {len(pymutation_obj.samples)}\")\n    \nexcept Exception as e:\n    print(f\"\u274c Error reading the file: {e}\")\n    import traceback\n    traceback.print_exc()\n</pre> print(\"\ud83d\udcd6 Reading MAF file...\")  try:     # Read the MAF file with assembly=37     pymutation_obj = read_maf(maf_path, \"37\")          print(\"\u2705 PyMutation object created successfully\")     print(f\"   DataFrame shape: {pymutation_obj.data.shape}\")     print(f\"   Number of variants: {len(pymutation_obj.data)}\")     print(f\"   Number of columns: {len(pymutation_obj.data.columns)}\")     print(f\"   Number of samples: {len(pymutation_obj.samples)}\")      except Exception as e:     print(f\"\u274c Error reading the file: {e}\")     import traceback     traceback.print_exc()  <pre>2025-08-01 01:51:46,880 | INFO | pyMut.input | Starting MAF reading: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n2025-08-01 01:51:46,881 | INFO | pyMut.input | Loading from cache: ../../../src/pyMut/data/examples/MAF/.pymut_cache/tcga_laml.maf_8bfbda65c4b23428.parquet\n2025-08-01 01:51:46,910 | INFO | pyMut.input | Cache loaded successfully in 0.03 seconds\n</pre> <pre>\ud83d\udcd6 Reading MAF file...\n\u2705 PyMutation object created successfully\n   DataFrame shape: (2091, 216)\n   Number of variants: 2091\n   Number of columns: 216\n   Number of samples: 193\n</pre> In\u00a0[4]: Copied! <pre>print(\"\ud83d\udd0d First 3 rows of the DataFrame:\")\npymutation_obj.head(3)\n</pre> print(\"\ud83d\udd0d First 3 rows of the DataFrame:\") pymutation_obj.head(3)  <pre>\ud83d\udd0d First 3 rows of the DataFrame:\n</pre> Out[4]: CHROM POS ID REF ALT QUAL FILTER TCGA-AB-2988 TCGA-AB-2869 TCGA-AB-3009 ... Strand Variant_Classification Variant_Type Reference_Allele Tumor_Seq_Allele1 Tumor_Seq_Allele2 Tumor_Sample_Barcode Protein_Change i_TumorVAF_WU i_transcript_name 0 chr9 100077177 . T C . . T|T T|T T|T ... + SILENT SNP T T C TCGA-AB-2886 p.T431T 9.76 NM_020893.1 1 chr9 100085148 . G A . . G|G G|G G|G ... + MISSENSE_MUTATION SNP G G A TCGA-AB-2917 p.R581H 18.4 NM_020893.1 2 chr9 100971322 . A C . . A|A A|A A|A ... + MISSENSE_MUTATION SNP A A C TCGA-AB-2841 p.L593R 45.83 NM_018421.3 <p>3 rows \u00d7 216 columns</p> In\u00a0[5]: Copied! <pre># Create output directory if it doesn't exist\noutput_dir = \"./output\"\nos.makedirs(output_dir, exist_ok=True)\n\n# Define output paths\nvcf_output_path = os.path.join(output_dir, \"maf_to_vcf_output.vcf\")\nmaf_output_path = os.path.join(output_dir, \"maf_to_maf_output.maf\")\n\nprint(\"\ud83d\udcc1 Output files will be saved to:\")\nprint(f\"  - VCF output: {vcf_output_path}\")\nprint(f\"  - MAF output: {maf_output_path}\")\n</pre> # Create output directory if it doesn't exist output_dir = \"./output\" os.makedirs(output_dir, exist_ok=True)  # Define output paths vcf_output_path = os.path.join(output_dir, \"maf_to_vcf_output.vcf\") maf_output_path = os.path.join(output_dir, \"maf_to_maf_output.maf\")  print(\"\ud83d\udcc1 Output files will be saved to:\") print(f\"  - VCF output: {vcf_output_path}\") print(f\"  - MAF output: {maf_output_path}\")  <pre>\ud83d\udcc1 Output files will be saved to:\n  - VCF output: ./output/maf_to_vcf_output.vcf\n  - MAF output: ./output/maf_to_maf_output.maf\n</pre> In\u00a0[6]: Copied! <pre>print(\"\ud83d\udcdd Exporting to VCF format...\")\n\ntry:\n    # Export to VCF format\n    pymutation_obj.to_vcf(vcf_output_path)\n    \n    # Check if the file was created\n    if os.path.exists(vcf_output_path):\n        print(f\"\u2705 VCF file created successfully: {vcf_output_path}\")\n        print(f\"   File size: {os.path.getsize(vcf_output_path) / (1024 * 1024):.2f} MB\")\n    else:\n        print(\"\u274c VCF file was not created\")\n        \nexcept Exception as e:\n    print(f\"\u274c Error exporting to VCF: {e}\")\n    import traceback\n    traceback.print_exc()\n</pre> print(\"\ud83d\udcdd Exporting to VCF format...\")  try:     # Export to VCF format     pymutation_obj.to_vcf(vcf_output_path)          # Check if the file was created     if os.path.exists(vcf_output_path):         print(f\"\u2705 VCF file created successfully: {vcf_output_path}\")         print(f\"   File size: {os.path.getsize(vcf_output_path) / (1024 * 1024):.2f} MB\")     else:         print(\"\u274c VCF file was not created\")          except Exception as e:     print(f\"\u274c Error exporting to VCF: {e}\")     import traceback     traceback.print_exc()  <pre>2025-08-01 01:51:47,147 | INFO | pyMut.output | Starting VCF export to: output/maf_to_vcf_output.vcf\n2025-08-01 01:51:47,150 | INFO | pyMut.output | Starting to process 2091 variants from 193 samples\n</pre> <pre>\ud83d\udcdd Exporting to VCF format...\n</pre> <pre>2025-08-01 01:51:47,263 | INFO | pyMut.output | Processing genotype data to replace bases with indices\n2025-08-01 01:51:50,943 | INFO | pyMut.output | Writing 2091 variants to file\n2025-08-01 01:51:51,008 | INFO | pyMut.output | Progress: 2091/2091 variants written (100.0%)\n2025-08-01 01:51:51,011 | INFO | pyMut.output | VCF export completed successfully: 2091 variants processed and written to output/maf_to_vcf_output.vcf\n2025-08-01 01:51:51,012 | INFO | pyMut.output | Conversion summary: 193 samples, 2091 input variants, 2091 output variants\n</pre> <pre>\u2705 VCF file created successfully: ./output/maf_to_vcf_output.vcf\n   File size: 1.84 MB\n</pre> In\u00a0[7]: Copied! <pre>print(\"\ud83d\udcdd Exporting to MAF format...\")\n\ntry:\n    # Export to MAF format\n    pymutation_obj.to_maf(maf_output_path)\n    \n    # Check if the file was created\n    if os.path.exists(maf_output_path):\n        print(f\"\u2705 MAF file created successfully: {maf_output_path}\")\n        print(f\"   File size: {os.path.getsize(maf_output_path) / (1024 * 1024):.2f} MB\")\n    else:\n        print(\"\u274c MAF file was not created\")\n        \nexcept Exception as e:\n    print(f\"\u274c Error exporting to MAF: {e}\")\n    import traceback\n    traceback.print_exc()\n</pre> print(\"\ud83d\udcdd Exporting to MAF format...\")  try:     # Export to MAF format     pymutation_obj.to_maf(maf_output_path)          # Check if the file was created     if os.path.exists(maf_output_path):         print(f\"\u2705 MAF file created successfully: {maf_output_path}\")         print(f\"   File size: {os.path.getsize(maf_output_path) / (1024 * 1024):.2f} MB\")     else:         print(\"\u274c MAF file was not created\")          except Exception as e:     print(f\"\u274c Error exporting to MAF: {e}\")     import traceback     traceback.print_exc()  <pre>2025-08-01 01:51:51,038 | INFO | pyMut.output | Starting MAF export to: output/maf_to_maf_output.maf\n2025-08-01 01:51:51,039 | INFO | pyMut.output | Starting to process 2091 variants from 193 samples\n2025-08-01 01:51:51,043 | INFO | pyMut.output | Processing sample 1/193: TCGA-AB-2988 (0.5%)\n2025-08-01 01:51:51,056 | INFO | pyMut.output | Sample TCGA-AB-2988: 15 variants found\n2025-08-01 01:51:51,085 | INFO | pyMut.output | Processing sample 3/193: TCGA-AB-3009 (1.6%)\n2025-08-01 01:51:51,098 | INFO | pyMut.output | Sample TCGA-AB-3009: 42 variants found\n2025-08-01 01:51:51,132 | INFO | pyMut.output | Processing sample 6/193: TCGA-AB-2920 (3.1%)\n2025-08-01 01:51:51,144 | INFO | pyMut.output | Sample TCGA-AB-2920: 11 variants found\n2025-08-01 01:51:51,180 | INFO | pyMut.output | Processing sample 9/193: TCGA-AB-2999 (4.7%)\n2025-08-01 01:51:51,191 | INFO | pyMut.output | Sample TCGA-AB-2999: 11 variants found\n2025-08-01 01:51:51,224 | INFO | pyMut.output | Processing sample 12/193: TCGA-AB-2923 (6.2%)\n</pre> <pre>\ud83d\udcdd Exporting to MAF format...\n</pre> <pre>2025-08-01 01:51:51,235 | INFO | pyMut.output | Sample TCGA-AB-2923: 23 variants found\n2025-08-01 01:51:51,269 | INFO | pyMut.output | Processing sample 15/193: TCGA-AB-2931 (7.8%)\n2025-08-01 01:51:51,280 | INFO | pyMut.output | Sample TCGA-AB-2931: 11 variants found\n2025-08-01 01:51:51,312 | INFO | pyMut.output | Processing sample 18/193: TCGA-AB-2906 (9.3%)\n2025-08-01 01:51:51,322 | INFO | pyMut.output | Sample TCGA-AB-2906: 15 variants found\n2025-08-01 01:51:51,354 | INFO | pyMut.output | Processing sample 21/193: TCGA-AB-2945 (10.9%)\n2025-08-01 01:51:51,363 | INFO | pyMut.output | Sample TCGA-AB-2945: 13 variants found\n2025-08-01 01:51:51,396 | INFO | pyMut.output | Processing sample 24/193: TCGA-AB-2952 (12.4%)\n2025-08-01 01:51:51,407 | INFO | pyMut.output | Sample TCGA-AB-2952: 15 variants found\n2025-08-01 01:51:51,439 | INFO | pyMut.output | Processing sample 27/193: TCGA-AB-2862 (14.0%)\n2025-08-01 01:51:51,451 | INFO | pyMut.output | Sample TCGA-AB-2862: 11 variants found\n2025-08-01 01:51:51,485 | INFO | pyMut.output | Processing sample 30/193: TCGA-AB-2911 (15.5%)\n2025-08-01 01:51:51,496 | INFO | pyMut.output | Sample TCGA-AB-2911: 2 variants found\n2025-08-01 01:51:51,528 | INFO | pyMut.output | Processing sample 33/193: TCGA-AB-2910 (17.1%)\n2025-08-01 01:51:51,539 | INFO | pyMut.output | Sample TCGA-AB-2910: 12 variants found\n2025-08-01 01:51:51,572 | INFO | pyMut.output | Processing sample 36/193: TCGA-AB-2822 (18.7%)\n2025-08-01 01:51:51,583 | INFO | pyMut.output | Sample TCGA-AB-2822: 22 variants found\n2025-08-01 01:51:51,618 | INFO | pyMut.output | Processing sample 39/193: TCGA-AB-2807 (20.2%)\n2025-08-01 01:51:51,629 | INFO | pyMut.output | Sample TCGA-AB-2807: 29 variants found\n2025-08-01 01:51:51,662 | INFO | pyMut.output | Processing sample 42/193: TCGA-AB-2897 (21.8%)\n2025-08-01 01:51:51,673 | INFO | pyMut.output | Sample TCGA-AB-2897: 7 variants found\n2025-08-01 01:51:51,708 | INFO | pyMut.output | Processing sample 45/193: TCGA-AB-2929 (23.3%)\n2025-08-01 01:51:51,719 | INFO | pyMut.output | Sample TCGA-AB-2929: 16 variants found\n2025-08-01 01:51:51,752 | INFO | pyMut.output | Processing sample 48/193: TCGA-AB-2935 (24.9%)\n2025-08-01 01:51:51,763 | INFO | pyMut.output | Sample TCGA-AB-2935: 10 variants found\n2025-08-01 01:51:51,799 | INFO | pyMut.output | Processing sample 51/193: TCGA-AB-2889 (26.4%)\n2025-08-01 01:51:51,811 | INFO | pyMut.output | Sample TCGA-AB-2889: 5 variants found\n2025-08-01 01:51:51,848 | INFO | pyMut.output | Processing sample 54/193: TCGA-AB-2990 (28.0%)\n2025-08-01 01:51:51,859 | INFO | pyMut.output | Sample TCGA-AB-2990: 9 variants found\n2025-08-01 01:51:51,892 | INFO | pyMut.output | Processing sample 57/193: TCGA-AB-2864 (29.5%)\n2025-08-01 01:51:51,902 | INFO | pyMut.output | Sample TCGA-AB-2864: 16 variants found\n2025-08-01 01:51:51,929 | INFO | pyMut.output | Processing sample 60/193: TCGA-AB-2903 (31.1%)\n2025-08-01 01:51:51,934 | INFO | pyMut.output | Sample TCGA-AB-2903: 1 variants found\n2025-08-01 01:51:51,960 | INFO | pyMut.output | Processing sample 63/193: TCGA-AB-2959 (32.6%)\n2025-08-01 01:51:51,967 | INFO | pyMut.output | Sample TCGA-AB-2959: 27 variants found\n2025-08-01 01:51:51,988 | INFO | pyMut.output | Processing sample 66/193: TCGA-AB-2888 (34.2%)\n2025-08-01 01:51:51,993 | INFO | pyMut.output | Sample TCGA-AB-2888: 9 variants found\n2025-08-01 01:51:52,013 | INFO | pyMut.output | Processing sample 69/193: TCGA-AB-3002 (35.8%)\n2025-08-01 01:51:52,019 | INFO | pyMut.output | Sample TCGA-AB-3002: 27 variants found\n2025-08-01 01:51:52,042 | INFO | pyMut.output | Processing sample 72/193: TCGA-AB-2991 (37.3%)\n2025-08-01 01:51:52,048 | INFO | pyMut.output | Sample TCGA-AB-2991: 8 variants found\n2025-08-01 01:51:52,143 | INFO | pyMut.output | Processing sample 75/193: TCGA-AB-2874 (38.9%)\n2025-08-01 01:51:52,150 | INFO | pyMut.output | Sample TCGA-AB-2874: 15 variants found\n2025-08-01 01:51:52,171 | INFO | pyMut.output | Processing sample 78/193: TCGA-AB-2821 (40.4%)\n2025-08-01 01:51:52,176 | INFO | pyMut.output | Sample TCGA-AB-2821: 15 variants found\n2025-08-01 01:51:52,195 | INFO | pyMut.output | Processing sample 81/193: TCGA-AB-2814 (42.0%)\n2025-08-01 01:51:52,200 | INFO | pyMut.output | Sample TCGA-AB-2814: 10 variants found\n2025-08-01 01:51:52,221 | INFO | pyMut.output | Processing sample 84/193: TCGA-AB-2978 (43.5%)\n2025-08-01 01:51:52,226 | INFO | pyMut.output | Sample TCGA-AB-2978: 18 variants found\n2025-08-01 01:51:52,246 | INFO | pyMut.output | Processing sample 87/193: TCGA-AB-3006 (45.1%)\n2025-08-01 01:51:52,253 | INFO | pyMut.output | Sample TCGA-AB-3006: 19 variants found\n2025-08-01 01:51:52,274 | INFO | pyMut.output | Processing sample 90/193: TCGA-AB-2857 (46.6%)\n2025-08-01 01:51:52,279 | INFO | pyMut.output | Sample TCGA-AB-2857: 14 variants found\n2025-08-01 01:51:52,299 | INFO | pyMut.output | Processing sample 93/193: TCGA-AB-2813 (48.2%)\n2025-08-01 01:51:52,304 | INFO | pyMut.output | Sample TCGA-AB-2813: 16 variants found\n2025-08-01 01:51:52,323 | INFO | pyMut.output | Processing sample 96/193: TCGA-AB-2970 (49.7%)\n2025-08-01 01:51:52,329 | INFO | pyMut.output | Sample TCGA-AB-2970: 8 variants found\n2025-08-01 01:51:52,351 | INFO | pyMut.output | Processing sample 99/193: TCGA-AB-2971 (51.3%)\n2025-08-01 01:51:52,356 | INFO | pyMut.output | Sample TCGA-AB-2971: 11 variants found\n2025-08-01 01:51:52,376 | INFO | pyMut.output | Processing sample 102/193: TCGA-AB-2985 (52.8%)\n2025-08-01 01:51:52,383 | INFO | pyMut.output | Sample TCGA-AB-2985: 5 variants found\n2025-08-01 01:51:52,404 | INFO | pyMut.output | Processing sample 105/193: TCGA-AB-2851 (54.4%)\n2025-08-01 01:51:52,409 | INFO | pyMut.output | Sample TCGA-AB-2851: 7 variants found\n2025-08-01 01:51:52,428 | INFO | pyMut.output | Processing sample 108/193: TCGA-AB-2858 (56.0%)\n2025-08-01 01:51:52,434 | INFO | pyMut.output | Sample TCGA-AB-2858: 13 variants found\n2025-08-01 01:51:52,453 | INFO | pyMut.output | Processing sample 111/193: TCGA-AB-2868 (57.5%)\n2025-08-01 01:51:52,458 | INFO | pyMut.output | Sample TCGA-AB-2868: 13 variants found\n2025-08-01 01:51:52,478 | INFO | pyMut.output | Processing sample 114/193: TCGA-AB-2937 (59.1%)\n2025-08-01 01:51:52,484 | INFO | pyMut.output | Sample TCGA-AB-2937: 12 variants found\n2025-08-01 01:51:52,503 | INFO | pyMut.output | Processing sample 117/193: TCGA-AB-2881 (60.6%)\n2025-08-01 01:51:52,510 | INFO | pyMut.output | Sample TCGA-AB-2881: 9 variants found\n2025-08-01 01:51:52,531 | INFO | pyMut.output | Processing sample 120/193: TCGA-AB-2803 (62.2%)\n2025-08-01 01:51:52,536 | INFO | pyMut.output | Sample TCGA-AB-2803: 15 variants found\n2025-08-01 01:51:52,556 | INFO | pyMut.output | Processing sample 123/193: TCGA-AB-2806 (63.7%)\n2025-08-01 01:51:52,561 | INFO | pyMut.output | Sample TCGA-AB-2806: 17 variants found\n2025-08-01 01:51:52,580 | INFO | pyMut.output | Processing sample 126/193: TCGA-AB-2810 (65.3%)\n2025-08-01 01:51:52,587 | INFO | pyMut.output | Sample TCGA-AB-2810: 14 variants found\n2025-08-01 01:51:52,607 | INFO | pyMut.output | Processing sample 129/193: TCGA-AB-2849 (66.8%)\n2025-08-01 01:51:52,612 | INFO | pyMut.output | Sample TCGA-AB-2849: 26 variants found\n2025-08-01 01:51:52,632 | INFO | pyMut.output | Processing sample 132/193: TCGA-AB-2928 (68.4%)\n2025-08-01 01:51:52,638 | INFO | pyMut.output | Sample TCGA-AB-2928: 10 variants found\n2025-08-01 01:51:52,659 | INFO | pyMut.output | Processing sample 135/193: TCGA-AB-2843 (69.9%)\n2025-08-01 01:51:52,664 | INFO | pyMut.output | Sample TCGA-AB-2843: 12 variants found\n2025-08-01 01:51:52,685 | INFO | pyMut.output | Processing sample 138/193: TCGA-AB-2940 (71.5%)\n2025-08-01 01:51:52,691 | INFO | pyMut.output | Sample TCGA-AB-2940: 4 variants found\n2025-08-01 01:51:52,710 | INFO | pyMut.output | Processing sample 141/193: TCGA-AB-3007 (73.1%)\n2025-08-01 01:51:52,716 | INFO | pyMut.output | Sample TCGA-AB-3007: 8 variants found\n2025-08-01 01:51:52,736 | INFO | pyMut.output | Processing sample 144/193: TCGA-AB-2983 (74.6%)\n2025-08-01 01:51:52,741 | INFO | pyMut.output | Sample TCGA-AB-2983: 14 variants found\n2025-08-01 01:51:52,762 | INFO | pyMut.output | Processing sample 147/193: TCGA-AB-2829 (76.2%)\n2025-08-01 01:51:52,768 | INFO | pyMut.output | Sample TCGA-AB-2829: 10 variants found\n2025-08-01 01:51:52,788 | INFO | pyMut.output | Processing sample 150/193: TCGA-AB-2946 (77.7%)\n2025-08-01 01:51:52,794 | INFO | pyMut.output | Sample TCGA-AB-2946: 3 variants found\n2025-08-01 01:51:52,814 | INFO | pyMut.output | Processing sample 153/193: TCGA-AB-2809 (79.3%)\n2025-08-01 01:51:52,819 | INFO | pyMut.output | Sample TCGA-AB-2809: 4 variants found\n2025-08-01 01:51:52,838 | INFO | pyMut.output | Processing sample 156/193: TCGA-AB-2873 (80.8%)\n2025-08-01 01:51:52,843 | INFO | pyMut.output | Sample TCGA-AB-2873: 2 variants found\n2025-08-01 01:51:52,862 | INFO | pyMut.output | Processing sample 159/193: TCGA-AB-2919 (82.4%)\n2025-08-01 01:51:52,867 | INFO | pyMut.output | Sample TCGA-AB-2919: 11 variants found\n2025-08-01 01:51:52,888 | INFO | pyMut.output | Processing sample 162/193: TCGA-AB-2967 (83.9%)\n2025-08-01 01:51:52,893 | INFO | pyMut.output | Sample TCGA-AB-2967: 11 variants found\n2025-08-01 01:51:52,913 | INFO | pyMut.output | Processing sample 165/193: TCGA-AB-2981 (85.5%)\n2025-08-01 01:51:52,918 | INFO | pyMut.output | Sample TCGA-AB-2981: 6 variants found\n2025-08-01 01:51:52,939 | INFO | pyMut.output | Processing sample 168/193: TCGA-AB-2877 (87.0%)\n2025-08-01 01:51:52,946 | INFO | pyMut.output | Sample TCGA-AB-2877: 20 variants found\n2025-08-01 01:51:52,967 | INFO | pyMut.output | Processing sample 171/193: TCGA-AB-2998 (88.6%)\n2025-08-01 01:51:52,971 | INFO | pyMut.output | Sample TCGA-AB-2998: 10 variants found\n2025-08-01 01:51:52,991 | INFO | pyMut.output | Processing sample 174/193: TCGA-AB-2982 (90.2%)\n2025-08-01 01:51:52,997 | INFO | pyMut.output | Sample TCGA-AB-2982: 2 variants found\n2025-08-01 01:51:53,016 | INFO | pyMut.output | Processing sample 177/193: TCGA-AB-2840 (91.7%)\n2025-08-01 01:51:53,023 | INFO | pyMut.output | Sample TCGA-AB-2840: 1 variants found\n2025-08-01 01:51:53,044 | INFO | pyMut.output | Processing sample 180/193: TCGA-AB-2942 (93.3%)\n2025-08-01 01:51:53,050 | INFO | pyMut.output | Sample TCGA-AB-2942: 1 variants found\n2025-08-01 01:51:53,072 | INFO | pyMut.output | Processing sample 183/193: TCGA-AB-2826 (94.8%)\n2025-08-01 01:51:53,077 | INFO | pyMut.output | Sample TCGA-AB-2826: 4 variants found\n2025-08-01 01:51:53,099 | INFO | pyMut.output | Processing sample 186/193: TCGA-AB-2948 (96.4%)\n2025-08-01 01:51:53,105 | INFO | pyMut.output | Sample TCGA-AB-2948: 2 variants found\n2025-08-01 01:51:53,125 | INFO | pyMut.output | Processing sample 189/193: TCGA-AB-2941 (97.9%)\n2025-08-01 01:51:53,131 | INFO | pyMut.output | Sample TCGA-AB-2941: 5 variants found\n2025-08-01 01:51:53,152 | INFO | pyMut.output | Processing sample 192/193: TCGA-AB-2855 (99.5%)\n2025-08-01 01:51:53,158 | INFO | pyMut.output | Sample TCGA-AB-2855: 4 variants found\n2025-08-01 01:51:53,162 | INFO | pyMut.output | Processing sample 193/193: TCGA-AB-2933 (100.0%)\n2025-08-01 01:51:53,170 | INFO | pyMut.output | Sample TCGA-AB-2933: 1 variants found\n2025-08-01 01:51:53,226 | INFO | pyMut.output | Sample processing completed: 193/193 samples processed\n2025-08-01 01:51:53,226 | INFO | pyMut.output | Total variants found: 2207 variants\n2025-08-01 01:51:53,235 | INFO | pyMut.output | Using MAF_COL_ORDER.csv column order: 21 columns arranged\n2025-08-01 01:51:53,239 | INFO | pyMut.output | Writing 2207 variants to file\n2025-08-01 01:51:53,254 | INFO | pyMut.output | Progress: 2207/2207 variants written (100.0%)\n2025-08-01 01:51:53,255 | INFO | pyMut.output | MAF export completed successfully: 2207 variants processed and written to output/maf_to_maf_output.maf\n2025-08-01 01:51:53,255 | INFO | pyMut.output | Conversion summary: 193 samples, 2091 input variants, 2207 output variants\n</pre> <pre>\u2705 MAF file created successfully: ./output/maf_to_maf_output.maf\n   File size: 0.35 MB\n</pre> In\u00a0[8]: Copied! <pre># Show the first few lines of the exported VCF file\nprint(\"\ud83d\udd0d First 10 lines of the exported VCF file:\")\n!head -10 {vcf_output_path}\n</pre> # Show the first few lines of the exported VCF file print(\"\ud83d\udd0d First 10 lines of the exported VCF file:\") !head -10 {vcf_output_path}  <pre>\ud83d\udd0d First 10 lines of the exported VCF file:\n/bin/bash: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8)\r\n##fileformat=VCFv4.3\r\n##fileDate=20250801\r\n##source=https://github.com/Luisruimor/pyMut\r\n##reference=37\r\n##FILTER=&lt;ID=PASS,Description=\"All filters passed\"&gt;\r\n##contig=&lt;ID=9&gt;\r\n##contig=&lt;ID=X&gt;\r\n##contig=&lt;ID=14&gt;\r\n##contig=&lt;ID=2&gt;\r\n##contig=&lt;ID=12&gt;\r\n</pre> In\u00a0[9]: Copied! <pre># Show the first few lines of the exported MAF file\nprint(\"\ud83d\udd0d First 10 lines of the exported MAF file:\")\n!head -10 {maf_output_path}\n</pre> # Show the first few lines of the exported MAF file print(\"\ud83d\udd0d First 10 lines of the exported MAF file:\") !head -10 {maf_output_path}  <pre>\ud83d\udd0d First 10 lines of the exported MAF file:\n/bin/bash: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8)\r\nHugo_Symbol\tEntrez_Gene_Id\tCenter\tNCBI_Build\tNCBI_Build\tChromosome\tStart_Position\tStart_Position\tEnd_Position\tStrand\tVariant_Classification\tVariant_Type\tReference_Allele\tReference_Allele\tTumor_Seq_Allele1\tTumor_Seq_Allele1\tTumor_Seq_Allele2\tTumor_Seq_Allele2\tdbSNP_RS\tTumor_Sample_Barcode\tTumor_Sample_Barcode\tFILTER\ti_TumorVAF_WU\tEnd_position\tProtein_Change\ti_transcript_name\tQUAL\r\nBAAT\t570\tgenome.wustl.edu\t37\t37\t9\t104124840\t104124840\t104124840\t+\tMISSENSE_MUTATION\tSNP\tG\tG\tG\tG\tA\tA\t.\tTCGA-AB-2988\tTCGA-AB-2988\t.\t48.35\t104124840\tp.T376M\tNM_001701.1\t.\r\nTKTL1\t8277\tgenome.wustl.edu\t37\t37\tX\t153557894\t153557894\t153557894\t+\tSILENT\tSNP\tC\tC\tC\tC\tT\tT\t.\tTCGA-AB-2988\tTCGA-AB-2988\t.\t41.11\t153557894\tp.A549A\tNM_012253.1\t.\r\nANG\t283\tgenome.wustl.edu\t37\t37\t14\t21161742\t21161742\t21161742\t+\tMISSENSE_MUTATION\tSNP\tG\tG\tG\tG\tA\tA\t.\tTCGA-AB-2988\tTCGA-AB-2988\t.\t47.43\t21161742\tp.V7I\tNM_001097577.2\t.\r\nDNMT3A\t1788\tgenome.wustl.edu\t37\t37\t2\t25457161\t25457161\t25457161\t+\tMISSENSE_MUTATION\tSNP\tA\tA\tA\tA\tC\tC\t.\tTCGA-AB-2988\tTCGA-AB-2988\t.\t45.44\t25457161\tp.F909C\tNM_022552.3\t.\r\nLRWD1\t222229\tgenome.wustl.edu\t37\t37\t7\t102106693\t102106693\t102106693\t+\tMISSENSE_MUTATION\tSNP\tC\tC\tC\tC\tA\tA\t.\tTCGA-AB-2988\tTCGA-AB-2988\t.\t46.34\t102106693\tp.N136K\tNM_152892.1\t.\r\nGUCA2A\t2980\tgenome.wustl.edu\t37\t37\t1\t42629190\t42629190\t42629190\t+\tMISSENSE_MUTATION\tSNP\tA\tA\tA\tA\tG\tG\t.\tTCGA-AB-2988\tTCGA-AB-2988\t.\t42.08\t42629190\tp.F56S\tNM_033553.2\t.\r\nSPTBN5\t51332\tgenome.wustl.edu\t37\t37\t15\t42168393\t42168393\t42168393\t+\tSILENT\tSNP\tG\tG\tG\tG\tA\tA\t.\tTCGA-AB-2988\tTCGA-AB-2988\t.\t49.28\t42168393\tp.N1347N\tNM_016642.2\t.\r\nSLC17A3\t10786\tgenome.wustl.edu\t37\t37\t6\t25850330\t25850330\t25850330\t+\tMISSENSE_MUTATION\tSNP\tG\tG\tG\tG\tA\tA\t.\tTCGA-AB-2988\tTCGA-AB-2988\t.\t44.82\t25850330\tp.L279F\tNM_001098486.1\t.\r\nNPM1\t4869\tgenome.wustl.edu\t37\t37\t5\t170837547\t170837547\t170837547\t+\tFRAME_SHIFT_INS\tINS\t-\t-\t-\t-\tCATG\tCATG\t.\tTCGA-AB-2988\tTCGA-AB-2988\t.\t\t170837548\tp.WQ288fs\tNM_002520.1\t.\r\n</pre>"},{"location":"examples/data/maf_to_vcf_and_maf/#maf-to-vcf-and-maf-conversion","title":"MAF to VCF and MAF Conversion\u00b6","text":"<p>This notebook demonstrates how to:</p> <ol> <li>Read a MAF file using <code>read_maf</code> with assembly=37</li> <li>Export the PyMutation object to VCF format using <code>to_vcf</code></li> <li>Export the PyMutation object to MAF format using <code>to_maf</code></li> </ol>"},{"location":"examples/data/maf_to_vcf_and_maf/#import-the-necessary-functions","title":"Import the necessary functions\u00b6","text":""},{"location":"examples/data/maf_to_vcf_and_maf/#define-the-path-to-the-maf-file","title":"Define the path to the MAF file\u00b6","text":""},{"location":"examples/data/maf_to_vcf_and_maf/#read-the-maf-file-with-assembly37","title":"Read the MAF file with assembly=37\u00b6","text":""},{"location":"examples/data/maf_to_vcf_and_maf/#show-the-first-rows-of-the-dataframe","title":"Show the first rows of the DataFrame\u00b6","text":""},{"location":"examples/data/maf_to_vcf_and_maf/#define-output-paths-for-vcf-and-maf-exports","title":"Define output paths for VCF and MAF exports\u00b6","text":""},{"location":"examples/data/maf_to_vcf_and_maf/#export-to-vcf-format","title":"Export to VCF format\u00b6","text":""},{"location":"examples/data/maf_to_vcf_and_maf/#export-to-maf-format","title":"Export to MAF format\u00b6","text":""},{"location":"examples/data/maf_to_vcf_and_maf/#examine-the-exported-files","title":"Examine the exported files\u00b6","text":""},{"location":"examples/data/maf_to_vcf_and_maf/#summary","title":"Summary\u00b6","text":"<p>In this notebook, we demonstrated how to:</p> <ol> <li>Read a MAF file using <code>read_maf</code> with assembly=37</li> <li>Export the PyMutation object to VCF format using <code>to_vcf</code></li> <li>Export the PyMutation object to MAF format using <code>to_maf</code></li> </ol> <p>These conversion capabilities allow for seamless interoperability between different mutation data formats.</p>"},{"location":"examples/data/vcf_to_maf_and_vcf/","title":"VCF to MAF and VCF Conversion","text":"In\u00a0[1]: Copied! <pre>import os\nfrom pyMut import read_vcf, read_maf\n\nprint(\"\u2705 Functions imported correctly\")\n</pre> import os from pyMut import read_vcf, read_maf  print(\"\u2705 Functions imported correctly\")  <pre>\u2705 Functions imported correctly\n</pre> In\u00a0[2]: Copied! <pre># Path to the VCF file with VEP annotations\nvcf_path = \"../../../src/pyMut/data/examples/VCF/subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased_vep_protein_gene_variant_class.vcf\"\n\nprint(\"\ud83d\udcc1 File to process:\")\nprint(f\"  - VCF file: {vcf_path}\")\n\n# Verify that the file exists\nif os.path.exists(vcf_path):\n    print(\"\u2705 File found\")\nelse:\n    print(\"\u274c File not found\")\n</pre> # Path to the VCF file with VEP annotations vcf_path = \"../../../src/pyMut/data/examples/VCF/subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased_vep_protein_gene_variant_class.vcf\"  print(\"\ud83d\udcc1 File to process:\") print(f\"  - VCF file: {vcf_path}\")  # Verify that the file exists if os.path.exists(vcf_path):     print(\"\u2705 File found\") else:     print(\"\u274c File not found\")  <pre>\ud83d\udcc1 File to process:\n  - VCF file: ../../../src/pyMut/data/examples/VCF/subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased_vep_protein_gene_variant_class.vcf\n\u2705 File found\n</pre> In\u00a0[3]: Copied! <pre>print(\"\ud83d\udcd6 Reading VCF file...\")\n\ntry:\n    # Read the VCF file with assembly=38\n    pymutation_obj = read_vcf(vcf_path, \"38\")\n    \n    print(\"\u2705 PyMutation object created successfully\")\n    print(f\"   DataFrame shape: {pymutation_obj.data.shape}\")\n    print(f\"   Number of variants: {len(pymutation_obj.data)}\")\n    print(f\"   Number of columns: {len(pymutation_obj.data.columns)}\")\n    print(f\"   Number of samples: {len(pymutation_obj.samples)}\")\n    \nexcept Exception as e:\n    print(f\"\u274c Error reading the file: {e}\")\n    import traceback\n    traceback.print_exc()\n</pre> print(\"\ud83d\udcd6 Reading VCF file...\")  try:     # Read the VCF file with assembly=38     pymutation_obj = read_vcf(vcf_path, \"38\")          print(\"\u2705 PyMutation object created successfully\")     print(f\"   DataFrame shape: {pymutation_obj.data.shape}\")     print(f\"   Number of variants: {len(pymutation_obj.data)}\")     print(f\"   Number of columns: {len(pymutation_obj.data.columns)}\")     print(f\"   Number of samples: {len(pymutation_obj.samples)}\")      except Exception as e:     print(f\"\u274c Error reading the file: {e}\")     import traceback     traceback.print_exc()  <pre>2025-08-01 01:52:22,915 | INFO | pyMut.input | Starting optimized VCF reading: ../../../src/pyMut/data/examples/VCF/subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased_vep_protein_gene_variant_class.vcf\n2025-08-01 01:52:22,916 | INFO | pyMut.input | Loading from cache: ../../../src/pyMut/data/examples/VCF/.pymut_cache/subset_1k_variants_ALL.chr10.shapeit2_integrated_snvindels_v2a_27022019.GRCh38.phased_vep_protein_gene_variant_class_e646b1f7d5dca1c4.parquet\n</pre> <pre>\ud83d\udcd6 Reading VCF file...\n</pre> <pre>2025-08-01 01:52:23,063 | INFO | pyMut.input | Cache loaded successfully in 0.15 seconds\n</pre> <pre>\u2705 PyMutation object created successfully\n   DataFrame shape: (1000, 2601)\n   Number of variants: 1000\n   Number of columns: 2601\n   Number of samples: 2548\n</pre> In\u00a0[4]: Copied! <pre>print(\"\ud83d\udd0d First 3 rows of the DataFrame:\")\npymutation_obj.head(3)\n</pre> print(\"\ud83d\udd0d First 3 rows of the DataFrame:\") pymutation_obj.head(3)  <pre>\ud83d\udd0d First 3 rows of the DataFrame:\n</pre> Out[4]: CHROM POS ID REF ALT QUAL FILTER HG00096 HG00097 HG00099 ... VEP_ENSP VEP_SWISSPROT VEP_TREMBL VEP_UNIPARC VEP_UNIPROT_ISOFORM VEP_NEAREST VEP_DOMAINS Hugo_Symbol Variant_Classification Variant_Type 0 chr10 11501 . C A . PASS C|A C|C C|C ... TUBB8 TUBB8 INTRON SNP 1 chr10 36097 . G A . PASS G|A A|G G|G ... TUBB8 TUBB8 INTRON SNP 2 chr10 45900 . C T . PASS C|C C|C C|C ... ENSP00000456206 Q3ZCM7.157 UPI000007238E TUBB8 TUBB8 3'FLANK SNP <p>3 rows \u00d7 2601 columns</p> In\u00a0[5]: Copied! <pre># Create output directory if it doesn't exist\noutput_dir = \"./output\"\nos.makedirs(output_dir, exist_ok=True)\n\n# Define output paths\nmaf_output_path = os.path.join(output_dir, \"vcf_to_maf_output.maf\")\nvcf_output_path = os.path.join(output_dir, \"vcf_to_vcf_output.vcf\")\n\nprint(\"\ud83d\udcc1 Output files will be saved to:\")\nprint(f\"  - MAF output: {maf_output_path}\")\nprint(f\"  - VCF output: {vcf_output_path}\")\n</pre> # Create output directory if it doesn't exist output_dir = \"./output\" os.makedirs(output_dir, exist_ok=True)  # Define output paths maf_output_path = os.path.join(output_dir, \"vcf_to_maf_output.maf\") vcf_output_path = os.path.join(output_dir, \"vcf_to_vcf_output.vcf\")  print(\"\ud83d\udcc1 Output files will be saved to:\") print(f\"  - MAF output: {maf_output_path}\") print(f\"  - VCF output: {vcf_output_path}\")  <pre>\ud83d\udcc1 Output files will be saved to:\n  - MAF output: ./output/vcf_to_maf_output.maf\n  - VCF output: ./output/vcf_to_vcf_output.vcf\n</pre> In\u00a0[\u00a0]: Copied! <pre>print(\"\ud83d\udcdd Exporting to MAF format...\")\n\ntry:\n    # Export to MAF format\n    pymutation_obj.to_maf(maf_output_path)\n    \n    # Check if the file was created\n    if os.path.exists(maf_output_path):\n        print(f\"\u2705 MAF file created successfully: {maf_output_path}\")\n        print(f\"   File size: {os.path.getsize(maf_output_path) / (1024 * 1024):.2f} MB\")\n    else:\n        print(\"\u274c MAF file was not created\")\n        \nexcept Exception as e:\n    print(f\"\u274c Error exporting to MAF: {e}\")\n    import traceback\n    traceback.print_exc()\n</pre> print(\"\ud83d\udcdd Exporting to MAF format...\")  try:     # Export to MAF format     pymutation_obj.to_maf(maf_output_path)          # Check if the file was created     if os.path.exists(maf_output_path):         print(f\"\u2705 MAF file created successfully: {maf_output_path}\")         print(f\"   File size: {os.path.getsize(maf_output_path) / (1024 * 1024):.2f} MB\")     else:         print(\"\u274c MAF file was not created\")          except Exception as e:     print(f\"\u274c Error exporting to MAF: {e}\")     import traceback     traceback.print_exc()  <pre>2025-08-01 01:52:23,410 | INFO | pyMut.output | Starting MAF export to: output/vcf_to_maf_output.maf\n2025-08-01 01:52:23,422 | INFO | pyMut.output | Starting to process 1000 variants from 2548 samples\n2025-08-01 01:52:23,437 | INFO | pyMut.output | Processing sample 1/2548: HG00096 (0.0%)\n2025-08-01 01:52:23,503 | INFO | pyMut.output | Sample HG00096: 49 variants found\n</pre> <pre>\ud83d\udcdd Exporting to MAF format...\n</pre> In\u00a0[8]: Copied! <pre>print(\"\ud83d\udcdd Exporting to VCF format...\")\n\ntry:\n    # Export to VCF format\n    pymutation_obj.to_vcf(vcf_output_path)\n    \n    # Check if the file was created\n    if os.path.exists(vcf_output_path):\n        print(f\"\u2705 VCF file created successfully: {vcf_output_path}\")\n        print(f\"   File size: {os.path.getsize(vcf_output_path) / (1024 * 1024):.2f} MB\")\n    else:\n        print(\"\u274c VCF file was not created\")\n        \nexcept Exception as e:\n    print(f\"\u274c Error exporting to VCF: {e}\")\n    import traceback\n    traceback.print_exc()\n</pre> print(\"\ud83d\udcdd Exporting to VCF format...\")  try:     # Export to VCF format     pymutation_obj.to_vcf(vcf_output_path)          # Check if the file was created     if os.path.exists(vcf_output_path):         print(f\"\u2705 VCF file created successfully: {vcf_output_path}\")         print(f\"   File size: {os.path.getsize(vcf_output_path) / (1024 * 1024):.2f} MB\")     else:         print(\"\u274c VCF file was not created\")          except Exception as e:     print(f\"\u274c Error exporting to VCF: {e}\")     import traceback     traceback.print_exc()  <pre>2025-07-30 22:52:46,609 | INFO | pyMut.output | Starting VCF export to: output/vcf_to_vcf_output.vcf\n2025-07-30 22:52:46,615 | INFO | pyMut.output | Starting to process 1000 variants from 2548 samples\n</pre> <pre>\ud83d\udcdd Exporting to VCF format...\n</pre> <pre>2025-07-30 22:52:46,847 | INFO | pyMut.output | Processing genotype data to replace bases with indices\n2025-07-30 22:53:09,835 | INFO | pyMut.output | Writing 1000 variants to file\n2025-07-30 22:53:10,266 | INFO | pyMut.output | Progress: 1000/1000 variants written (100.0%)\n2025-07-30 22:53:10,267 | INFO | pyMut.output | VCF export completed successfully: 1000 variants processed and written to output/vcf_to_vcf_output.vcf\n2025-07-30 22:53:10,268 | INFO | pyMut.output | Conversion summary: 2548 samples, 1000 input variants, 1000 output variants\n</pre> <pre>\u2705 VCF file created successfully: ./output/vcf_to_vcf_output.vcf\n   File size: 10.00 MB\n</pre> In\u00a0[9]: Copied! <pre># Show the first few lines of the exported MAF file\nprint(\"\ud83d\udd0d First 10 lines of the exported MAF file:\")\n!head -10 {maf_output_path}\n</pre> # Show the first few lines of the exported MAF file print(\"\ud83d\udd0d First 10 lines of the exported MAF file:\") !head -10 {maf_output_path}  <pre>\ud83d\udd0d First 10 lines of the exported MAF file:\n/bin/bash: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8)\r\n##INFO=&lt;ID=AF,Number=A,Type=Float,Description=\"Estimated allele frequency in the range (0,1)\"&gt;\r\n##INFO=&lt;ID=AC,Number=A,Type=Integer,Description=\"Total number of alternate alleles in called genotypes\"&gt;\r\n##INFO=&lt;ID=NS,Number=1,Type=Integer,Description=\"Number of samples with data\"&gt;\r\n##INFO=&lt;ID=AN,Number=1,Type=Integer,Description=\"Total number of alleles in called genotypes\"&gt;\r\n##INFO=&lt;ID=EAS_AF,Number=A,Type=Float,Description=\"Allele frequency in the EAS populations calculated from AC and AN, in the range (0,1)\"&gt;\r\n##INFO=&lt;ID=EUR_AF,Number=A,Type=Float,Description=\"Allele frequency in the EUR populations calculated from AC and AN, in the range (0,1)\"&gt;\r\n##INFO=&lt;ID=AFR_AF,Number=A,Type=Float,Description=\"Allele frequency in the AFR populations calculated from AC and AN, in the range (0,1)\"&gt;\r\n##INFO=&lt;ID=AMR_AF,Number=A,Type=Float,Description=\"Allele frequency in the AMR populations calculated from AC and AN, in the range (0,1)\"&gt;\r\n##INFO=&lt;ID=SAS_AF,Number=A,Type=Float,Description=\"Allele frequency in the SAS populations calculated from AC and AN, in the range (0,1)\"&gt;\r\n##INFO=&lt;ID=VT,Number=.,Type=String,Description=\"indicates what type of variant the line represents\"&gt;\r\n</pre> In\u00a0[10]: Copied! <pre># Show the first few lines of the exported VCF file\nprint(\"\ud83d\udd0d First 10 lines of the exported VCF file:\")\n!head -10 {vcf_output_path}\n</pre> # Show the first few lines of the exported VCF file print(\"\ud83d\udd0d First 10 lines of the exported VCF file:\") !head -10 {vcf_output_path}  <pre>\ud83d\udd0d First 10 lines of the exported VCF file:\n/bin/bash: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8)\r\n##fileformat=VCFv4.3\r\n##fileDate=20250730\r\n##source=https://github.com/Luisruimor/pyMut\r\n##reference=38\r\n##FILTER=&lt;ID=PASS,Description=\"All filters passed\"&gt;\r\n##contig=&lt;ID=10&gt;\r\n##FORMAT=&lt;ID=GT,Number=1,Type=String,Description=\"Phased Genotype\"&gt;\r\n##INFO=&lt;ID=PMUT,Number=.,Type=String,Description=\"Consequence annotations columns from PyMut. Format: AC|AN|DP|AF|EAS_AF|EUR_AF|AFR_AF|AMR_AF|SAS_AF|VT|NS|EX_TARGET|VEP_Allele|VEP_Consequence|VEP_IMPACT|VEP_SYMBOL|VEP_Gene|VEP_Feature_type|VEP_Feature|VEP_BIOTYPE|VEP_EXON|VEP_INTRON|VEP_HGVSc|VEP_HGVSp|VEP_cDNA_position|VEP_CDS_position|VEP_Protein_position|VEP_Amino_acids|VEP_Codons|VEP_Existing_variation|VEP_DISTANCE|VEP_STRAND|VEP_FLAGS|VEP_VARIANT_CLASS|VEP_SYMBOL_SOURCE|VEP_HGNC_ID|VEP_ENSP|VEP_SWISSPROT|VEP_TREMBL|VEP_UNIPARC|VEP_UNIPROT_ISOFORM|VEP_NEAREST|VEP_DOMAINS|Hugo_Symbol|Variant_Classification|Variant_Type\"&gt;\r\n#CHROM\tPOS\tID\tREF\tALT\tQUAL\tFILTER\tINFO\tFORMAT\tHG00096\tHG00097\tHG00099\tHG00100\tHG00101\tHG00102\tHG00103\tHG00104\tHG00105\tHG00106\tHG00107\tHG00108\tHG00109\tHG00110\tHG00111\tHG00112\tHG00113\tHG00114\tHG00115\tHG00116\tHG00117\tHG00118\tHG00119\tHG00120\tHG00121\tHG00122\tHG00123\tHG00125\tHG00126\tHG00127\tHG00128\tHG00129\tHG00130\tHG00131\tHG00132\tHG00133\tHG00134\tHG00135\tHG00136\tHG00137\tHG00138\tHG00139\tHG00140\tHG00141\tHG00142\tHG00143\tHG00145\tHG00146\tHG00148\tHG00149\tHG00150\tHG00151\tHG00152\tHG00154\tHG00155\tHG00156\tHG00157\tHG00158\tHG00159\tHG00160\tHG00171\tHG00173\tHG00174\tHG00176\tHG00177\tHG00178\tHG00179\tHG00180\tHG00181\tHG00182\tHG00183\tHG00185\tHG00186\tHG00187\tHG00188\tHG00189\tHG00190\tHG00231\tHG00232\tHG00233\tHG00234\tHG00235\tHG00236\tHG00237\tHG00238\tHG00239\tHG00240\tHG00242\tHG00243\tHG00244\tHG00245\tHG00246\tHG00249\tHG00250\tHG00251\tHG00252\tHG00253\tHG00254\tHG00255\tHG00256\tHG00257\tHG00258\tHG00259\tHG00260\tHG00261\tHG00262\tHG00263\tHG00264\tHG00265\tHG00266\tHG00267\tHG00268\tHG00269\tHG00270\tHG00271\tHG00272\tHG00273\tHG00274\tHG00275\tHG00276\tHG00277\tHG00278\tHG00280\tHG00281\tHG00282\tHG00284\tHG00285\tHG00288\tHG00290\tHG00302\tHG00303\tHG00304\tHG00306\tHG00308\tHG00309\tHG00310\tHG00311\tHG00312\tHG00313\tHG00315\tHG00318\tHG00319\tHG00320\tHG00321\tHG00323\tHG00324\tHG00325\tHG00326\tHG00327\tHG00328\tHG00329\tHG00330\tHG00331\tHG00332\tHG00334\tHG00335\tHG00336\tHG00337\tHG00338\tHG00339\tHG00341\tHG00342\tHG00343\tHG00344\tHG00345\tHG00346\tHG00349\tHG00350\tHG00351\tHG00353\tHG00355\tHG00356\tHG00357\tHG00358\tHG00359\tHG00360\tHG00361\tHG00362\tHG00364\tHG00365\tHG00366\tHG00367\tHG00368\tHG00369\tHG00371\tHG00372\tHG00373\tHG00375\tHG00376\tHG00377\tHG00378\tHG00379\tHG00380\tHG00381\tHG00382\tHG00383\tHG00384\tHG00403\tHG00404\tHG00406\tHG00407\tHG00409\tHG00410\tHG00419\tHG00421\tHG00422\tHG00428\tHG00436\tHG00437\tHG00442\tHG00443\tHG00445\tHG00446\tHG00448\tHG00449\tHG00451\tHG00452\tHG00457\tHG00458\tHG00463\tHG00464\tHG00472\tHG00473\tHG00475\tHG00476\tHG00478\tHG00479\tHG00500\tHG00513\tHG00524\tHG00525\tHG00530\tHG00531\tHG00533\tHG00534\tHG00536\tHG00537\tHG00542\tHG00543\tHG00551\tHG00553\tHG00554\tHG00556\tHG00557\tHG00559\tHG00560\tHG00565\tHG00566\tHG00580\tHG00581\tHG00583\tHG00584\tHG00589\tHG00590\tHG00592\tHG00593\tHG00595\tHG00596\tHG00598\tHG00599\tHG00607\tHG00608\tHG00610\tHG00611\tHG00613\tHG00614\tHG00619\tHG00620\tHG00622\tHG00623\tHG00625\tHG00626\tHG00628\tHG00629\tHG00631\tHG00632\tHG00634\tHG00637\tHG00638\tHG00640\tHG00641\tHG00650\tHG00651\tHG00653\tHG00654\tHG00656\tHG00657\tHG00662\tHG00663\tHG00671\tHG00672\tHG00674\tHG00675\tHG00683\tHG00684\tHG00689\tHG00690\tHG00692\tHG00693\tHG00698\tHG00699\tHG00701\tHG00704\tHG00705\tHG00707\tHG00708\tHG00717\tHG00728\tHG00729\tHG00731\tHG00732\tHG00734\tHG00736\tHG00737\tHG00739\tHG00740\tHG00742\tHG00743\tHG00759\tHG00766\tHG00844\tHG00851\tHG00864\tHG00867\tHG00879\tHG00881\tHG00956\tHG00978\tHG00982\tHG01028\tHG01029\tHG01031\tHG01046\tHG01047\tHG01048\tHG01049\tHG01051\tHG01052\tHG01054\tHG01055\tHG01058\tHG01060\tHG01061\tHG01063\tHG01064\tHG01066\tHG01067\tHG01069\tHG01070\tHG01072\tHG01073\tHG01075\tHG01077\tHG01079\tHG01080\tHG01082\tHG01083\tHG01085\tHG01086\tHG01088\tHG01089\tHG01092\tHG01094\tHG01095\tHG01097\tHG01098\tHG01101\tHG01102\tHG01104\tHG01105\tHG01107\tHG01108\tHG01110\tHG01111\tHG01112\tHG01113\tHG01119\tHG01121\tHG01122\tHG01124\tHG01125\tHG01130\tHG01131\tHG01133\tHG01134\tHG01136\tHG01137\tHG01139\tHG01140\tHG01142\tHG01148\tHG01149\tHG01161\tHG01162\tHG01164\tHG01167\tHG01168\tHG01170\tHG01171\tHG01173\tHG01174\tHG01176\tHG01177\tHG01182\tHG01183\tHG01187\tHG01188\tHG01190\tHG01191\tHG01197\tHG01198\tHG01200\tHG01204\tHG01205\tHG01241\tHG01242\tHG01247\tHG01248\tHG01250\tHG01251\tHG01253\tHG01254\tHG01256\tHG01257\tHG01259\tHG01260\tHG01269\tHG01271\tHG01272\tHG01275\tHG01277\tHG01280\tHG01281\tHG01284\tHG01286\tHG01302\tHG01303\tHG01305\tHG01308\tHG01311\tHG01312\tHG01323\tHG01325\tHG01326\tHG01334\tHG01341\tHG01342\tHG01344\tHG01345\tHG01348\tHG01350\tHG01351\tHG01353\tHG01354\tHG01356\tHG01357\tHG01359\tHG01360\tHG01362\tHG01363\tHG01365\tHG01366\tHG01369\tHG01372\tHG01374\tHG01375\tHG01377\tHG01378\tHG01383\tHG01384\tHG01389\tHG01390\tHG01392\tHG01393\tHG01395\tHG01396\tHG01398\tHG01402\tHG01403\tHG01405\tHG01412\tHG01413\tHG01414\tHG01431\tHG01432\tHG01435\tHG01437\tHG01438\tHG01440\tHG01441\tHG01443\tHG01444\tHG01447\tHG01455\tHG01456\tHG01459\tHG01461\tHG01462\tHG01464\tHG01465\tHG01468\tHG01471\tHG01474\tHG01479\tHG01485\tHG01486\tHG01488\tHG01489\tHG01491\tHG01492\tHG01494\tHG01495\tHG01497\tHG01498\tHG01500\tHG01501\tHG01503\tHG01504\tHG01506\tHG01507\tHG01509\tHG01510\tHG01512\tHG01513\tHG01515\tHG01516\tHG01518\tHG01519\tHG01521\tHG01522\tHG01524\tHG01525\tHG01527\tHG01528\tHG01530\tHG01531\tHG01536\tHG01537\tHG01550\tHG01551\tHG01556\tHG01565\tHG01566\tHG01571\tHG01572\tHG01577\tHG01578\tHG01583\tHG01586\tHG01589\tHG01593\tHG01595\tHG01596\tHG01597\tHG01598\tHG01599\tHG01600\tHG01602\tHG01603\tHG01605\tHG01606\tHG01607\tHG01608\tHG01610\tHG01612\tHG01613\tHG01615\tHG01617\tHG01618\tHG01619\tHG01620\tHG01623\tHG01624\tHG01625\tHG01626\tHG01628\tHG01630\tHG01631\tHG01632\tHG01668\tHG01669\tHG01670\tHG01672\tHG01673\tHG01675\tHG01676\tHG01678\tHG01679\tHG01680\tHG01682\tHG01684\tHG01685\tHG01686\tHG01694\tHG01695\tHG01697\tHG01699\tHG01700\tHG01702\tHG01704\tHG01705\tHG01707\tHG01708\tHG01709\tHG01710\tHG01746\tHG01747\tHG01756\tHG01757\tHG01761\tHG01762\tHG01765\tHG01766\tHG01767\tHG01768\tHG01770\tHG01771\tHG01773\tHG01775\tHG01776\tHG01777\tHG01779\tHG01781\tHG01783\tHG01784\tHG01785\tHG01786\tHG01789\tHG01790\tHG01791\tHG01794\tHG01795\tHG01796\tHG01797\tHG01798\tHG01799\tHG01800\tHG01801\tHG01802\tHG01804\tHG01805\tHG01806\tHG01807\tHG01808\tHG01809\tHG01810\tHG01811\tHG01812\tHG01813\tHG01815\tHG01816\tHG01817\tHG01840\tHG01841\tHG01842\tHG01843\tHG01844\tHG01845\tHG01846\tHG01847\tHG01848\tHG01849\tHG01850\tHG01851\tHG01852\tHG01853\tHG01855\tHG01857\tHG01858\tHG01859\tHG01860\tHG01861\tHG01862\tHG01863\tHG01864\tHG01865\tHG01866\tHG01867\tHG01868\tHG01869\tHG01870\tHG01871\tHG01872\tHG01873\tHG01874\tHG01878\tHG01879\tHG01880\tHG01882\tHG01883\tHG01885\tHG01886\tHG01889\tHG01890\tHG01892\tHG01893\tHG01894\tHG01896\tHG01912\tHG01914\tHG01915\tHG01917\tHG01918\tHG01920\tHG01921\tHG01923\tHG01924\tHG01926\tHG01927\tHG01932\tHG01933\tHG01935\tHG01936\tHG01938\tHG01939\tHG01941\tHG01942\tHG01944\tHG01945\tHG01947\tHG01948\tHG01950\tHG01951\tHG01953\tHG01954\tHG01956\tHG01958\tHG01961\tHG01965\tHG01967\tHG01968\tHG01970\tHG01971\tHG01973\tHG01974\tHG01976\tHG01977\tHG01979\tHG01980\tHG01982\tHG01985\tHG01986\tHG01988\tHG01989\tHG01990\tHG01991\tHG01992\tHG01997\tHG02002\tHG02003\tHG02006\tHG02008\tHG02009\tHG02010\tHG02012\tHG02013\tHG02014\tHG02016\tHG02017\tHG02019\tHG02020\tHG02023\tHG02025\tHG02026\tHG02028\tHG02029\tHG02031\tHG02032\tHG02035\tHG02040\tHG02047\tHG02048\tHG02049\tHG02050\tHG02051\tHG02052\tHG02053\tHG02054\tHG02057\tHG02058\tHG02060\tHG02061\tHG02064\tHG02067\tHG02069\tHG02070\tHG02072\tHG02073\tHG02075\tHG02076\tHG02078\tHG02079\tHG02081\tHG02082\tHG02084\tHG02085\tHG02086\tHG02087\tHG02088\tHG02089\tHG02090\tHG02095\tHG02102\tHG02104\tHG02105\tHG02107\tHG02108\tHG02111\tHG02113\tHG02116\tHG02121\tHG02122\tHG02127\tHG02128\tHG02130\tHG02131\tHG02133\tHG02134\tHG02136\tHG02137\tHG02138\tHG02139\tHG02140\tHG02141\tHG02142\tHG02143\tHG02144\tHG02146\tHG02147\tHG02150\tHG02151\tHG02152\tHG02153\tHG02154\tHG02155\tHG02156\tHG02164\tHG02165\tHG02166\tHG02168\tHG02169\tHG02170\tHG02173\tHG02176\tHG02178\tHG02179\tHG02180\tHG02181\tHG02182\tHG02184\tHG02185\tHG02186\tHG02187\tHG02188\tHG02190\tHG02215\tHG02219\tHG02220\tHG02221\tHG02223\tHG02224\tHG02230\tHG02231\tHG02232\tHG02233\tHG02235\tHG02236\tHG02238\tHG02239\tHG02250\tHG02252\tHG02253\tHG02255\tHG02256\tHG02259\tHG02260\tHG02262\tHG02265\tHG02266\tHG02271\tHG02272\tHG02274\tHG02275\tHG02277\tHG02278\tHG02281\tHG02282\tHG02283\tHG02284\tHG02285\tHG02286\tHG02291\tHG02292\tHG02298\tHG02299\tHG02301\tHG02304\tHG02307\tHG02308\tHG02309\tHG02312\tHG02314\tHG02315\tHG02317\tHG02318\tHG02322\tHG02323\tHG02325\tHG02330\tHG02332\tHG02334\tHG02337\tHG02339\tHG02343\tHG02345\tHG02348\tHG02351\tHG02353\tHG02355\tHG02356\tHG02358\tHG02360\tHG02364\tHG02367\tHG02371\tHG02373\tHG02374\tHG02375\tHG02379\tHG02380\tHG02382\tHG02383\tHG02384\tHG02385\tHG02386\tHG02389\tHG02390\tHG02391\tHG02392\tHG02394\tHG02395\tHG02396\tHG02397\tHG02398\tHG02399\tHG02401\tHG02402\tHG02405\tHG02406\tHG02407\tHG02408\tHG02409\tHG02410\tHG02419\tHG02420\tHG02425\tHG02427\tHG02429\tHG02433\tHG02436\tHG02439\tHG02442\tHG02445\tHG02449\tHG02450\tHG02455\tHG02461\tHG02462\tHG02464\tHG02465\tHG02470\tHG02471\tHG02476\tHG02477\tHG02479\tHG02481\tHG02484\tHG02485\tHG02489\tHG02490\tHG02491\tHG02493\tHG02494\tHG02496\tHG02497\tHG02501\tHG02502\tHG02505\tHG02508\tHG02511\tHG02512\tHG02513\tHG02521\tHG02522\tHG02536\tHG02537\tHG02541\tHG02545\tHG02546\tHG02549\tHG02554\tHG02555\tHG02557\tHG02558\tHG02561\tHG02562\tHG02568\tHG02570\tHG02571\tHG02573\tHG02574\tHG02577\tHG02580\tHG02582\tHG02583\tHG02585\tHG02586\tHG02588\tHG02589\tHG02594\tHG02595\tHG02597\tHG02600\tHG02601\tHG02603\tHG02604\tHG02610\tHG02611\tHG02613\tHG02614\tHG02620\tHG02621\tHG02623\tHG02624\tHG02628\tHG02629\tHG02634\tHG02635\tHG02642\tHG02643\tHG02645\tHG02646\tHG02648\tHG02649\tHG02651\tHG02652\tHG02654\tHG02655\tHG02657\tHG02658\tHG02660\tHG02661\tHG02666\tHG02667\tHG02675\tHG02676\tHG02678\tHG02679\tHG02681\tHG02682\tHG02684\tHG02685\tHG02687\tHG02688\tHG02690\tHG02691\tHG02694\tHG02696\tHG02697\tHG02699\tHG02700\tHG02702\tHG02703\tHG02715\tHG02716\tHG02721\tHG02722\tHG02724\tHG02725\tHG02727\tHG02728\tHG02731\tHG02733\tHG02734\tHG02736\tHG02737\tHG02756\tHG02757\tHG02759\tHG02760\tHG02763\tHG02768\tHG02769\tHG02771\tHG02772\tHG02774\tHG02775\tHG02778\tHG02780\tHG02783\tHG02784\tHG02786\tHG02787\tHG02789\tHG02790\tHG02792\tHG02793\tHG02798\tHG02799\tHG02804\tHG02805\tHG02807\tHG02808\tHG02810\tHG02811\tHG02813\tHG02814\tHG02816\tHG02817\tHG02819\tHG02820\tHG02836\tHG02837\tHG02839\tHG02840\tHG02851\tHG02852\tHG02854\tHG02855\tHG02860\tHG02861\tHG02870\tHG02878\tHG02879\tHG02881\tHG02882\tHG02884\tHG02885\tHG02887\tHG02888\tHG02890\tHG02891\tHG02895\tHG02896\tHG02922\tHG02923\tHG02938\tHG02941\tHG02943\tHG02944\tHG02946\tHG02947\tHG02952\tHG02953\tHG02968\tHG02970\tHG02971\tHG02973\tHG02974\tHG02976\tHG02977\tHG02979\tHG02981\tHG02982\tHG02983\tHG03006\tHG03007\tHG03009\tHG03012\tHG03015\tHG03016\tHG03018\tHG03019\tHG03021\tHG03022\tHG03024\tHG03025\tHG03027\tHG03028\tHG03039\tHG03040\tHG03045\tHG03046\tHG03048\tHG03049\tHG03052\tHG03054\tHG03055\tHG03057\tHG03058\tHG03060\tHG03061\tHG03063\tHG03064\tHG03066\tHG03069\tHG03072\tHG03073\tHG03074\tHG03077\tHG03078\tHG03079\tHG03081\tHG03082\tHG03084\tHG03085\tHG03086\tHG03088\tHG03091\tHG03095\tHG03096\tHG03097\tHG03099\tHG03100\tHG03103\tHG03105\tHG03108\tHG03109\tHG03111\tHG03112\tHG03114\tHG03115\tHG03117\tHG03118\tHG03120\tHG03121\tHG03123\tHG03124\tHG03126\tHG03127\tHG03129\tHG03130\tHG03132\tHG03133\tHG03135\tHG03136\tHG03139\tHG03157\tHG03159\tHG03160\tHG03162\tHG03163\tHG03166\tHG03168\tHG03169\tHG03171\tHG03172\tHG03175\tHG03189\tHG03190\tHG03193\tHG03195\tHG03196\tHG03198\tHG03199\tHG03202\tHG03209\tHG03212\tHG03224\tHG03225\tHG03228\tHG03229\tHG03234\tHG03235\tHG03237\tHG03238\tHG03240\tHG03241\tHG03246\tHG03247\tHG03258\tHG03259\tHG03265\tHG03267\tHG03268\tHG03270\tHG03271\tHG03279\tHG03280\tHG03291\tHG03294\tHG03295\tHG03297\tHG03298\tHG03300\tHG03301\tHG03303\tHG03304\tHG03311\tHG03313\tHG03342\tHG03343\tHG03351\tHG03352\tHG03354\tHG03363\tHG03366\tHG03367\tHG03369\tHG03370\tHG03372\tHG03376\tHG03378\tHG03380\tHG03382\tHG03385\tHG03388\tHG03391\tHG03393\tHG03394\tHG03397\tHG03398\tHG03401\tHG03410\tHG03419\tHG03428\tHG03431\tHG03432\tHG03433\tHG03436\tHG03437\tHG03439\tHG03442\tHG03445\tHG03446\tHG03449\tHG03451\tHG03452\tHG03455\tHG03457\tHG03458\tHG03460\tHG03461\tHG03462\tHG03464\tHG03469\tHG03470\tHG03472\tHG03473\tHG03476\tHG03478\tHG03479\tHG03484\tHG03485\tHG03488\tHG03490\tHG03491\tHG03499\tHG03511\tHG03514\tHG03515\tHG03517\tHG03518\tHG03520\tHG03521\tHG03538\tHG03539\tHG03547\tHG03548\tHG03549\tHG03556\tHG03557\tHG03558\tHG03559\tHG03563\tHG03565\tHG03567\tHG03571\tHG03572\tHG03575\tHG03577\tHG03578\tHG03583\tHG03585\tHG03589\tHG03593\tHG03594\tHG03595\tHG03598\tHG03600\tHG03603\tHG03604\tHG03607\tHG03611\tHG03615\tHG03616\tHG03619\tHG03624\tHG03625\tHG03629\tHG03631\tHG03634\tHG03636\tHG03640\tHG03642\tHG03643\tHG03644\tHG03645\tHG03646\tHG03649\tHG03652\tHG03653\tHG03660\tHG03663\tHG03667\tHG03668\tHG03672\tHG03673\tHG03679\tHG03680\tHG03681\tHG03684\tHG03685\tHG03686\tHG03687\tHG03689\tHG03690\tHG03691\tHG03692\tHG03693\tHG03694\tHG03695\tHG03696\tHG03697\tHG03698\tHG03702\tHG03703\tHG03705\tHG03706\tHG03708\tHG03709\tHG03711\tHG03713\tHG03714\tHG03716\tHG03717\tHG03718\tHG03720\tHG03722\tHG03727\tHG03729\tHG03730\tHG03731\tHG03733\tHG03736\tHG03738\tHG03740\tHG03741\tHG03742\tHG03743\tHG03744\tHG03745\tHG03746\tHG03750\tHG03752\tHG03753\tHG03754\tHG03755\tHG03756\tHG03757\tHG03760\tHG03762\tHG03765\tHG03767\tHG03770\tHG03771\tHG03772\tHG03773\tHG03774\tHG03775\tHG03777\tHG03778\tHG03779\tHG03780\tHG03781\tHG03782\tHG03784\tHG03785\tHG03786\tHG03787\tHG03788\tHG03789\tHG03790\tHG03792\tHG03793\tHG03796\tHG03800\tHG03802\tHG03803\tHG03805\tHG03808\tHG03809\tHG03812\tHG03814\tHG03815\tHG03817\tHG03821\tHG03823\tHG03824\tHG03826\tHG03829\tHG03830\tHG03832\tHG03833\tHG03836\tHG03837\tHG03838\tHG03844\tHG03846\tHG03848\tHG03849\tHG03850\tHG03851\tHG03854\tHG03856\tHG03857\tHG03858\tHG03861\tHG03862\tHG03863\tHG03864\tHG03866\tHG03867\tHG03868\tHG03869\tHG03870\tHG03871\tHG03872\tHG03873\tHG03874\tHG03875\tHG03882\tHG03884\tHG03885\tHG03886\tHG03887\tHG03888\tHG03890\tHG03894\tHG03895\tHG03896\tHG03897\tHG03898\tHG03899\tHG03900\tHG03902\tHG03905\tHG03907\tHG03908\tHG03910\tHG03911\tHG03913\tHG03914\tHG03916\tHG03917\tHG03919\tHG03920\tHG03922\tHG03925\tHG03926\tHG03928\tHG03931\tHG03934\tHG03937\tHG03940\tHG03941\tHG03943\tHG03944\tHG03945\tHG03947\tHG03949\tHG03950\tHG03951\tHG03953\tHG03955\tHG03960\tHG03963\tHG03965\tHG03967\tHG03968\tHG03969\tHG03971\tHG03973\tHG03974\tHG03976\tHG03977\tHG03978\tHG03985\tHG03986\tHG03989\tHG03990\tHG03991\tHG03995\tHG03998\tHG03999\tHG04001\tHG04002\tHG04003\tHG04006\tHG04014\tHG04015\tHG04017\tHG04018\tHG04019\tHG04020\tHG04022\tHG04023\tHG04025\tHG04026\tHG04029\tHG04033\tHG04035\tHG04038\tHG04039\tHG04042\tHG04047\tHG04054\tHG04056\tHG04059\tHG04060\tHG04061\tHG04062\tHG04063\tHG04070\tHG04075\tHG04076\tHG04080\tHG04090\tHG04093\tHG04094\tHG04096\tHG04098\tHG04099\tHG04100\tHG04106\tHG04107\tHG04118\tHG04131\tHG04134\tHG04140\tHG04141\tHG04144\tHG04146\tHG04152\tHG04153\tHG04155\tHG04156\tHG04158\tHG04159\tHG04161\tHG04162\tHG04164\tHG04171\tHG04173\tHG04176\tHG04177\tHG04180\tHG04182\tHG04183\tHG04185\tHG04186\tHG04188\tHG04189\tHG04194\tHG04195\tHG04198\tHG04200\tHG04202\tHG04206\tHG04209\tHG04210\tHG04211\tHG04212\tHG04214\tHG04216\tHG04219\tHG04222\tHG04225\tHG04227\tHG04229\tHG04235\tHG04238\tHG04239\tHG04301\tHG04302\tHG04303\tNA06984\tNA06985\tNA06986\tNA06989\tNA06994\tNA07000\tNA07037\tNA07048\tNA07051\tNA07056\tNA07347\tNA07357\tNA10847\tNA10851\tNA11829\tNA11830\tNA11831\tNA11832\tNA11840\tNA11843\tNA11881\tNA11892\tNA11893\tNA11894\tNA11918\tNA11919\tNA11920\tNA11930\tNA11931\tNA11932\tNA11933\tNA11992\tNA11994\tNA11995\tNA12003\tNA12004\tNA12005\tNA12006\tNA12043\tNA12044\tNA12045\tNA12046\tNA12058\tNA12144\tNA12154\tNA12155\tNA12156\tNA12234\tNA12249\tNA12272\tNA12273\tNA12275\tNA12282\tNA12283\tNA12286\tNA12287\tNA12340\tNA12341\tNA12342\tNA12347\tNA12348\tNA12383\tNA12399\tNA12400\tNA12413\tNA12414\tNA12489\tNA12546\tNA12716\tNA12717\tNA12718\tNA12748\tNA12749\tNA12750\tNA12751\tNA12760\tNA12761\tNA12762\tNA12763\tNA12775\tNA12776\tNA12777\tNA12778\tNA12812\tNA12813\tNA12814\tNA12815\tNA12827\tNA12828\tNA12829\tNA12830\tNA12842\tNA12843\tNA12872\tNA12873\tNA12874\tNA12878\tNA12889\tNA12890\tNA18486\tNA18488\tNA18489\tNA18499\tNA18501\tNA18502\tNA18504\tNA18505\tNA18507\tNA18508\tNA18510\tNA18511\tNA18516\tNA18517\tNA18519\tNA18520\tNA18522\tNA18523\tNA18525\tNA18526\tNA18527\tNA18528\tNA18530\tNA18531\tNA18532\tNA18533\tNA18534\tNA18535\tNA18536\tNA18537\tNA18538\tNA18539\tNA18541\tNA18542\tNA18543\tNA18544\tNA18545\tNA18546\tNA18547\tNA18548\tNA18549\tNA18550\tNA18552\tNA18553\tNA18555\tNA18557\tNA18558\tNA18559\tNA18560\tNA18561\tNA18562\tNA18563\tNA18564\tNA18565\tNA18566\tNA18567\tNA18570\tNA18571\tNA18572\tNA18573\tNA18574\tNA18576\tNA18577\tNA18579\tNA18582\tNA18591\tNA18592\tNA18593\tNA18595\tNA18596\tNA18597\tNA18599\tNA18602\tNA18603\tNA18605\tNA18606\tNA18608\tNA18609\tNA18610\tNA18611\tNA18612\tNA18613\tNA18614\tNA18615\tNA18616\tNA18617\tNA18618\tNA18619\tNA18620\tNA18621\tNA18622\tNA18623\tNA18624\tNA18625\tNA18626\tNA18627\tNA18628\tNA18629\tNA18630\tNA18631\tNA18632\tNA18633\tNA18634\tNA18635\tNA18636\tNA18637\tNA18638\tNA18639\tNA18640\tNA18641\tNA18642\tNA18643\tNA18644\tNA18645\tNA18646\tNA18647\tNA18648\tNA18740\tNA18745\tNA18747\tNA18748\tNA18749\tNA18757\tNA18791\tNA18853\tNA18856\tNA18858\tNA18861\tNA18864\tNA18865\tNA18867\tNA18868\tNA18870\tNA18871\tNA18873\tNA18874\tNA18876\tNA18877\tNA18878\tNA18879\tNA18881\tNA18907\tNA18908\tNA18909\tNA18910\tNA18912\tNA18915\tNA18916\tNA18917\tNA18923\tNA18924\tNA18933\tNA18934\tNA18939\tNA18940\tNA18941\tNA18942\tNA18943\tNA18944\tNA18945\tNA18946\tNA18947\tNA18948\tNA18949\tNA18950\tNA18951\tNA18952\tNA18953\tNA18954\tNA18955\tNA18956\tNA18957\tNA18959\tNA18960\tNA18961\tNA18962\tNA18963\tNA18964\tNA18965\tNA18966\tNA18967\tNA18968\tNA18969\tNA18970\tNA18971\tNA18972\tNA18973\tNA18974\tNA18975\tNA18976\tNA18977\tNA18978\tNA18979\tNA18980\tNA18981\tNA18982\tNA18983\tNA18984\tNA18985\tNA18986\tNA18987\tNA18988\tNA18989\tNA18990\tNA18991\tNA18992\tNA18993\tNA18994\tNA18995\tNA18997\tNA18998\tNA18999\tNA19000\tNA19001\tNA19002\tNA19003\tNA19004\tNA19005\tNA19006\tNA19007\tNA19009\tNA19010\tNA19011\tNA19012\tNA19017\tNA19019\tNA19020\tNA19023\tNA19024\tNA19025\tNA19026\tNA19027\tNA19028\tNA19030\tNA19031\tNA19035\tNA19036\tNA19037\tNA19038\tNA19041\tNA19042\tNA19043\tNA19044\tNA19054\tNA19055\tNA19056\tNA19057\tNA19058\tNA19059\tNA19060\tNA19062\tNA19063\tNA19064\tNA19065\tNA19066\tNA19067\tNA19068\tNA19070\tNA19072\tNA19074\tNA19075\tNA19076\tNA19077\tNA19078\tNA19079\tNA19080\tNA19081\tNA19082\tNA19083\tNA19084\tNA19085\tNA19086\tNA19087\tNA19088\tNA19089\tNA19090\tNA19091\tNA19092\tNA19093\tNA19095\tNA19096\tNA19098\tNA19099\tNA19102\tNA19107\tNA19108\tNA19113\tNA19114\tNA19116\tNA19117\tNA19118\tNA19119\tNA19121\tNA19129\tNA19130\tNA19131\tNA19137\tNA19138\tNA19141\tNA19143\tNA19144\tNA19146\tNA19147\tNA19149\tNA19152\tNA19153\tNA19159\tNA19160\tNA19171\tNA19172\tNA19175\tNA19184\tNA19185\tNA19189\tNA19190\tNA19197\tNA19198\tNA19200\tNA19201\tNA19204\tNA19206\tNA19207\tNA19209\tNA19210\tNA19213\tNA19214\tNA19222\tNA19223\tNA19225\tNA19235\tNA19236\tNA19238\tNA19239\tNA19247\tNA19248\tNA19256\tNA19257\tNA19307\tNA19308\tNA19309\tNA19310\tNA19312\tNA19314\tNA19315\tNA19316\tNA19317\tNA19318\tNA19319\tNA19320\tNA19321\tNA19323\tNA19324\tNA19327\tNA19328\tNA19331\tNA19332\tNA19334\tNA19338\tNA19346\tNA19347\tNA19350\tNA19351\tNA19355\tNA19359\tNA19360\tNA19371\tNA19372\tNA19374\tNA19375\tNA19376\tNA19377\tNA19378\tNA19379\tNA19380\tNA19383\tNA19384\tNA19385\tNA19390\tNA19391\tNA19393\tNA19394\tNA19395\tNA19397\tNA19398\tNA19399\tNA19401\tNA19403\tNA19404\tNA19428\tNA19429\tNA19430\tNA19431\tNA19434\tNA19435\tNA19436\tNA19437\tNA19438\tNA19439\tNA19440\tNA19443\tNA19445\tNA19446\tNA19448\tNA19449\tNA19451\tNA19452\tNA19454\tNA19455\tNA19456\tNA19457\tNA19461\tNA19462\tNA19463\tNA19466\tNA19467\tNA19468\tNA19471\tNA19472\tNA19473\tNA19474\tNA19475\tNA19625\tNA19648\tNA19649\tNA19651\tNA19652\tNA19654\tNA19655\tNA19657\tNA19658\tNA19661\tNA19663\tNA19664\tNA19669\tNA19670\tNA19676\tNA19678\tNA19679\tNA19681\tNA19682\tNA19684\tNA19700\tNA19701\tNA19703\tNA19704\tNA19707\tNA19711\tNA19712\tNA19713\tNA19716\tNA19717\tNA19719\tNA19720\tNA19722\tNA19723\tNA19725\tNA19726\tNA19728\tNA19729\tNA19731\tNA19732\tNA19734\tNA19735\tNA19740\tNA19741\tNA19746\tNA19747\tNA19749\tNA19750\tNA19752\tNA19755\tNA19756\tNA19758\tNA19759\tNA19761\tNA19762\tNA19764\tNA19770\tNA19771\tNA19773\tNA19774\tNA19776\tNA19777\tNA19779\tNA19780\tNA19782\tNA19783\tNA19785\tNA19786\tNA19788\tNA19789\tNA19792\tNA19794\tNA19795\tNA19818\tNA19819\tNA19834\tNA19835\tNA19900\tNA19901\tNA19904\tNA19908\tNA19909\tNA19913\tNA19914\tNA19916\tNA19917\tNA19920\tNA19921\tNA19922\tNA19923\tNA19982\tNA19984\tNA20126\tNA20127\tNA20274\tNA20276\tNA20278\tNA20281\tNA20282\tNA20287\tNA20289\tNA20291\tNA20294\tNA20296\tNA20298\tNA20299\tNA20314\tNA20317\tNA20318\tNA20320\tNA20321\tNA20332\tNA20334\tNA20339\tNA20340\tNA20342\tNA20346\tNA20348\tNA20351\tNA20355\tNA20356\tNA20357\tNA20359\tNA20362\tNA20412\tNA20502\tNA20503\tNA20504\tNA20505\tNA20506\tNA20507\tNA20508\tNA20509\tNA20510\tNA20511\tNA20512\tNA20513\tNA20514\tNA20515\tNA20516\tNA20517\tNA20518\tNA20519\tNA20520\tNA20521\tNA20522\tNA20524\tNA20525\tNA20527\tNA20528\tNA20529\tNA20530\tNA20531\tNA20532\tNA20533\tNA20534\tNA20535\tNA20536\tNA20537\tNA20538\tNA20539\tNA20540\tNA20541\tNA20542\tNA20543\tNA20544\tNA20581\tNA20582\tNA20585\tNA20586\tNA20587\tNA20588\tNA20589\tNA20752\tNA20753\tNA20754\tNA20755\tNA20756\tNA20757\tNA20758\tNA20759\tNA20760\tNA20761\tNA20762\tNA20763\tNA20764\tNA20765\tNA20766\tNA20767\tNA20768\tNA20769\tNA20770\tNA20771\tNA20772\tNA20773\tNA20774\tNA20775\tNA20778\tNA20783\tNA20785\tNA20786\tNA20787\tNA20790\tNA20792\tNA20795\tNA20796\tNA20797\tNA20798\tNA20799\tNA20800\tNA20801\tNA20802\tNA20803\tNA20804\tNA20805\tNA20806\tNA20807\tNA20808\tNA20809\tNA20810\tNA20811\tNA20812\tNA20813\tNA20814\tNA20815\tNA20816\tNA20818\tNA20819\tNA20821\tNA20822\tNA20826\tNA20827\tNA20828\tNA20829\tNA20831\tNA20832\tNA20845\tNA20846\tNA20847\tNA20849\tNA20850\tNA20851\tNA20852\tNA20853\tNA20854\tNA20856\tNA20858\tNA20859\tNA20861\tNA20862\tNA20863\tNA20864\tNA20866\tNA20867\tNA20868\tNA20869\tNA20870\tNA20872\tNA20873\tNA20874\tNA20875\tNA20876\tNA20877\tNA20878\tNA20881\tNA20882\tNA20883\tNA20884\tNA20885\tNA20886\tNA20887\tNA20888\tNA20889\tNA20890\tNA20891\tNA20892\tNA20894\tNA20895\tNA20896\tNA20897\tNA20899\tNA20900\tNA20901\tNA20902\tNA20903\tNA20904\tNA20905\tNA20906\tNA20908\tNA20910\tNA20911\tNA21086\tNA21087\tNA21088\tNA21089\tNA21090\tNA21091\tNA21092\tNA21093\tNA21094\tNA21095\tNA21097\tNA21098\tNA21099\tNA21100\tNA21101\tNA21102\tNA21103\tNA21104\tNA21105\tNA21106\tNA21107\tNA21108\tNA21109\tNA21110\tNA21111\tNA21112\tNA21113\tNA21114\tNA21115\tNA21116\tNA21117\tNA21118\tNA21119\tNA21120\tNA21121\tNA21122\tNA21123\tNA21124\tNA21125\tNA21126\tNA21127\tNA21128\tNA21129\tNA21130\tNA21133\tNA21135\tNA21137\tNA21141\tNA21142\tNA21143\tNA21144\r\n10\t11501\t.\tC\tA\t.\tPASS\tPMUT=286|5096|20462|0.06|0|0.06|0.08|0.03|0.1|SNP|2548|.|A|intron_variant&amp;non_coding_transcript_variant|MODIFIER||ENSG00000295340|Transcript|ENST00000729389|lncRNA||1/5||||||||||1||SNV||||||||TUBB8||TUBB8|INTRON|SNP\tGT\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t1|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|1\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t1|0\t0|1\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|1\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|1\t0|0\t0|1\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t1|0\t1|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t1|0\t1|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t1|0\t1|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|1\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t1|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|1\t0|0\t0|0\t1|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t1|0\t0|0\t0|0\t0|1\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|1\t0|1\t0|0\t1|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|1\t0|1\t0|0\t0|1\t0|1\t0|1\t0|0\t1|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t1|0\t1|0\t0|0\t1|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|1\t0|1\t0|0\t0|1\t0|0\t1|0\t1|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|1\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t1|0\t0|0\t0|1\t0|0\t1|0\t1|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|1\t1|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|1\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t1|0\t0|0\t0|1\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t1|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|1\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t1|0\t0|1\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t1|0\t1|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|1\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t1|0\t0|0\t1|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|1\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t1|0\t1|0\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|1\t0|0\t0|1\t0|0\t0|1\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|1\t0|0\t0|0\t0|0\t1|0\t0|0\t0|0\t0|0\t0|0\t0|1\t1|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\t0|0\r\n</pre> In\u00a0[11]: Copied! <pre>print(\"\ud83d\udcd6 Reading the exported MAF file...\")\n\ntry:\n    # Read the MAF file with assembly=38 (same as the original VCF)\n    maf_pymutation_obj = read_maf(maf_output_path, \"38\")\n    \n    print(\"\u2705 PyMutation object created successfully from MAF\")\n    print(f\"   DataFrame shape: {maf_pymutation_obj.data.shape}\")\n    print(f\"   Number of variants: {len(maf_pymutation_obj.data)}\")\n    print(f\"   Number of columns: {len(maf_pymutation_obj.data.columns)}\")\n    print(f\"   Number of samples: {len(maf_pymutation_obj.samples)}\")\n    \nexcept Exception as e:\n    print(f\"\u274c Error reading the MAF file: {e}\")\n    import traceback\n    traceback.print_exc()\n</pre> print(\"\ud83d\udcd6 Reading the exported MAF file...\")  try:     # Read the MAF file with assembly=38 (same as the original VCF)     maf_pymutation_obj = read_maf(maf_output_path, \"38\")          print(\"\u2705 PyMutation object created successfully from MAF\")     print(f\"   DataFrame shape: {maf_pymutation_obj.data.shape}\")     print(f\"   Number of variants: {len(maf_pymutation_obj.data)}\")     print(f\"   Number of columns: {len(maf_pymutation_obj.data.columns)}\")     print(f\"   Number of samples: {len(maf_pymutation_obj.samples)}\")      except Exception as e:     print(f\"\u274c Error reading the MAF file: {e}\")     import traceback     traceback.print_exc()  <pre>2025-07-30 22:53:10,971 | INFO | pyMut.input | Starting MAF reading: output/vcf_to_maf_output.maf\n2025-07-30 22:53:11,060 | INFO | pyMut.input | Reading MAF with 'pyarrow' engine\u2026\n</pre> <pre>\ud83d\udcd6 Reading the exported MAF file...\n</pre> <pre>2025-07-30 22:53:12,287 | INFO | pyMut.input | Reading with 'pyarrow' completed.\n2025-07-30 22:53:12,487 | INFO | pyMut.input | Detected 2548 unique samples.\n2025-07-30 22:53:29,770 | INFO | pyMut.input | Saving to cache: output/.pymut_cache/vcf_to_maf_output_59711e0b44b4de34.parquet\n2025-07-30 22:53:29,904 | WARNING | pyMut.input | Failed to save cache: array cannot contain more than 2147483646 bytes, have 36873221949095939\n2025-07-30 22:53:29,905 | INFO | pyMut.input | MAF processed successfully: 188125 rows, 2609 columns in 18.93 seconds\n</pre> <pre>\u2705 PyMutation object created successfully from MAF\n   DataFrame shape: (188125, 2609)\n   Number of variants: 188125\n   Number of columns: 2609\n   Number of samples: 2548\n</pre> In\u00a0[12]: Copied! <pre>print(\"\ud83d\udd0d First 3 rows of the MAF-derived PyMutation object:\")\nmaf_pymutation_obj.head(3)\n</pre> print(\"\ud83d\udd0d First 3 rows of the MAF-derived PyMutation object:\") maf_pymutation_obj.head(3)  <pre>\ud83d\udd0d First 3 rows of the MAF-derived PyMutation object:\n</pre> Out[12]: CHROM POS ID REF ALT QUAL FILTER HG00096 HG00097 HG00099 ... VEP_UNIPROT_ISOFORM VEP_IMPACT VEP_INTRON VEP_BIOTYPE VEP_SYMBOL_SOURCE VEP_Amino_acids VEP_FLAGS VEP_NEAREST VEP_CDS_position AC 0 chr10 11501 . C A . PASS C|A C|C C|C ... None MODIFIER 1/5 lncRNA &lt;NA&gt; &lt;NA&gt; None TUBB8 &lt;NA&gt; 286 1 chr10 36097 . G A . PASS G|A G|G G|G ... None MODIFIER 3/5 lncRNA &lt;NA&gt; &lt;NA&gt; None TUBB8 &lt;NA&gt; 992 2 chr10 47876 . C T . PASS C|T C|C C|C ... None LOW &lt;NA&gt; protein_coding HGNC S None TUBB8 516 1470 <p>3 rows \u00d7 2609 columns</p>"},{"location":"examples/data/vcf_to_maf_and_vcf/#vcf-to-maf-and-vcf-conversion","title":"VCF to MAF and VCF Conversion\u00b6","text":"<p>This notebook demonstrates how to:</p> <ol> <li>Read a VCF file using <code>read_vcf</code> with assembly=38</li> <li>Export the PyMutation object to MAF format using <code>to_maf</code></li> <li>Export the PyMutation object to VCF format using <code>to_vcf</code></li> <li>Read the exported MAF file using <code>read_maf</code></li> </ol>"},{"location":"examples/data/vcf_to_maf_and_vcf/#import-the-necessary-functions","title":"Import the necessary functions\u00b6","text":""},{"location":"examples/data/vcf_to_maf_and_vcf/#define-the-path-to-the-vcf-file","title":"Define the path to the VCF file\u00b6","text":""},{"location":"examples/data/vcf_to_maf_and_vcf/#read-the-vcf-file-with-assembly38","title":"Read the VCF file with assembly=38\u00b6","text":""},{"location":"examples/data/vcf_to_maf_and_vcf/#show-the-first-rows-of-the-dataframe","title":"Show the first rows of the DataFrame\u00b6","text":""},{"location":"examples/data/vcf_to_maf_and_vcf/#define-output-paths-for-maf-and-vcf-exports","title":"Define output paths for MAF and VCF exports\u00b6","text":""},{"location":"examples/data/vcf_to_maf_and_vcf/#export-to-maf-format","title":"Export to MAF format\u00b6","text":""},{"location":"examples/data/vcf_to_maf_and_vcf/#export-to-vcf-format","title":"Export to VCF format\u00b6","text":""},{"location":"examples/data/vcf_to_maf_and_vcf/#examine-the-exported-files","title":"Examine the exported files\u00b6","text":""},{"location":"examples/data/vcf_to_maf_and_vcf/#read-the-exported-maf-file","title":"Read the exported MAF file\u00b6","text":"<p>Now we'll read the MAF file that was generated using <code>to_maf()</code> to demonstrate the full conversion cycle.</p>"},{"location":"examples/data/vcf_to_maf_and_vcf/#show-the-first-rows-of-the-maf-derived-pymutation-object","title":"Show the first rows of the MAF-derived PyMutation object\u00b6","text":""},{"location":"examples/data/vcf_to_maf_and_vcf/#summary","title":"Summary\u00b6","text":"<p>In this notebook, we demonstrated how to:</p> <ol> <li>Read a VCF file using <code>read_vcf</code> with assembly=38</li> <li>Export the PyMutation object to MAF format using <code>to_maf</code></li> <li>Export the PyMutation object to VCF format using <code>to_vcf</code></li> <li>Read the exported MAF file using <code>read_maf</code></li> </ol> <p>These conversion capabilities allow for seamless interoperability between different mutation data formats.</p>"},{"location":"examples/filtering/example_filtering/","title":"PyMutation Filtering Methods Example","text":"In\u00a0[1]: Copied! <pre>import os\nfrom IPython.display import display\nfrom pyMut.input import read_maf\n</pre> import os from IPython.display import display from pyMut.input import read_maf In\u00a0[2]: Copied! <pre># Load real TCGA LAML data\nmaf_path = os.path.join('..', '..', '..', 'src', 'pyMut', 'data', 'examples', 'MAF','tcga_laml.maf.gz')\n# TCGA data is typically based on GRCh37 assembly\npy_mut = read_maf(maf_path, assembly=\"37\")\n\nprint(f\"Loaded TCGA LAML data: {len(py_mut.data)} variants\")\nprint(f\"Unique genes: {py_mut.data['Hugo_Symbol'].nunique()}\")\nprint(f\"Unique samples: {py_mut.data['Tumor_Sample_Barcode'].nunique()}\")\nprint(f\"Chromosomes present: {sorted(py_mut.data['CHROM'].unique())}\")\n\n# Display first few rows\nprint(\"\\nFirst 5 rows of the dataset:\")\ndisplay(py_mut.data.head())\n</pre> # Load real TCGA LAML data maf_path = os.path.join('..', '..', '..', 'src', 'pyMut', 'data', 'examples', 'MAF','tcga_laml.maf.gz') # TCGA data is typically based on GRCh37 assembly py_mut = read_maf(maf_path, assembly=\"37\")  print(f\"Loaded TCGA LAML data: {len(py_mut.data)} variants\") print(f\"Unique genes: {py_mut.data['Hugo_Symbol'].nunique()}\") print(f\"Unique samples: {py_mut.data['Tumor_Sample_Barcode'].nunique()}\") print(f\"Chromosomes present: {sorted(py_mut.data['CHROM'].unique())}\")  # Display first few rows print(\"\\nFirst 5 rows of the dataset:\") display(py_mut.data.head())  <pre>2025-08-01 02:02:53,078 | INFO | pyMut.input | Starting MAF reading: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n2025-08-01 02:02:53,079 | INFO | pyMut.input | Loading from cache: ../../../src/pyMut/data/examples/MAF/.pymut_cache/tcga_laml.maf_8bfbda65c4b23428.parquet\n2025-08-01 02:02:53,105 | INFO | pyMut.input | Cache loaded successfully in 0.03 seconds\n</pre> <pre>Loaded TCGA LAML data: 2091 variants\nUnique genes: 1611\nUnique samples: 190\nChromosomes present: ['X', 'chr1', 'chr10', 'chr11', 'chr12', 'chr13', 'chr14', 'chr15', 'chr16', 'chr17', 'chr18', 'chr19', 'chr2', 'chr20', 'chr21', 'chr22', 'chr3', 'chr4', 'chr5', 'chr6', 'chr7', 'chr8', 'chr9']\n\nFirst 5 rows of the dataset:\n</pre> CHROM POS ID REF ALT QUAL FILTER TCGA-AB-2988 TCGA-AB-2869 TCGA-AB-3009 ... Strand Variant_Classification Variant_Type Reference_Allele Tumor_Seq_Allele1 Tumor_Seq_Allele2 Tumor_Sample_Barcode Protein_Change i_TumorVAF_WU i_transcript_name 0 chr9 100077177 . T C . . T|T T|T T|T ... + SILENT SNP T T C TCGA-AB-2886 p.T431T 9.76 NM_020893.1 1 chr9 100085148 . G A . . G|G G|G G|G ... + MISSENSE_MUTATION SNP G G A TCGA-AB-2917 p.R581H 18.4 NM_020893.1 2 chr9 100971322 . A C . . A|A A|A A|A ... + MISSENSE_MUTATION SNP A A C TCGA-AB-2841 p.L593R 45.83 NM_018421.3 3 chr9 104086335 . C T . . C|C C|C C|C ... + MISSENSE_MUTATION SNP C C T TCGA-AB-2877 p.T325I 37.12 NM_017753.2 4 chr9 104124840 . G A . . G|A G|G G|G ... + MISSENSE_MUTATION SNP G G A TCGA-AB-2988 p.T376M 48.35 NM_001701.1 <p>5 rows \u00d7 216 columns</p> In\u00a0[3]: Copied! <pre>print(\"=== Chromosome and Sample Filtering Examples ===\")\n\n# Example 1: Filter by chromosome only\nprint(\"\\n1. Filter by chromosome 17:\")\nfiltered_chr17 = py_mut.filter_by_chrom_sample(chrom='17')\nprint(f\"Original variants: {len(py_mut.data)}\")\nprint(f\"Chromosome 17 variants: {len(filtered_chr17.data)}\")\n\n# Example 2: Filter by multiple chromosomes\nprint(\"\\n2. Filter by chromosomes 17 and X:\")\nfiltered_multi_chr = py_mut.filter_by_chrom_sample(chrom=['17', 'X'])\nprint(f\"Chromosomes 17 and X variants: {len(filtered_multi_chr.data)}\")\n\n# Example 3: Filter by sample (get first few samples)\nsample_list = py_mut.data['Tumor_Sample_Barcode'].unique()[:3].tolist()\nprint(f\"\\n3. Filter by first 3 samples: {sample_list}\")\nfiltered_samples = py_mut.filter_by_chrom_sample(sample=sample_list)\nprint(f\"Filtered by samples variants: {len(filtered_samples.data)}\")\nprint(f\"Unique samples in filtered data: {filtered_samples.data['Tumor_Sample_Barcode'].nunique()}\")\n\n# Example 4: Combined filtering (chromosome + sample)\nprint(f\"\\n4. Combined filter - chromosome 17 + first sample:\")\nfiltered_combined = py_mut.filter_by_chrom_sample(chrom='17', sample=sample_list[0])\nprint(f\"Combined filter variants: {len(filtered_combined.data)}\")\n</pre> print(\"=== Chromosome and Sample Filtering Examples ===\")  # Example 1: Filter by chromosome only print(\"\\n1. Filter by chromosome 17:\") filtered_chr17 = py_mut.filter_by_chrom_sample(chrom='17') print(f\"Original variants: {len(py_mut.data)}\") print(f\"Chromosome 17 variants: {len(filtered_chr17.data)}\")  # Example 2: Filter by multiple chromosomes print(\"\\n2. Filter by chromosomes 17 and X:\") filtered_multi_chr = py_mut.filter_by_chrom_sample(chrom=['17', 'X']) print(f\"Chromosomes 17 and X variants: {len(filtered_multi_chr.data)}\")  # Example 3: Filter by sample (get first few samples) sample_list = py_mut.data['Tumor_Sample_Barcode'].unique()[:3].tolist() print(f\"\\n3. Filter by first 3 samples: {sample_list}\") filtered_samples = py_mut.filter_by_chrom_sample(sample=sample_list) print(f\"Filtered by samples variants: {len(filtered_samples.data)}\") print(f\"Unique samples in filtered data: {filtered_samples.data['Tumor_Sample_Barcode'].nunique()}\")  # Example 4: Combined filtering (chromosome + sample) print(f\"\\n4. Combined filter - chromosome 17 + first sample:\") filtered_combined = py_mut.filter_by_chrom_sample(chrom='17', sample=sample_list[0]) print(f\"Combined filter variants: {len(filtered_combined.data)}\")  <pre>2025-08-01 02:02:53,152 | INFO | pyMut.filters.chrom_sample_filter | Chromosomes to filter: ['chr17']\n2025-08-01 02:02:53,156 | INFO | pyMut.filters.chrom_sample_filter | Applied chromosome filter: chr17\n2025-08-01 02:02:53,156 | INFO | pyMut.filters.chrom_sample_filter | Combined filter applied: chromosome:chr17\n2025-08-01 02:02:53,157 | INFO | pyMut.filters.chrom_sample_filter | Variants before filter: 2091\n2025-08-01 02:02:53,157 | INFO | pyMut.filters.chrom_sample_filter | Variants after filter: 99\n2025-08-01 02:02:53,157 | INFO | pyMut.filters.chrom_sample_filter | Variants filtered out: 1992\n2025-08-01 02:02:53,157 | INFO | pyMut.filters.chrom_sample_filter | Successfully applied filter: chromosome:chr17\n2025-08-01 02:02:53,160 | INFO | pyMut.filters.chrom_sample_filter | Chromosomes to filter: ['chr17', 'chrX']\n2025-08-01 02:02:53,165 | INFO | pyMut.filters.chrom_sample_filter | Applied chromosome filter: chr17,chrX\n2025-08-01 02:02:53,166 | INFO | pyMut.filters.chrom_sample_filter | Combined filter applied: chromosome:chr17,chrX\n2025-08-01 02:02:53,166 | INFO | pyMut.filters.chrom_sample_filter | Variants before filter: 2091\n2025-08-01 02:02:53,167 | INFO | pyMut.filters.chrom_sample_filter | Variants after filter: 205\n2025-08-01 02:02:53,167 | INFO | pyMut.filters.chrom_sample_filter | Variants filtered out: 1886\n2025-08-01 02:02:53,167 | INFO | pyMut.filters.chrom_sample_filter | Successfully applied filter: chromosome:chr17,chrX\n2025-08-01 02:02:53,169 | INFO | pyMut.filters.chrom_sample_filter | Samples to filter: ['TCGA-AB-2886', 'TCGA-AB-2917', 'TCGA-AB-2841']\n2025-08-01 02:02:53,170 | INFO | pyMut.filters.chrom_sample_filter | Using MAF-style filtering with column 'Tumor_Sample_Barcode'\n2025-08-01 02:02:53,173 | INFO | pyMut.filters.chrom_sample_filter | Sample columns kept: ['TCGA-AB-2886', 'TCGA-AB-2917', 'TCGA-AB-2841']\n2025-08-01 02:02:53,173 | INFO | pyMut.filters.chrom_sample_filter | Sample columns removed: ['TCGA-AB-2988', 'TCGA-AB-2869', 'TCGA-AB-3009', 'TCGA-AB-2830', 'TCGA-AB-2887', 'TCGA-AB-2920', 'TCGA-AB-2934', 'TCGA-AB-2905', 'TCGA-AB-2999', 'TCGA-AB-2898', 'TCGA-AB-2950', 'TCGA-AB-2923', 'TCGA-AB-2847', 'TCGA-AB-2973', 'TCGA-AB-2931', 'TCGA-AB-2936', 'TCGA-AB-2854', 'TCGA-AB-2906', 'TCGA-AB-2819', 'TCGA-AB-2894', 'TCGA-AB-2945', 'TCGA-AB-2913', 'TCGA-AB-2996', 'TCGA-AB-2952', 'TCGA-AB-2805', 'TCGA-AB-2833', 'TCGA-AB-2862', 'TCGA-AB-2890', 'TCGA-AB-2832', 'TCGA-AB-2911', 'TCGA-AB-2912', 'TCGA-AB-3001', 'TCGA-AB-2910', 'TCGA-AB-2992', 'TCGA-AB-2901', 'TCGA-AB-2822', 'TCGA-AB-2964', 'TCGA-AB-2915', 'TCGA-AB-2807', 'TCGA-AB-2997', 'TCGA-AB-2926', 'TCGA-AB-2897', 'TCGA-AB-2927', 'TCGA-AB-2895', 'TCGA-AB-2929', 'TCGA-AB-2899', 'TCGA-AB-2882', 'TCGA-AB-2935', 'TCGA-AB-2907', 'TCGA-AB-2853', 'TCGA-AB-2889', 'TCGA-AB-2900', 'TCGA-AB-2976', 'TCGA-AB-2990', 'TCGA-AB-2984', 'TCGA-AB-2802', 'TCGA-AB-2864', 'TCGA-AB-2838', 'TCGA-AB-2966', 'TCGA-AB-2903', 'TCGA-AB-2817', 'TCGA-AB-2921', 'TCGA-AB-2959', 'TCGA-AB-2846', 'TCGA-AB-2930', 'TCGA-AB-2888', 'TCGA-AB-2994', 'TCGA-AB-2828', 'TCGA-AB-3002', 'TCGA-AB-2861', 'TCGA-AB-2908', 'TCGA-AB-2991', 'TCGA-AB-2922', 'TCGA-AB-2916', 'TCGA-AB-2874', 'TCGA-AB-2980', 'TCGA-AB-2972', 'TCGA-AB-2821', 'TCGA-AB-2885', 'TCGA-AB-2870', 'TCGA-AB-2814', 'TCGA-AB-2804', 'TCGA-AB-2865', 'TCGA-AB-2978', 'TCGA-AB-2943', 'TCGA-AB-3005', 'TCGA-AB-3006', 'TCGA-AB-2827', 'TCGA-AB-2956', 'TCGA-AB-2857', 'TCGA-AB-2813', 'TCGA-AB-2924', 'TCGA-AB-2968', 'TCGA-AB-2970', 'TCGA-AB-2963', 'TCGA-AB-2925', 'TCGA-AB-2971', 'TCGA-AB-2904', 'TCGA-AB-2875', 'TCGA-AB-2985', 'TCGA-AB-2876', 'TCGA-AB-2891', 'TCGA-AB-2851', 'TCGA-AB-2831', 'TCGA-AB-2939', 'TCGA-AB-2858', 'TCGA-AB-2977', 'TCGA-AB-2839', 'TCGA-AB-2868', 'TCGA-AB-2820', 'TCGA-AB-2859', 'TCGA-AB-2937', 'TCGA-AB-2949', 'TCGA-AB-2818', 'TCGA-AB-2881', 'TCGA-AB-2808', 'TCGA-AB-2938', 'TCGA-AB-2803', 'TCGA-AB-3008', 'TCGA-AB-2816', 'TCGA-AB-2806', 'TCGA-AB-2878', 'TCGA-AB-3012', 'TCGA-AB-2810', 'TCGA-AB-2872', 'TCGA-AB-2845', 'TCGA-AB-2849', 'TCGA-AB-2914', 'TCGA-AB-2989', 'TCGA-AB-2928', 'TCGA-AB-2863', 'TCGA-AB-2955', 'TCGA-AB-2843', 'TCGA-AB-2993', 'TCGA-AB-2880', 'TCGA-AB-2940', 'TCGA-AB-2979', 'TCGA-AB-3000', 'TCGA-AB-3007', 'TCGA-AB-2867', 'TCGA-AB-2812', 'TCGA-AB-2983', 'TCGA-AB-2860', 'TCGA-AB-2829', 'TCGA-AB-2871', 'TCGA-AB-2986', 'TCGA-AB-2946', 'TCGA-AB-2995', 'TCGA-AB-2918', 'TCGA-AB-2809', 'TCGA-AB-2824', 'TCGA-AB-2825', 'TCGA-AB-2873', 'TCGA-AB-2884', 'TCGA-AB-2896', 'TCGA-AB-2919', 'TCGA-AB-2947', 'TCGA-AB-2965', 'TCGA-AB-2967', 'TCGA-AB-2974', 'TCGA-AB-2975', 'TCGA-AB-2981', 'TCGA-AB-2987', 'TCGA-AB-2932', 'TCGA-AB-2877', 'TCGA-AB-2892', 'TCGA-AB-2957', 'TCGA-AB-2998', 'TCGA-AB-2823', 'TCGA-AB-2844', 'TCGA-AB-2982', 'TCGA-AB-2834', 'TCGA-AB-2836', 'TCGA-AB-2840', 'TCGA-AB-2879', 'TCGA-AB-2909', 'TCGA-AB-2942', 'TCGA-AB-3011', 'TCGA-AB-2835', 'TCGA-AB-2826', 'TCGA-AB-2850', 'TCGA-AB-2866', 'TCGA-AB-2948', 'TCGA-AB-2842', 'TCGA-AB-2883', 'TCGA-AB-2941', 'TCGA-AB-2954', 'TCGA-AB-2848', 'TCGA-AB-2855', 'TCGA-AB-2933']\n2025-08-01 02:02:53,174 | INFO | pyMut.filters.chrom_sample_filter | Applied sample filter: TCGA-AB-2886,TCGA-AB-2917,TCGA-AB-2841\n2025-08-01 02:02:53,174 | INFO | pyMut.filters.chrom_sample_filter | Combined filter applied: sample:TCGA-AB-2886,TCGA-AB-2917,TCGA-AB-2841\n2025-08-01 02:02:53,175 | INFO | pyMut.filters.chrom_sample_filter | Variants before filter: 2091\n2025-08-01 02:02:53,175 | INFO | pyMut.filters.chrom_sample_filter | Variants after filter: 34\n2025-08-01 02:02:53,175 | INFO | pyMut.filters.chrom_sample_filter | Variants filtered out: 2057\n2025-08-01 02:02:53,176 | INFO | pyMut.filters.chrom_sample_filter | Successfully applied filter: sample:TCGA-AB-2886,TCGA-AB-2917,TCGA-AB-2841\n2025-08-01 02:02:53,178 | INFO | pyMut.filters.chrom_sample_filter | Chromosomes to filter: ['chr17']\n2025-08-01 02:02:53,181 | INFO | pyMut.filters.chrom_sample_filter | Applied chromosome filter: chr17\n2025-08-01 02:02:53,182 | INFO | pyMut.filters.chrom_sample_filter | Samples to filter: ['TCGA-AB-2886']\n2025-08-01 02:02:53,182 | INFO | pyMut.filters.chrom_sample_filter | Using MAF-style filtering with column 'Tumor_Sample_Barcode'\n2025-08-01 02:02:53,185 | INFO | pyMut.filters.chrom_sample_filter | Sample columns kept: ['TCGA-AB-2886']\n2025-08-01 02:02:53,185 | INFO | pyMut.filters.chrom_sample_filter | Sample columns removed: ['TCGA-AB-2988', 'TCGA-AB-2869', 'TCGA-AB-3009', 'TCGA-AB-2830', 'TCGA-AB-2887', 'TCGA-AB-2920', 'TCGA-AB-2934', 'TCGA-AB-2905', 'TCGA-AB-2999', 'TCGA-AB-2898', 'TCGA-AB-2950', 'TCGA-AB-2923', 'TCGA-AB-2847', 'TCGA-AB-2973', 'TCGA-AB-2931', 'TCGA-AB-2936', 'TCGA-AB-2854', 'TCGA-AB-2906', 'TCGA-AB-2819', 'TCGA-AB-2894', 'TCGA-AB-2945', 'TCGA-AB-2913', 'TCGA-AB-2996', 'TCGA-AB-2952', 'TCGA-AB-2805', 'TCGA-AB-2833', 'TCGA-AB-2862', 'TCGA-AB-2890', 'TCGA-AB-2832', 'TCGA-AB-2911', 'TCGA-AB-2912', 'TCGA-AB-3001', 'TCGA-AB-2910', 'TCGA-AB-2992', 'TCGA-AB-2901', 'TCGA-AB-2822', 'TCGA-AB-2964', 'TCGA-AB-2915', 'TCGA-AB-2807', 'TCGA-AB-2997', 'TCGA-AB-2926', 'TCGA-AB-2897', 'TCGA-AB-2927', 'TCGA-AB-2895', 'TCGA-AB-2929', 'TCGA-AB-2899', 'TCGA-AB-2882', 'TCGA-AB-2935', 'TCGA-AB-2907', 'TCGA-AB-2853', 'TCGA-AB-2889', 'TCGA-AB-2900', 'TCGA-AB-2976', 'TCGA-AB-2990', 'TCGA-AB-2984', 'TCGA-AB-2802', 'TCGA-AB-2864', 'TCGA-AB-2838', 'TCGA-AB-2966', 'TCGA-AB-2903', 'TCGA-AB-2817', 'TCGA-AB-2921', 'TCGA-AB-2959', 'TCGA-AB-2846', 'TCGA-AB-2930', 'TCGA-AB-2888', 'TCGA-AB-2994', 'TCGA-AB-2828', 'TCGA-AB-3002', 'TCGA-AB-2861', 'TCGA-AB-2908', 'TCGA-AB-2991', 'TCGA-AB-2922', 'TCGA-AB-2916', 'TCGA-AB-2874', 'TCGA-AB-2980', 'TCGA-AB-2972', 'TCGA-AB-2821', 'TCGA-AB-2885', 'TCGA-AB-2870', 'TCGA-AB-2814', 'TCGA-AB-2804', 'TCGA-AB-2865', 'TCGA-AB-2978', 'TCGA-AB-2943', 'TCGA-AB-3005', 'TCGA-AB-3006', 'TCGA-AB-2827', 'TCGA-AB-2956', 'TCGA-AB-2857', 'TCGA-AB-2841', 'TCGA-AB-2917', 'TCGA-AB-2813', 'TCGA-AB-2924', 'TCGA-AB-2968', 'TCGA-AB-2970', 'TCGA-AB-2963', 'TCGA-AB-2925', 'TCGA-AB-2971', 'TCGA-AB-2904', 'TCGA-AB-2875', 'TCGA-AB-2985', 'TCGA-AB-2876', 'TCGA-AB-2891', 'TCGA-AB-2851', 'TCGA-AB-2831', 'TCGA-AB-2939', 'TCGA-AB-2858', 'TCGA-AB-2977', 'TCGA-AB-2839', 'TCGA-AB-2868', 'TCGA-AB-2820', 'TCGA-AB-2859', 'TCGA-AB-2937', 'TCGA-AB-2949', 'TCGA-AB-2818', 'TCGA-AB-2881', 'TCGA-AB-2808', 'TCGA-AB-2938', 'TCGA-AB-2803', 'TCGA-AB-3008', 'TCGA-AB-2816', 'TCGA-AB-2806', 'TCGA-AB-2878', 'TCGA-AB-3012', 'TCGA-AB-2810', 'TCGA-AB-2872', 'TCGA-AB-2845', 'TCGA-AB-2849', 'TCGA-AB-2914', 'TCGA-AB-2989', 'TCGA-AB-2928', 'TCGA-AB-2863', 'TCGA-AB-2955', 'TCGA-AB-2843', 'TCGA-AB-2993', 'TCGA-AB-2880', 'TCGA-AB-2940', 'TCGA-AB-2979', 'TCGA-AB-3000', 'TCGA-AB-3007', 'TCGA-AB-2867', 'TCGA-AB-2812', 'TCGA-AB-2983', 'TCGA-AB-2860', 'TCGA-AB-2829', 'TCGA-AB-2871', 'TCGA-AB-2986', 'TCGA-AB-2946', 'TCGA-AB-2995', 'TCGA-AB-2918', 'TCGA-AB-2809', 'TCGA-AB-2824', 'TCGA-AB-2825', 'TCGA-AB-2873', 'TCGA-AB-2884', 'TCGA-AB-2896', 'TCGA-AB-2919', 'TCGA-AB-2947', 'TCGA-AB-2965', 'TCGA-AB-2967', 'TCGA-AB-2974', 'TCGA-AB-2975', 'TCGA-AB-2981', 'TCGA-AB-2987', 'TCGA-AB-2932', 'TCGA-AB-2877', 'TCGA-AB-2892', 'TCGA-AB-2957', 'TCGA-AB-2998', 'TCGA-AB-2823', 'TCGA-AB-2844', 'TCGA-AB-2982', 'TCGA-AB-2834', 'TCGA-AB-2836', 'TCGA-AB-2840', 'TCGA-AB-2879', 'TCGA-AB-2909', 'TCGA-AB-2942', 'TCGA-AB-3011', 'TCGA-AB-2835', 'TCGA-AB-2826', 'TCGA-AB-2850', 'TCGA-AB-2866', 'TCGA-AB-2948', 'TCGA-AB-2842', 'TCGA-AB-2883', 'TCGA-AB-2941', 'TCGA-AB-2954', 'TCGA-AB-2848', 'TCGA-AB-2855', 'TCGA-AB-2933']\n2025-08-01 02:02:53,185 | INFO | pyMut.filters.chrom_sample_filter | Applied sample filter: TCGA-AB-2886\n2025-08-01 02:02:53,186 | INFO | pyMut.filters.chrom_sample_filter | Combined filter applied: chromosome:chr17|sample:TCGA-AB-2886\n2025-08-01 02:02:53,186 | INFO | pyMut.filters.chrom_sample_filter | Variants before filter: 2091\n2025-08-01 02:02:53,186 | INFO | pyMut.filters.chrom_sample_filter | Variants after filter: 0\n2025-08-01 02:02:53,187 | INFO | pyMut.filters.chrom_sample_filter | Variants filtered out: 2091\n2025-08-01 02:02:53,188 | WARNING | pyMut.filters.chrom_sample_filter | No variants found matching the filter criteria: chromosome:chr17|sample:TCGA-AB-2886\n</pre> <pre>=== Chromosome and Sample Filtering Examples ===\n\n1. Filter by chromosome 17:\nOriginal variants: 2091\nChromosome 17 variants: 99\n\n2. Filter by chromosomes 17 and X:\nChromosomes 17 and X variants: 205\n\n3. Filter by first 3 samples: ['TCGA-AB-2886', 'TCGA-AB-2917', 'TCGA-AB-2841']\nFiltered by samples variants: 34\nUnique samples in filtered data: Tumor_Sample_Barcode    3\nTumor_Sample_Barcode    3\ndtype: int64\n\n4. Combined filter - chromosome 17 + first sample:\nCombined filter variants: 0\n</pre> In\u00a0[4]: Copied! <pre>print(\"=== Genomic Range Filtering Examples ===\")\n\n# Example 1: Filter a specific region on chromosome 17\nprint(\"\\n1. Filter chromosome 17, positions 7,500,000 to 8,000,000:\")\nfiltered_region = py_mut.region(chrom='17', start=7500000, end=8000000)\nprint(f\"Original variants: {len(py_mut.data)}\")\nprint(f\"Region variants: {len(filtered_region.data)}\")\n\nif len(filtered_region.data) &gt; 0:\n    print(\"Genes in this region:\")\n    genes_in_region = filtered_region.data['Hugo_Symbol'].value_counts().head(10)\n    display(genes_in_region)\n\n# Example 2: Filter a smaller region\nprint(\"\\n2. Filter chromosome 17, positions 7,570,000 to 7,590,000 (TP53 region):\")\nfiltered_tp53_region = py_mut.region(chrom='17', start=7570000, end=7590000)\nprint(f\"TP53 region variants: {len(filtered_tp53_region.data)}\")\n\nif len(filtered_tp53_region.data) &gt; 0:\n    print(\"Variants in TP53 region:\")\n    display(filtered_tp53_region.data[['Hugo_Symbol', 'CHROM', 'POS', 'REF', 'ALT', 'Variant_Classification']].head())\n</pre> print(\"=== Genomic Range Filtering Examples ===\")  # Example 1: Filter a specific region on chromosome 17 print(\"\\n1. Filter chromosome 17, positions 7,500,000 to 8,000,000:\") filtered_region = py_mut.region(chrom='17', start=7500000, end=8000000) print(f\"Original variants: {len(py_mut.data)}\") print(f\"Region variants: {len(filtered_region.data)}\")  if len(filtered_region.data) &gt; 0:     print(\"Genes in this region:\")     genes_in_region = filtered_region.data['Hugo_Symbol'].value_counts().head(10)     display(genes_in_region)  # Example 2: Filter a smaller region print(\"\\n2. Filter chromosome 17, positions 7,570,000 to 7,590,000 (TP53 region):\") filtered_tp53_region = py_mut.region(chrom='17', start=7570000, end=7590000) print(f\"TP53 region variants: {len(filtered_tp53_region.data)}\")  if len(filtered_tp53_region.data) &gt; 0:     print(\"Variants in TP53 region:\")     display(filtered_tp53_region.data[['Hugo_Symbol', 'CHROM', 'POS', 'REF', 'ALT', 'Variant_Classification']].head())  <pre>2025-08-01 02:02:53,222 | INFO | pyMut.filters.genomic_range | Chromosome formatted: '17' -&gt; 'chr17'\n2025-08-01 02:02:53,222 | INFO | pyMut.filters.genomic_range | Attempting to use PyArrow optimization\n2025-08-01 02:02:53,228 | INFO | pyMut.filters.genomic_range | PyArrow optimization successful\n2025-08-01 02:02:53,228 | INFO | pyMut.filters.genomic_range | Genomic filter applied: chr17:7500000-8000000\n2025-08-01 02:02:53,229 | INFO | pyMut.filters.genomic_range | Variants before filter: 2091\n2025-08-01 02:02:53,229 | INFO | pyMut.filters.genomic_range | Variants after filter: 20\n2025-08-01 02:02:53,229 | INFO | pyMut.filters.genomic_range | Variants filtered out: 2071\n2025-08-01 02:02:53,230 | INFO | pyMut.filters.genomic_range | Successfully filtered genomic region: chr17:7500000-8000000\n</pre> <pre>=== Genomic Range Filtering Examples ===\n\n1. Filter chromosome 17, positions 7,500,000 to 8,000,000:\nOriginal variants: 2091\nRegion variants: 20\nGenes in this region:\n</pre> <pre>Hugo_Symbol\nTP53      19\nGUCY2D     1\nName: count, dtype: int64[pyarrow]</pre> <pre>2025-08-01 02:02:53,234 | INFO | pyMut.filters.genomic_range | Chromosome formatted: '17' -&gt; 'chr17'\n2025-08-01 02:02:53,235 | INFO | pyMut.filters.genomic_range | Attempting to use PyArrow optimization\n2025-08-01 02:02:53,240 | INFO | pyMut.filters.genomic_range | PyArrow optimization successful\n2025-08-01 02:02:53,241 | INFO | pyMut.filters.genomic_range | Genomic filter applied: chr17:7570000-7590000\n2025-08-01 02:02:53,241 | INFO | pyMut.filters.genomic_range | Variants before filter: 2091\n2025-08-01 02:02:53,242 | INFO | pyMut.filters.genomic_range | Variants after filter: 19\n2025-08-01 02:02:53,242 | INFO | pyMut.filters.genomic_range | Variants filtered out: 2072\n2025-08-01 02:02:53,242 | INFO | pyMut.filters.genomic_range | Successfully filtered genomic region: chr17:7570000-7590000\n</pre> <pre>\n2. Filter chromosome 17, positions 7,570,000 to 7,590,000 (TP53 region):\nTP53 region variants: 19\nVariants in TP53 region:\n</pre> Hugo_Symbol CHROM POS REF ALT Variant_Classification 1932 TP53 chr17 7574003 G - FRAME_SHIFT_DEL 1933 TP53 chr17 7574018 G A MISSENSE_MUTATION 1934 TP53 chr17 7576897 G A NONSENSE_MUTATION 1935 TP53 chr17 7577081 T C MISSENSE_MUTATION 1936 TP53 chr17 7577100 T C MISSENSE_MUTATION In\u00a0[5]: Copied! <pre>print(\"=== Gene-based Filtering Examples ===\")\n\n# Get the most common genes in the dataset\ncommon_genes = py_mut.data['Hugo_Symbol'].value_counts().head(5)\nprint(\"Most common genes in the dataset:\")\ndisplay(common_genes)\n\n# Example 1: Filter by TP53 gene\nprint(\"\\n1. Filter by TP53 gene:\")\nfiltered_tp53 = py_mut.gen_region('TP53')\nprint(f\"TP53 variants: {len(filtered_tp53.data)}\")\n\nif len(filtered_tp53.data) &gt; 0:\n    print(\"TP53 variant types:\")\n    tp53_variants = filtered_tp53.data['Variant_Classification'].value_counts()\n    display(tp53_variants)\n\n# Example 2: Filter by the most common gene\nmost_common_gene = common_genes.index[0]\nprint(f\"\\n2. Filter by most common gene ({most_common_gene}):\")\nfiltered_common = py_mut.gen_region(most_common_gene)\nprint(f\"{most_common_gene} variants: {len(filtered_common.data)}\")\n\n# Example 3: Filter by multiple genes (using multiple calls)\nprint(\"\\n3. Filter by multiple genes (FLT3, NPM1, DNMT3A):\")\ngenes_of_interest = ['FLT3', 'NPM1', 'DNMT3A']\nfor gene in genes_of_interest:\n    filtered_gene = py_mut.gen_region(gene)\n    print(f\"{gene}: {len(filtered_gene.data)} variants\")\n</pre> print(\"=== Gene-based Filtering Examples ===\")  # Get the most common genes in the dataset common_genes = py_mut.data['Hugo_Symbol'].value_counts().head(5) print(\"Most common genes in the dataset:\") display(common_genes)  # Example 1: Filter by TP53 gene print(\"\\n1. Filter by TP53 gene:\") filtered_tp53 = py_mut.gen_region('TP53') print(f\"TP53 variants: {len(filtered_tp53.data)}\")  if len(filtered_tp53.data) &gt; 0:     print(\"TP53 variant types:\")     tp53_variants = filtered_tp53.data['Variant_Classification'].value_counts()     display(tp53_variants)  # Example 2: Filter by the most common gene most_common_gene = common_genes.index[0] print(f\"\\n2. Filter by most common gene ({most_common_gene}):\") filtered_common = py_mut.gen_region(most_common_gene) print(f\"{most_common_gene} variants: {len(filtered_common.data)}\")  # Example 3: Filter by multiple genes (using multiple calls) print(\"\\n3. Filter by multiple genes (FLT3, NPM1, DNMT3A):\") genes_of_interest = ['FLT3', 'NPM1', 'DNMT3A'] for gene in genes_of_interest:     filtered_gene = py_mut.gen_region(gene)     print(f\"{gene}: {len(filtered_gene.data)} variants\")  <pre>=== Gene-based Filtering Examples ===\nMost common genes in the dataset:\n</pre> <pre>Hugo_Symbol\nFLT3      38\nDNMT3A    29\nTET2      26\nCEBPA     19\nTP53      19\nName: count, dtype: int64[pyarrow]</pre> <pre>2025-08-01 02:02:53,307 | INFO | pyMut.filters.genomic_range | Applying gene filter for: TP53\n2025-08-01 02:02:53,307 | INFO | pyMut.filters.genomic_range | Source format detected: MAF\n2025-08-01 02:02:53,308 | INFO | pyMut.filters.genomic_range | Processing MAF format - looking for Hugo_Symbol column\n2025-08-01 02:02:53,308 | INFO | pyMut.filters.genomic_range | Found Hugo_Symbol column: Hugo_Symbol\n2025-08-01 02:02:53,312 | INFO | pyMut.filters.genomic_range | Gene filter applied: TP53\n2025-08-01 02:02:53,312 | INFO | pyMut.filters.genomic_range | Variants before filter: 2091\n2025-08-01 02:02:53,312 | INFO | pyMut.filters.genomic_range | Variants after filter: 19\n2025-08-01 02:02:53,313 | INFO | pyMut.filters.genomic_range | Variants filtered out: 2072\n2025-08-01 02:02:53,313 | INFO | pyMut.filters.genomic_range | Successfully filtered data for gene: TP53\n</pre> <pre>\n1. Filter by TP53 gene:\nTP53 variants: 19\nTP53 variant types:\n</pre> <pre>Variant_Classification\nMISSENSE_MUTATION    11\nSPLICE_SITE           3\nFRAME_SHIFT_DEL       2\nFRAME_SHIFT_INS       2\nNONSENSE_MUTATION     1\nName: count, dtype: int64[pyarrow]</pre> <pre>2025-08-01 02:02:53,316 | INFO | pyMut.filters.genomic_range | Applying gene filter for: FLT3\n2025-08-01 02:02:53,317 | INFO | pyMut.filters.genomic_range | Source format detected: MAF\n2025-08-01 02:02:53,317 | INFO | pyMut.filters.genomic_range | Processing MAF format - looking for Hugo_Symbol column\n2025-08-01 02:02:53,317 | INFO | pyMut.filters.genomic_range | Found Hugo_Symbol column: Hugo_Symbol\n2025-08-01 02:02:53,319 | INFO | pyMut.filters.genomic_range | Gene filter applied: FLT3\n2025-08-01 02:02:53,320 | INFO | pyMut.filters.genomic_range | Variants before filter: 2091\n2025-08-01 02:02:53,320 | INFO | pyMut.filters.genomic_range | Variants after filter: 38\n2025-08-01 02:02:53,320 | INFO | pyMut.filters.genomic_range | Variants filtered out: 2053\n2025-08-01 02:02:53,320 | INFO | pyMut.filters.genomic_range | Successfully filtered data for gene: FLT3\n2025-08-01 02:02:53,321 | INFO | pyMut.filters.genomic_range | Applying gene filter for: FLT3\n2025-08-01 02:02:53,322 | INFO | pyMut.filters.genomic_range | Source format detected: MAF\n2025-08-01 02:02:53,322 | INFO | pyMut.filters.genomic_range | Processing MAF format - looking for Hugo_Symbol column\n2025-08-01 02:02:53,323 | INFO | pyMut.filters.genomic_range | Found Hugo_Symbol column: Hugo_Symbol\n2025-08-01 02:02:53,325 | INFO | pyMut.filters.genomic_range | Gene filter applied: FLT3\n2025-08-01 02:02:53,325 | INFO | pyMut.filters.genomic_range | Variants before filter: 2091\n2025-08-01 02:02:53,326 | INFO | pyMut.filters.genomic_range | Variants after filter: 38\n2025-08-01 02:02:53,326 | INFO | pyMut.filters.genomic_range | Variants filtered out: 2053\n2025-08-01 02:02:53,326 | INFO | pyMut.filters.genomic_range | Successfully filtered data for gene: FLT3\n2025-08-01 02:02:53,327 | INFO | pyMut.filters.genomic_range | Applying gene filter for: NPM1\n2025-08-01 02:02:53,327 | INFO | pyMut.filters.genomic_range | Source format detected: MAF\n2025-08-01 02:02:53,327 | INFO | pyMut.filters.genomic_range | Processing MAF format - looking for Hugo_Symbol column\n2025-08-01 02:02:53,328 | INFO | pyMut.filters.genomic_range | Found Hugo_Symbol column: Hugo_Symbol\n2025-08-01 02:02:53,329 | INFO | pyMut.filters.genomic_range | Gene filter applied: NPM1\n2025-08-01 02:02:53,330 | INFO | pyMut.filters.genomic_range | Variants before filter: 2091\n2025-08-01 02:02:53,330 | INFO | pyMut.filters.genomic_range | Variants after filter: 14\n2025-08-01 02:02:53,330 | INFO | pyMut.filters.genomic_range | Variants filtered out: 2077\n2025-08-01 02:02:53,330 | INFO | pyMut.filters.genomic_range | Successfully filtered data for gene: NPM1\n2025-08-01 02:02:53,331 | INFO | pyMut.filters.genomic_range | Applying gene filter for: DNMT3A\n2025-08-01 02:02:53,332 | INFO | pyMut.filters.genomic_range | Source format detected: MAF\n2025-08-01 02:02:53,332 | INFO | pyMut.filters.genomic_range | Processing MAF format - looking for Hugo_Symbol column\n2025-08-01 02:02:53,333 | INFO | pyMut.filters.genomic_range | Found Hugo_Symbol column: Hugo_Symbol\n2025-08-01 02:02:53,335 | INFO | pyMut.filters.genomic_range | Gene filter applied: DNMT3A\n2025-08-01 02:02:53,335 | INFO | pyMut.filters.genomic_range | Variants before filter: 2091\n2025-08-01 02:02:53,336 | INFO | pyMut.filters.genomic_range | Variants after filter: 29\n2025-08-01 02:02:53,336 | INFO | pyMut.filters.genomic_range | Variants filtered out: 2062\n2025-08-01 02:02:53,336 | INFO | pyMut.filters.genomic_range | Successfully filtered data for gene: DNMT3A\n</pre> <pre>\n2. Filter by most common gene (FLT3):\nFLT3 variants: 38\n\n3. Filter by multiple genes (FLT3, NPM1, DNMT3A):\nFLT3: 38 variants\nNPM1: 14 variants\nDNMT3A: 29 variants\n</pre> In\u00a0[6]: Copied! <pre>print(\"=== PASS Filter Check Examples ===\")\n\n# First, let's see what FILTER values are present in our data\nif 'FILTER' in py_mut.data.columns:\n    print(\"FILTER column values:\")\n    filter_values = py_mut.data['FILTER'].value_counts()\n    display(filter_values)\n    \n    # Example 1: Check specific records for PASS filter\n    print(\"\\n1. Checking specific records for PASS filter:\")\n    \n    # Get a few sample records\n    sample_records = py_mut.data.head(3)\n    \n    for idx, row in sample_records.iterrows():\n        chrom = row['CHROM']\n        pos = row['POS']\n        ref = row['REF']\n        alt = row['ALT']\n        \n        is_pass = py_mut.pass_filter(chrom=chrom, pos=pos, ref=ref, alt=alt)\n        print(f\"Record {chrom}:{pos} {ref}&gt;{alt} - PASS: {is_pass}\")\n        \n    # Example 2: Check a non-existent record\n    print(\"\\n2. Checking a non-existent record:\")\n    is_pass_fake = py_mut.pass_filter(chrom='1', pos=999999999, ref='A', alt='T')\n    print(f\"Non-existent record - PASS: {is_pass_fake}\")\n    \nelse:\n    print(\"FILTER column not found in the dataset\")\n    print(\"Available columns:\", list(py_mut.data.columns))\n</pre> print(\"=== PASS Filter Check Examples ===\")  # First, let's see what FILTER values are present in our data if 'FILTER' in py_mut.data.columns:     print(\"FILTER column values:\")     filter_values = py_mut.data['FILTER'].value_counts()     display(filter_values)          # Example 1: Check specific records for PASS filter     print(\"\\n1. Checking specific records for PASS filter:\")          # Get a few sample records     sample_records = py_mut.data.head(3)          for idx, row in sample_records.iterrows():         chrom = row['CHROM']         pos = row['POS']         ref = row['REF']         alt = row['ALT']                  is_pass = py_mut.pass_filter(chrom=chrom, pos=pos, ref=ref, alt=alt)         print(f\"Record {chrom}:{pos} {ref}&gt;{alt} - PASS: {is_pass}\")              # Example 2: Check a non-existent record     print(\"\\n2. Checking a non-existent record:\")     is_pass_fake = py_mut.pass_filter(chrom='1', pos=999999999, ref='A', alt='T')     print(f\"Non-existent record - PASS: {is_pass_fake}\")      else:     print(\"FILTER column not found in the dataset\")     print(\"Available columns:\", list(py_mut.data.columns))  <pre>=== PASS Filter Check Examples ===\nFILTER column values:\n</pre> <pre>FILTER\n.    2091\nName: count, dtype: int64</pre> <pre>2025-08-01 02:02:53,391 | INFO | pyMut.filters.pass_filter | Checking PASS filter for: chr9:100077177 T&gt;C\n2025-08-01 02:02:53,391 | INFO | pyMut.filters.pass_filter | Attempting to use PyArrow optimization\n2025-08-01 02:02:53,398 | INFO | pyMut.filters.pass_filter | PASS filter result: False\n2025-08-01 02:02:53,399 | INFO | pyMut.filters.pass_filter | Checking PASS filter for: chr9:100085148 G&gt;A\n2025-08-01 02:02:53,399 | INFO | pyMut.filters.pass_filter | Attempting to use PyArrow optimization\n2025-08-01 02:02:53,405 | INFO | pyMut.filters.pass_filter | PASS filter result: False\n2025-08-01 02:02:53,406 | INFO | pyMut.filters.pass_filter | Checking PASS filter for: chr9:100971322 A&gt;C\n2025-08-01 02:02:53,406 | INFO | pyMut.filters.pass_filter | Attempting to use PyArrow optimization\n2025-08-01 02:02:53,411 | INFO | pyMut.filters.pass_filter | PASS filter result: False\n2025-08-01 02:02:53,412 | INFO | pyMut.filters.pass_filter | Checking PASS filter for: chr1:999999999 A&gt;T\n2025-08-01 02:02:53,412 | INFO | pyMut.filters.pass_filter | Attempting to use PyArrow optimization\n2025-08-01 02:02:53,417 | INFO | pyMut.filters.pass_filter | Record not found: chr1:999999999 A&gt;T\n</pre> <pre>\n1. Checking specific records for PASS filter:\nRecord chr9:100077177 T&gt;C - PASS: False\nRecord chr9:100085148 G&gt;A - PASS: False\nRecord chr9:100971322 A&gt;C - PASS: False\n\n2. Checking a non-existent record:\nNon-existent record - PASS: False\n</pre> In\u00a0[7]: Copied! <pre>print(\"=== Combining Multiple Filters ===\")\n\n# Example: Filter by chromosome 17, then by TP53 gene, then by genomic region\nprint(\"1. Multi-step filtering: Chromosome 17 \u2192 TP53 gene \u2192 specific region\")\n\n# Step 1: Filter by chromosome 17\nstep1 = py_mut.filter_by_chrom_sample(chrom='17')\nprint(f\"Step 1 - Chromosome 17: {len(step1.data)} variants\")\n\n# Step 2: Filter by TP53 gene\nstep2 = step1.gen_region('TP53')\nprint(f\"Step 2 - TP53 gene: {len(step2.data)} variants\")\n\n# Step 3: Filter by specific region (TP53 locus)\nstep3 = step2.region(chrom='17', start=7570000, end=7590000)\nprint(f\"Step 3 - TP53 region: {len(step3.data)} variants\")\n\nif len(step3.data) &gt; 0:\n    print(\"\\nFinal filtered results:\")\n    display(step3.data[['Hugo_Symbol', 'CHROM', 'POS', 'REF', 'ALT', 'Variant_Classification', 'Tumor_Sample_Barcode']])\n\n# Show the filter history\nprint(f\"\\nFilter history: {step3.metadata.filters}\")\n</pre> print(\"=== Combining Multiple Filters ===\")  # Example: Filter by chromosome 17, then by TP53 gene, then by genomic region print(\"1. Multi-step filtering: Chromosome 17 \u2192 TP53 gene \u2192 specific region\")  # Step 1: Filter by chromosome 17 step1 = py_mut.filter_by_chrom_sample(chrom='17') print(f\"Step 1 - Chromosome 17: {len(step1.data)} variants\")  # Step 2: Filter by TP53 gene step2 = step1.gen_region('TP53') print(f\"Step 2 - TP53 gene: {len(step2.data)} variants\")  # Step 3: Filter by specific region (TP53 locus) step3 = step2.region(chrom='17', start=7570000, end=7590000) print(f\"Step 3 - TP53 region: {len(step3.data)} variants\")  if len(step3.data) &gt; 0:     print(\"\\nFinal filtered results:\")     display(step3.data[['Hugo_Symbol', 'CHROM', 'POS', 'REF', 'ALT', 'Variant_Classification', 'Tumor_Sample_Barcode']])  # Show the filter history print(f\"\\nFilter history: {step3.metadata.filters}\")  <pre>2025-08-01 02:02:53,451 | INFO | pyMut.filters.chrom_sample_filter | Chromosomes to filter: ['chr17']\n2025-08-01 02:02:53,454 | INFO | pyMut.filters.chrom_sample_filter | Applied chromosome filter: chr17\n2025-08-01 02:02:53,455 | INFO | pyMut.filters.chrom_sample_filter | Combined filter applied: chromosome:chr17\n2025-08-01 02:02:53,455 | INFO | pyMut.filters.chrom_sample_filter | Variants before filter: 2091\n2025-08-01 02:02:53,456 | INFO | pyMut.filters.chrom_sample_filter | Variants after filter: 99\n2025-08-01 02:02:53,456 | INFO | pyMut.filters.chrom_sample_filter | Variants filtered out: 1992\n2025-08-01 02:02:53,457 | INFO | pyMut.filters.chrom_sample_filter | Successfully applied filter: chromosome:chr17\n2025-08-01 02:02:53,457 | INFO | pyMut.filters.genomic_range | Applying gene filter for: TP53\n2025-08-01 02:02:53,457 | INFO | pyMut.filters.genomic_range | Source format detected: MAF\n2025-08-01 02:02:53,458 | INFO | pyMut.filters.genomic_range | Processing MAF format - looking for Hugo_Symbol column\n2025-08-01 02:02:53,458 | INFO | pyMut.filters.genomic_range | Found Hugo_Symbol column: Hugo_Symbol\n2025-08-01 02:02:53,462 | INFO | pyMut.filters.genomic_range | Gene filter applied: TP53\n2025-08-01 02:02:53,463 | INFO | pyMut.filters.genomic_range | Variants before filter: 99\n2025-08-01 02:02:53,463 | INFO | pyMut.filters.genomic_range | Variants after filter: 19\n2025-08-01 02:02:53,464 | INFO | pyMut.filters.genomic_range | Variants filtered out: 80\n2025-08-01 02:02:53,464 | INFO | pyMut.filters.genomic_range | Successfully filtered data for gene: TP53\n2025-08-01 02:02:53,465 | INFO | pyMut.filters.genomic_range | Chromosome formatted: '17' -&gt; 'chr17'\n2025-08-01 02:02:53,465 | INFO | pyMut.filters.genomic_range | Attempting to use PyArrow optimization\n2025-08-01 02:02:53,467 | INFO | pyMut.filters.genomic_range | PyArrow optimization successful\n2025-08-01 02:02:53,468 | INFO | pyMut.filters.genomic_range | Genomic filter applied: chr17:7570000-7590000\n2025-08-01 02:02:53,468 | INFO | pyMut.filters.genomic_range | Variants before filter: 19\n2025-08-01 02:02:53,468 | INFO | pyMut.filters.genomic_range | Variants after filter: 19\n2025-08-01 02:02:53,469 | INFO | pyMut.filters.genomic_range | Variants filtered out: 0\n2025-08-01 02:02:53,469 | WARNING | pyMut.filters.genomic_range | Filter did not remove any variants - check region coordinates\n</pre> <pre>=== Combining Multiple Filters ===\n1. Multi-step filtering: Chromosome 17 \u2192 TP53 gene \u2192 specific region\nStep 1 - Chromosome 17: 99 variants\nStep 2 - TP53 gene: 19 variants\nStep 3 - TP53 region: 19 variants\n\nFinal filtered results:\n</pre> Hugo_Symbol CHROM POS REF ALT Variant_Classification Tumor_Sample_Barcode 1932 TP53 chr17 7574003 G - FRAME_SHIFT_DEL TCGA-AB-2938 1933 TP53 chr17 7574018 G A MISSENSE_MUTATION TCGA-AB-2904 1934 TP53 chr17 7576897 G A NONSENSE_MUTATION TCGA-AB-2908 1935 TP53 chr17 7577081 T C MISSENSE_MUTATION TCGA-AB-2952 1936 TP53 chr17 7577100 T C MISSENSE_MUTATION TCGA-AB-2829 1937 TP53 chr17 7577121 G A MISSENSE_MUTATION TCGA-AB-2943 1938 TP53 chr17 7577538 C T MISSENSE_MUTATION TCGA-AB-2935 1939 TP53 chr17 7577609 C T SPLICE_SITE TCGA-AB-2829 1940 TP53 chr17 7578181 - GCGGCTC FRAME_SHIFT_INS TCGA-AB-2820 1941 TP53 chr17 7578206 T C MISSENSE_MUTATION TCGA-AB-2878 1942 TP53 chr17 7578265 A C MISSENSE_MUTATION TCGA-AB-2941 1943 TP53 chr17 7578272 G A MISSENSE_MUTATION TCGA-AB-2885 1944 TP53 chr17 7578394 T C MISSENSE_MUTATION TCGA-AB-2938 1945 TP53 chr17 7578403 C T MISSENSE_MUTATION TCGA-AB-2813 1946 TP53 chr17 7578414 A - FRAME_SHIFT_DEL TCGA-AB-2878 1947 TP53 chr17 7578507 G C MISSENSE_MUTATION TCGA-AB-2908 1948 TP53 chr17 7578555 C T SPLICE_SITE TCGA-AB-2868 1949 TP53 chr17 7579312 C T SPLICE_SITE TCGA-AB-2838 1950 TP53 chr17 7579569 - CCATCCAG FRAME_SHIFT_INS TCGA-AB-2860 <pre>\nFilter history: ['.', 'chromosome:chr17', 'gene_filter:Hugo_Symbol:TP53', 'genomic_region:chr17:7570000-7590000']\n</pre>"},{"location":"examples/filtering/example_filtering/#pymutation-filtering-methods-example","title":"PyMutation Filtering Methods Example\u00b6","text":"<p>This notebook demonstrates the various filtering methods available in PyMutation:</p> <ul> <li><code>filter_by_chrom_sample</code>: Filter by chromosome and/or sample</li> <li><code>region</code>: Filter by genomic coordinates</li> <li><code>gen_region</code>: Filter by gene name</li> <li><code>pass_filter</code>: Check if specific records have FILTER == \"PASS\"</li> </ul>"},{"location":"examples/filtering/example_filtering/#load-tcga-laml-dataset","title":"Load TCGA LAML Dataset\u00b6","text":""},{"location":"examples/filtering/example_filtering/#1-chromosome-and-sample-filtering-filter_by_chrom_sample","title":"1. Chromosome and Sample Filtering (filter_by_chrom_sample)\u00b6","text":"<p>This method allows filtering by chromosome and/or sample. It comes from <code>chrom_sample_filter.py</code>.</p>"},{"location":"examples/filtering/example_filtering/#2-genomic-range-filtering-region","title":"2. Genomic Range Filtering (region)\u00b6","text":"<p>This method filters by genomic coordinates using chromosome, start, and end positions. It comes from <code>genomic_range.py</code>.</p>"},{"location":"examples/filtering/example_filtering/#3-gene-based-filtering-gen_region","title":"3. Gene-based Filtering (gen_region)\u00b6","text":"<p>This method filters by gene name using the Hugo_Symbol column. It comes from <code>genomic_range.py</code>.</p>"},{"location":"examples/filtering/example_filtering/#4-pass-filter-check-pass_filter","title":"4. PASS Filter Check (pass_filter)\u00b6","text":"<p>This method checks if specific records have FILTER == \"PASS\". It comes from <code>pass_filter.py</code>. Note: This method returns a boolean value, not a filtered dataset.</p>"},{"location":"examples/filtering/example_filtering/#5-combining-multiple-filters","title":"5. Combining Multiple Filters\u00b6","text":"<p>You can chain multiple filtering operations to create complex filters.</p>"},{"location":"examples/filtering/example_filtering/#summary","title":"Summary\u00b6","text":"<p>This notebook demonstrated the four main filtering methods available in PyMutation:</p> <ol> <li><p><code>filter_by_chrom_sample</code>: Filters by chromosome and/or sample</p> <ul> <li>Parameters: <code>chrom</code> (str or list), <code>sample</code> (str or list), <code>sample_column</code> (str)</li> <li>Returns: New PyMutation object with filtered data</li> </ul> </li> <li><p><code>region</code>: Filters by genomic coordinates</p> <ul> <li>Parameters: <code>chrom</code> (str), <code>start</code> (int), <code>end</code> (int)</li> <li>Returns: New PyMutation object with filtered data</li> </ul> </li> <li><p><code>gen_region</code>: Filters by gene name</p> <ul> <li>Parameters: <code>gen_name</code> (str)</li> <li>Returns: New PyMutation object with filtered data</li> </ul> </li> <li><p><code>pass_filter</code>: Checks if specific records have FILTER == \"PASS\"</p> <ul> <li>Parameters: <code>chrom</code> (str), <code>pos</code> (int), <code>ref</code> (str), <code>alt</code> (str)</li> <li>Returns: Boolean value</li> </ul> </li> </ol> <p>All filtering methods preserve the original data structure and update the metadata to track applied filters.</p>"},{"location":"examples/filtering/tissue_expression/","title":"Tissue Expression Filter Test with TCGA LAML Data","text":"In\u00a0[1]: Copied! <pre>import sys\nimport os\nimport pandas as pd\nfrom IPython.display import display\n\n# Add src to path\nsys.path.insert(0, os.path.join('..', '..', '..', 'src'))\n\nfrom pyMut.input import read_maf\nfrom pyMut.filters.tissue_expression import tissue_expression\n</pre> import sys import os import pandas as pd from IPython.display import display  # Add src to path sys.path.insert(0, os.path.join('..', '..', '..', 'src'))  from pyMut.input import read_maf from pyMut.filters.tissue_expression import tissue_expression  In\u00a0[2]: Copied! <pre># Load real TCGA LAML data\nmaf_path = os.path.join('..', '..', '..', 'src', 'pyMut', 'data', 'examples', 'MAF','tcga_laml.maf.gz')\n# TCGA data is typically based on GRCh37 assembly\npy_mut = read_maf(maf_path, assembly=\"37\")\n\nprint(f\"Loaded TCGA LAML data: {len(py_mut.data)} variants\")\nprint(f\"Unique genes: {py_mut.data['Hugo_Symbol'].nunique()}\")\nprint(f\"Unique samples: {py_mut.data['Tumor_Sample_Barcode'].nunique()}\")\n</pre> # Load real TCGA LAML data maf_path = os.path.join('..', '..', '..', 'src', 'pyMut', 'data', 'examples', 'MAF','tcga_laml.maf.gz') # TCGA data is typically based on GRCh37 assembly py_mut = read_maf(maf_path, assembly=\"37\")  print(f\"Loaded TCGA LAML data: {len(py_mut.data)} variants\") print(f\"Unique genes: {py_mut.data['Hugo_Symbol'].nunique()}\") print(f\"Unique samples: {py_mut.data['Tumor_Sample_Barcode'].nunique()}\")  <pre>2025-08-01 02:03:35,885 | INFO | pyMut.input | Starting MAF reading: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n2025-08-01 02:03:35,886 | INFO | pyMut.input | Loading from cache: ../../../src/pyMut/data/examples/MAF/.pymut_cache/tcga_laml.maf_8bfbda65c4b23428.parquet\n2025-08-01 02:03:35,911 | INFO | pyMut.input | Cache loaded successfully in 0.03 seconds\n</pre> <pre>Loaded TCGA LAML data: 2091 variants\nUnique genes: 1611\nUnique samples: 190\n</pre> In\u00a0[3]: Copied! <pre># Test individual gene expression with genes from the dataset\nsample_genes = py_mut.data['Hugo_Symbol'].value_counts().head(3).index.tolist()\nprint(f\"Testing genes: {sample_genes}\")\n\nfor gene in sample_genes:\n    result_laml = tissue_expression(gene, [\"LAML\", 5])  # LAML = Acute Myeloid Leukemia\n    result_blca = tissue_expression(gene, [\"BLCA\", 5])  # BLCA = Bladder Cancer\n    print(f\"{gene} - LAML (&gt;5): {result_laml}, BLCA (&gt;5): {result_blca}\")\n</pre> # Test individual gene expression with genes from the dataset sample_genes = py_mut.data['Hugo_Symbol'].value_counts().head(3).index.tolist() print(f\"Testing genes: {sample_genes}\")  for gene in sample_genes:     result_laml = tissue_expression(gene, [\"LAML\", 5])  # LAML = Acute Myeloid Leukemia     result_blca = tissue_expression(gene, [\"BLCA\", 5])  # BLCA = Bladder Cancer     print(f\"{gene} - LAML (&gt;5): {result_laml}, BLCA (&gt;5): {result_blca}\")  <pre>Testing genes: ['FLT3', 'DNMT3A', 'TET2']\nFLT3 - LAML (&gt;5): False, BLCA (&gt;5): False\nDNMT3A - LAML (&gt;5): False, BLCA (&gt;5): False\nTET2 - LAML (&gt;5): False, BLCA (&gt;5): False\n</pre> In\u00a0[4]: Copied! <pre>print(f\"Original TCGA data: {len(py_mut.data)} variants\")\n\n# Filter by LAML tissue (should keep many since this is LAML data)\nfiltered_laml = py_mut.filter_by_tissue_expression([('LAML', 5)])\nprint(f\"LAML expressed (&gt;5): {len(filtered_laml.data)} variants\")\n\n\n# Filter by multiple tissues\nfiltered_multi = py_mut.filter_by_tissue_expression([('LAML', 5), ('BRCA', 3), ('LUAD', 4)])\nprint(f\"Multi-tissue expressed: {len(filtered_multi.data)} variants\")\n\n\n# Filter for NOT expressed in LAML with high threshold\nfiltered_not = py_mut.filter_by_tissue_expression([('LAML', 50)], keep_expressed=False)\nprint(f\"NOT highly expressed in LAML: {len(filtered_not.data)} variants\")\n</pre> print(f\"Original TCGA data: {len(py_mut.data)} variants\")  # Filter by LAML tissue (should keep many since this is LAML data) filtered_laml = py_mut.filter_by_tissue_expression([('LAML', 5)]) print(f\"LAML expressed (&gt;5): {len(filtered_laml.data)} variants\")   # Filter by multiple tissues filtered_multi = py_mut.filter_by_tissue_expression([('LAML', 5), ('BRCA', 3), ('LUAD', 4)]) print(f\"Multi-tissue expressed: {len(filtered_multi.data)} variants\")   # Filter for NOT expressed in LAML with high threshold filtered_not = py_mut.filter_by_tissue_expression([('LAML', 50)], keep_expressed=False) print(f\"NOT highly expressed in LAML: {len(filtered_not.data)} variants\")  <pre>Original TCGA data: 2091 variants\nLAML expressed (&gt;5): 0 variants\nMulti-tissue expressed: 915 variants\nNOT highly expressed in LAML: 2091 variants\n</pre> In\u00a0[5]: Copied! <pre># Display tissue expression results dataframes\nprint(\"\ud83d\udcca Detailed tissue expression analysis results:\")\n\nif hasattr(filtered_multi, 'tissue_expression_results'):\n    results_df = filtered_multi.tissue_expression_results\n    print(f\"\\nResults dataframe shape: {results_df.shape}\")\n    print(\"Columns:\", list(results_df.columns))\n\n    print(\"\\n\ud83d\udcca Complete tissue expression results:\")\n    display(results_df)\n\n    # Create summary statistics table\n    summary_stats = []\n    for col in results_df.columns:\n        if col.endswith('_expressed'):\n            tissue = col.replace('_expressed', '')\n            count = results_df[col].sum()\n            total = len(results_df)\n            percentage = (count / total * 100) if total &gt; 0 else 0\n            summary_stats.append({\n                'Tissue': tissue,\n                'Expressed_Count': count,\n                'Total_Genes': total,\n                'Percentage': f\"{percentage:.1f}%\"\n            })\n\n    if summary_stats:\n        print(\"\\n\ud83d\udcca Summary statistics by tissue:\")\n        summary_df = pd.DataFrame(summary_stats)\n        display(summary_df)\nelse:\n    print(\"\u274c Results dataframe not found\")\n</pre> # Display tissue expression results dataframes print(\"\ud83d\udcca Detailed tissue expression analysis results:\")  if hasattr(filtered_multi, 'tissue_expression_results'):     results_df = filtered_multi.tissue_expression_results     print(f\"\\nResults dataframe shape: {results_df.shape}\")     print(\"Columns:\", list(results_df.columns))      print(\"\\n\ud83d\udcca Complete tissue expression results:\")     display(results_df)      # Create summary statistics table     summary_stats = []     for col in results_df.columns:         if col.endswith('_expressed'):             tissue = col.replace('_expressed', '')             count = results_df[col].sum()             total = len(results_df)             percentage = (count / total * 100) if total &gt; 0 else 0             summary_stats.append({                 'Tissue': tissue,                 'Expressed_Count': count,                 'Total_Genes': total,                 'Percentage': f\"{percentage:.1f}%\"             })      if summary_stats:         print(\"\\n\ud83d\udcca Summary statistics by tissue:\")         summary_df = pd.DataFrame(summary_stats)         display(summary_df) else:     print(\"\u274c Results dataframe not found\")  <pre>\ud83d\udcca Detailed tissue expression analysis results:\n\nResults dataframe shape: (2091, 9)\nColumns: ['Index', 'Gene_Symbol', 'Expressed_in_Any_Tissue', 'LAML_expressed', 'LAML_threshold', 'BRCA_expressed', 'BRCA_threshold', 'LUAD_expressed', 'LUAD_threshold']\n\n\ud83d\udcca Complete tissue expression results:\n</pre> Index Gene_Symbol Expressed_in_Any_Tissue LAML_expressed LAML_threshold BRCA_expressed BRCA_threshold LUAD_expressed LUAD_threshold 0 0 KIAA1529 False False 5 False 3 False 4 1 1 KIAA1529 False False 5 False 3 False 4 2 2 TBC1D2 True False 5 True 3 True 4 3 3 LPPR1 False False 5 False 3 False 4 4 4 BAAT False False 5 False 3 False 4 ... ... ... ... ... ... ... ... ... ... 2086 2086 FRAS1 False False 5 False 3 False 4 2087 2087 GPR78 False False 5 False 3 False 4 2088 2088 MEPE False False 5 False 3 False 4 2089 2089 RAP1GDS1 True False 5 True 3 True 4 2090 2090 SLC2A9 False False 5 False 3 False 4 <p>2091 rows \u00d7 9 columns</p> <pre>\n\ud83d\udcca Summary statistics by tissue:\n</pre> Tissue Expressed_Count Total_Genes Percentage 0 LAML 0 2091 0.0% 1 BRCA 886 2091 42.4% 2 LUAD 754 2091 36.1%"},{"location":"examples/filtering/tissue_expression/#tissue-expression-filter-test-with-tcga-laml-data","title":"Tissue Expression Filter Test with TCGA LAML Data\u00b6","text":"<p>Testing tissue expression functionality with real TCGA Acute Myeloid Leukemia data.</p>"},{"location":"examples/filtering/tissue_expression/#load-tcga-laml-dataset","title":"Load TCGA LAML Dataset\u00b6","text":""},{"location":"examples/filtering/tissue_expression/#test-1-individual-gene-expression-with-prints","title":"Test 1: Individual Gene Expression (with prints)\u00b6","text":""},{"location":"examples/filtering/tissue_expression/#test-2-pymutation-object-filtering","title":"Test 2: PyMutation Object Filtering\u00b6","text":""},{"location":"examples/filtering/tissue_expression/#test-3-tissue-expression-results-analysis","title":"Test 3: Tissue Expression Results Analysis\u00b6","text":""},{"location":"examples/visualization/maf_to_variant_classification/","title":"MAF To Variant Classification Example","text":"In\u00a0[1]: Copied! <pre># Path to MAF file\nmaf_path = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\"\nprint(f'\ud83d\udcc2 Loading file: {maf_path}')\n</pre> # Path to MAF file maf_path = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\" print(f'\ud83d\udcc2 Loading file: {maf_path}') <pre>\ud83d\udcc2 Cargando archivo: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n</pre> In\u00a0[2]: Copied! <pre>from pyMut.input import read_maf\nimport time\n\n# Read the MAF file and generate the PyMutation object\nprint(\"First read (will create cache)...\")\nstart_time = time.time()\npy_mutation = read_maf(maf_path, assembly=\"37\")\nfirst_read_time = time.time() - start_time\nprint(f\"First read completed in {first_read_time:.3f} seconds\")\n\n# Show the resulting object\nprint(py_mutation)\n</pre> from pyMut.input import read_maf import time  # Read the MAF file and generate the PyMutation object print(\"First read (will create cache)...\") start_time = time.time() py_mutation = read_maf(maf_path, assembly=\"37\") first_read_time = time.time() - start_time print(f\"First read completed in {first_read_time:.3f} seconds\")  # Show the resulting object print(py_mutation) <pre>2025-08-01 00:57:10,611 | INFO | pyMut.input | Starting MAF reading: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n2025-08-01 00:57:10,611 | INFO | pyMut.input | Loading from cache: ../../../src/pyMut/data/examples/MAF/.pymut_cache/tcga_laml.maf_8bfbda65c4b23428.parquet\n</pre> <pre>Primera lectura (crear\u00e1 cache)...\n</pre> <pre>2025-08-01 00:57:10,651 | INFO | pyMut.input | Cache loaded successfully in 0.04 seconds\n</pre> <pre>Primera lectura completada en 0.041 segundos\n&lt;pyMut.core.PyMutation object at 0x7c46f70df280&gt;\n</pre> In\u00a0[3]: Copied! <pre>py_mutation.configure_high_quality_plots()\n\npy_mutation.variant_classification_plot()\n</pre> py_mutation.configure_high_quality_plots()  py_mutation.variant_classification_plot() Out[3]: In\u00a0[4]: Copied! <pre># py_mutation.configure_high_quality_plots()\npy_mutation.summary_plot()\n</pre> # py_mutation.configure_high_quality_plots() py_mutation.summary_plot() Out[4]: In\u00a0[5]: Copied! <pre># py_mutation.configure_high_quality_plots()\npy_mutation.variant_type_plot()\n</pre> # py_mutation.configure_high_quality_plots() py_mutation.variant_type_plot() Out[5]:"},{"location":"examples/visualization/maf_to_variant_classification/#maf-to-variant-classification-example","title":"MAF To Variant Classification Example\u00b6","text":"<p>This notebook tests the <code>read_maf</code> method from the <code>pyMut.input</code> module that generates a <code>PyMutation</code> object. The <code>read_maf</code> function now includes automatic caching functionality for improved performance.</p>"},{"location":"examples/visualization/oncoplot_example/","title":"Example of oncoplot","text":"In\u00a0[1]: Copied! <pre>from pyMut.input import read_maf\n\n\nmaf_path = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\"\nprint(f'\ud83d\udcc2 Loading file: {maf_path}')\n\n# Read the MAF file and create the PyMutation object\npy_mutation = read_maf(maf_path,assembly=\"37\")\n</pre> from pyMut.input import read_maf   maf_path = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\" print(f'\ud83d\udcc2 Loading file: {maf_path}')  # Read the MAF file and create the PyMutation object py_mutation = read_maf(maf_path,assembly=\"37\") <pre>2025-08-01 00:58:01,467 | INFO | pyMut.input | Starting MAF reading: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n2025-08-01 00:58:01,468 | INFO | pyMut.input | Loading from cache: ../../../src/pyMut/data/examples/MAF/.pymut_cache/tcga_laml.maf_8bfbda65c4b23428.parquet\n2025-08-01 00:58:01,494 | INFO | pyMut.input | Cache loaded successfully in 0.03 seconds\n</pre> <pre>\ud83d\udcc2 Cargando archivo: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n</pre> In\u00a0[2]: Copied! <pre>py_mutation.configure_high_quality_plots()\n</pre> py_mutation.configure_high_quality_plots() In\u00a0[3]: Copied! <pre>py_mutation.oncoplot()\n</pre> py_mutation.oncoplot() <pre>Processing 193 samples and data from 2091 variants...\nProcessed matrix: 1611 genes x 193 samples\nGenes with mutations: 1611\nApplying standard cascade algorithm (maftools)...\nCascade applied:\n  - Genes sorted by frequency: 10\n  - Samples sorted by cascade algorithm: 180\n  - Final samples shown: 180\n</pre> <pre>/home/luisruimore/Escritorio/TFG/src/pyMut/visualizations/oncoplot.py:416: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n  numeric_matrix = plot_matrix.replace(value_to_num)\n/home/luisruimore/Escritorio/TFG/src/pyMut/visualizations/oncoplot.py:490: FutureWarning: DataFrame.applymap has been deprecated. Use DataFrame.map instead.\n  numeric_matrix = plot_matrix.applymap(lambda x: value_to_num[x])\n</pre> <pre>Oncoplot created successfully:\n  - 10 genes\n  - 180 samples\n  - 9 variant types\n  - Standard cascade algorithm applied (maftools)\n</pre> Out[3]:"},{"location":"examples/visualization/oncoplot_example/#example-of-oncoplot","title":"Example of oncoplot\u00b6","text":""},{"location":"examples/visualization/summary_plot_example/","title":"Example of how to use the summary plot","text":"In\u00a0[1]: Copied! <pre>from pyMut.input import read_maf\n\nmaf_path = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\"\nprint(f'\ud83d\udcc2 Loading file: {maf_path}')\n\n# Read the MAF file and create the PyMutation object\npy_mutation = read_maf(maf_path,assembly=\"37\")\n</pre> from pyMut.input import read_maf  maf_path = \"../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\" print(f'\ud83d\udcc2 Loading file: {maf_path}')  # Read the MAF file and create the PyMutation object py_mutation = read_maf(maf_path,assembly=\"37\") <pre>2025-08-01 00:59:35,029 | INFO | pyMut.input | Starting MAF reading: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n2025-08-01 00:59:35,030 | INFO | pyMut.input | Loading from cache: ../../../src/pyMut/data/examples/MAF/.pymut_cache/tcga_laml.maf_8bfbda65c4b23428.parquet\n2025-08-01 00:59:35,058 | INFO | pyMut.input | Cache loaded successfully in 0.03 seconds\n</pre> <pre>\ud83d\udcc2 Cargando archivo: ../../../src/pyMut/data/examples/MAF/tcga_laml.maf.gz\n</pre> In\u00a0[2]: Copied! <pre>py_mutation.configure_high_quality_plots()\n</pre> py_mutation.configure_high_quality_plots() In\u00a0[3]: Copied! <pre>py_mutation.summary_plot()\n</pre> py_mutation.summary_plot() Out[3]: In\u00a0[4]: Copied! <pre>py_mutation.snv_class_plot().savefig(\"summary_plot.png\")\n</pre> py_mutation.snv_class_plot().savefig(\"summary_plot.png\")"},{"location":"examples/visualization/summary_plot_example/#example-of-how-to-use-the-summary-plot","title":"Example of how to use the summary plot\u00b6","text":""}]}